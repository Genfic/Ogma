
{% if HasOperations -%}
{% if GenerateClientInterfaces -%}
{% if ExportTypes %}export {% endif %}interface I{{ Class }} {
{%     for operation in Operations -%}
    {% template Client.Method.Documentation %}
    {{ operation.MethodAccessModifier }}{{ operation.ActualOperationName }}({% for parameter in operation.Parameters %}{{ parameter.VariableName }}{% if GenerateOptionalParameters and parameter.IsOptional %}?{% endif %}: {{ parameter.Type }}{{ parameter.TypePostfix }}{% if parameter.IsLast == false %}, {% endif %}{% endfor %}): Promise<{{ operation.ResultType }}>;
{%     endfor -%}}
{% endif -%}

{% for operation in Operations -%}

{% template Client.Method.Documentation %}
export const {{ operation.ActualOperationName }} = async ({% for parameter in operation.Parameters %}{{ parameter.VariableName }}{% if GenerateOptionalParameters and parameter.IsOptional %}?{% endif %}: {{ parameter.Type }}{{ parameter.TypePostfix }}{% if parameter.IsLast == false %}, {% endif %}{% endfor %}{% if HasConfigurationClass %}configuration: {{ ConfigurationClass }}, {% endif %}{% if operation.Parameters.size > 0 %}, {% endif %}baseUrl?: string{% if UseAbortSignal %}{% if operation.Parameters.size > 0 %}, {% endif %}signal?: AbortSignal | undefined{% endif %}): Promise<{{ operation.ResultType }}> => {
    
    {% template Client.RequestUrl %}

{%     if operation.HasBody -%}
    {% template Client.RequestBody %}

{%     endif -%}
    let options_ = <RequestInit>{
{%     if operation.HasBody -%}
        body: content_,
{%     endif -%}
        method: "{{ operation.HttpMethodUpper | upcase }}",
{%     if UseAbortSignal -%}
        signal,
{%     endif -%}
        headers: {
{%     for parameter in operation.HeaderParameters -%}
            "{{ parameter.Name }}": {{ parameter.VariableName }} !== undefined && {{ parameter.VariableName }} !== null ? "" + {{ parameter.VariableName }} : "",
{%     endfor -%}
{%     if operation.HasContent or operation.ConsumesFormUrlEncoded -%}
            "Content-Type": "{{ operation.Consumes }}",
{%     endif -%}
{%     if operation.HasResultType and operation.HasAcceptHeaderParameterParameter == false -%}
            "Accept": "{{ operation.Produces }}"
{%     endif -%}
        }
    };

    const _response = await fetch(url_, options_);

    const process{{ operation.ActualOperationNameUpper }} = async (response: Response): Promise<{{ operation.ResultType }}> => {
        const status = response.status;

        let _headers: any = {};
        response?.headers?.forEach((v: any, k: any) => _headers[k] = v); 


        {% if operation.HandleReferences and operation.RequiresMappings -%}
        let _mappings: { source: any, target: any }[] = [];
        {% endif -%}
        {% for response in operation.Responses -%}
        if (status === {{ response.StatusCode }}{% if response.CheckChunkedStatusCode %} || status === 206{% endif %}) {
            {% template Client.ProcessResponse.HandleStatusCode %}
        } else {% endfor -%}
        {% if operation.HasDefaultResponse -%}
        {
        {%     assign response = operation.DefaultResponse -%}
            {% template Client.ProcessResponse.HandleStatusCode %}
        }
        {% else -%}
        if (status !== 200 && status !== 204) {
            const _responseText = await response.json();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        {% template Client.ProcessResponse.Return %}
        {% endif -%}


    }

    return await process{{ operation.ActualOperationNameUpper }}(_response);
}


{% endfor -%}
{% endif -%}