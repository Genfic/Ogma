/* tslint:disable */
/* eslint-disable */
/**
 * My Title
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    CommentsThread,
    CommentsThreadFromJSON,
    CommentsThreadFromJSONTyped,
    CommentsThreadToJSON,
} from './CommentsThread';
import {
    ContentBlock,
    ContentBlockFromJSON,
    ContentBlockFromJSONTyped,
    ContentBlockToJSON,
} from './ContentBlock';
import {
    Report,
    ReportFromJSON,
    ReportFromJSONTyped,
    ReportToJSON,
} from './Report';
import {
    Story,
    StoryFromJSON,
    StoryFromJSONTyped,
    StoryToJSON,
} from './Story';

/**
 * 
 * @export
 * @interface ChapterAllOf
 */
export interface ChapterAllOf {
    /**
     * 
     * @type {number}
     * @memberof ChapterAllOf
     */
    order?: number;
    /**
     * 
     * @type {Date}
     * @memberof ChapterAllOf
     */
    creationDate?: Date;
    /**
     * 
     * @type {Date}
     * @memberof ChapterAllOf
     */
    publicationDate?: Date | null;
    /**
     * 
     * @type {string}
     * @memberof ChapterAllOf
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof ChapterAllOf
     */
    slug?: string;
    /**
     * 
     * @type {string}
     * @memberof ChapterAllOf
     */
    body?: string;
    /**
     * 
     * @type {string}
     * @memberof ChapterAllOf
     */
    startNotes?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ChapterAllOf
     */
    endNotes?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ChapterAllOf
     */
    wordCount?: number;
    /**
     * 
     * @type {CommentsThread}
     * @memberof ChapterAllOf
     */
    commentsThread?: CommentsThread;
    /**
     * 
     * @type {Story}
     * @memberof ChapterAllOf
     */
    story?: Story;
    /**
     * 
     * @type {number}
     * @memberof ChapterAllOf
     */
    storyId?: number;
    /**
     * 
     * @type {ContentBlock}
     * @memberof ChapterAllOf
     */
    contentBlock?: ContentBlock | null;
    /**
     * 
     * @type {number}
     * @memberof ChapterAllOf
     */
    contentBlockId?: number | null;
    /**
     * 
     * @type {Array<Report>}
     * @memberof ChapterAllOf
     */
    reports?: Array<Report>;
}

export function ChapterAllOfFromJSON(json: any): ChapterAllOf {
    return ChapterAllOfFromJSONTyped(json, false);
}

export function ChapterAllOfFromJSONTyped(json: any, ignoreDiscriminator: boolean): ChapterAllOf {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'order': !exists(json, 'order') ? undefined : json['order'],
        'creationDate': !exists(json, 'creationDate') ? undefined : (new Date(json['creationDate'])),
        'publicationDate': !exists(json, 'publicationDate') ? undefined : (json['publicationDate'] === null ? null : new Date(json['publicationDate'])),
        'title': !exists(json, 'title') ? undefined : json['title'],
        'slug': !exists(json, 'slug') ? undefined : json['slug'],
        'body': !exists(json, 'body') ? undefined : json['body'],
        'startNotes': !exists(json, 'startNotes') ? undefined : json['startNotes'],
        'endNotes': !exists(json, 'endNotes') ? undefined : json['endNotes'],
        'wordCount': !exists(json, 'wordCount') ? undefined : json['wordCount'],
        'commentsThread': !exists(json, 'commentsThread') ? undefined : CommentsThreadFromJSON(json['commentsThread']),
        'story': !exists(json, 'story') ? undefined : StoryFromJSON(json['story']),
        'storyId': !exists(json, 'storyId') ? undefined : json['storyId'],
        'contentBlock': !exists(json, 'contentBlock') ? undefined : ContentBlockFromJSON(json['contentBlock']),
        'contentBlockId': !exists(json, 'contentBlockId') ? undefined : json['contentBlockId'],
        'reports': !exists(json, 'reports') ? undefined : ((json['reports'] as Array<any>).map(ReportFromJSON)),
    };
}

export function ChapterAllOfToJSON(value?: ChapterAllOf | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'order': value.order,
        'creationDate': value.creationDate === undefined ? undefined : (value.creationDate.toISOString()),
        'publicationDate': value.publicationDate === undefined ? undefined : (value.publicationDate === null ? null : value.publicationDate.toISOString()),
        'title': value.title,
        'slug': value.slug,
        'body': value.body,
        'startNotes': value.startNotes,
        'endNotes': value.endNotes,
        'wordCount': value.wordCount,
        'commentsThread': CommentsThreadToJSON(value.commentsThread),
        'story': StoryToJSON(value.story),
        'storyId': value.storyId,
        'contentBlock': ContentBlockToJSON(value.contentBlock),
        'contentBlockId': value.contentBlockId,
        'reports': value.reports === undefined ? undefined : ((value.reports as Array<any>).map(ReportToJSON)),
    };
}

