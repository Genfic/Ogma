/* tslint:disable */
/* eslint-disable */
/**
 * My Title
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    CommentRevision,
    CommentRevisionFromJSON,
    CommentRevisionFromJSONTyped,
    CommentRevisionToJSON,
} from './CommentRevision';
import {
    CommentsThread,
    CommentsThreadFromJSON,
    CommentsThreadFromJSONTyped,
    CommentsThreadToJSON,
} from './CommentsThread';
import {
    EDeletedBy,
    EDeletedByFromJSON,
    EDeletedByFromJSONTyped,
    EDeletedByToJSON,
} from './EDeletedBy';
import {
    OgmaUser,
    OgmaUserFromJSON,
    OgmaUserFromJSONTyped,
    OgmaUserToJSON,
} from './OgmaUser';
import {
    Report,
    ReportFromJSON,
    ReportFromJSONTyped,
    ReportToJSON,
} from './Report';

/**
 * 
 * @export
 * @interface CommentAllOf
 */
export interface CommentAllOf {
    /**
     * 
     * @type {CommentsThread}
     * @memberof CommentAllOf
     */
    commentsThread?: CommentsThread;
    /**
     * 
     * @type {number}
     * @memberof CommentAllOf
     */
    commentsThreadId?: number;
    /**
     * 
     * @type {OgmaUser}
     * @memberof CommentAllOf
     */
    author?: OgmaUser;
    /**
     * 
     * @type {number}
     * @memberof CommentAllOf
     */
    authorId?: number;
    /**
     * 
     * @type {Date}
     * @memberof CommentAllOf
     */
    dateTime?: Date;
    /**
     * 
     * @type {Date}
     * @memberof CommentAllOf
     */
    lastEdit?: Date | null;
    /**
     * 
     * @type {string}
     * @memberof CommentAllOf
     */
    body?: string;
    /**
     * 
     * @type {EDeletedBy}
     * @memberof CommentAllOf
     */
    deletedBy?: EDeletedBy | null;
    /**
     * 
     * @type {OgmaUser}
     * @memberof CommentAllOf
     */
    deletedByUser?: OgmaUser | null;
    /**
     * 
     * @type {number}
     * @memberof CommentAllOf
     */
    deletedByUserId?: number | null;
    /**
     * 
     * @type {Array<CommentRevision>}
     * @memberof CommentAllOf
     */
    revisions?: Array<CommentRevision>;
    /**
     * 
     * @type {number}
     * @memberof CommentAllOf
     */
    editCount?: number;
    /**
     * 
     * @type {Array<Report>}
     * @memberof CommentAllOf
     */
    reports?: Array<Report>;
}

export function CommentAllOfFromJSON(json: any): CommentAllOf {
    return CommentAllOfFromJSONTyped(json, false);
}

export function CommentAllOfFromJSONTyped(json: any, ignoreDiscriminator: boolean): CommentAllOf {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'commentsThread': !exists(json, 'commentsThread') ? undefined : CommentsThreadFromJSON(json['commentsThread']),
        'commentsThreadId': !exists(json, 'commentsThreadId') ? undefined : json['commentsThreadId'],
        'author': !exists(json, 'author') ? undefined : OgmaUserFromJSON(json['author']),
        'authorId': !exists(json, 'authorId') ? undefined : json['authorId'],
        'dateTime': !exists(json, 'dateTime') ? undefined : (new Date(json['dateTime'])),
        'lastEdit': !exists(json, 'lastEdit') ? undefined : (json['lastEdit'] === null ? null : new Date(json['lastEdit'])),
        'body': !exists(json, 'body') ? undefined : json['body'],
        'deletedBy': !exists(json, 'deletedBy') ? undefined : EDeletedByFromJSON(json['deletedBy']),
        'deletedByUser': !exists(json, 'deletedByUser') ? undefined : OgmaUserFromJSON(json['deletedByUser']),
        'deletedByUserId': !exists(json, 'deletedByUserId') ? undefined : json['deletedByUserId'],
        'revisions': !exists(json, 'revisions') ? undefined : ((json['revisions'] as Array<any>).map(CommentRevisionFromJSON)),
        'editCount': !exists(json, 'editCount') ? undefined : json['editCount'],
        'reports': !exists(json, 'reports') ? undefined : ((json['reports'] as Array<any>).map(ReportFromJSON)),
    };
}

export function CommentAllOfToJSON(value?: CommentAllOf | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'commentsThread': CommentsThreadToJSON(value.commentsThread),
        'commentsThreadId': value.commentsThreadId,
        'author': OgmaUserToJSON(value.author),
        'authorId': value.authorId,
        'dateTime': value.dateTime === undefined ? undefined : (value.dateTime.toISOString()),
        'lastEdit': value.lastEdit === undefined ? undefined : (value.lastEdit === null ? null : value.lastEdit.toISOString()),
        'body': value.body,
        'deletedBy': EDeletedByToJSON(value.deletedBy),
        'deletedByUser': OgmaUserToJSON(value.deletedByUser),
        'deletedByUserId': value.deletedByUserId,
        'revisions': value.revisions === undefined ? undefined : ((value.revisions as Array<any>).map(CommentRevisionToJSON)),
        'editCount': value.editCount,
        'reports': value.reports === undefined ? undefined : ((value.reports as Array<any>).map(ReportToJSON)),
    };
}

