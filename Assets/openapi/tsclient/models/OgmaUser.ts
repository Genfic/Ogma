/* tslint:disable */
/* eslint-disable */
/**
 * My Title
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    BlacklistedRating,
    BlacklistedRatingFromJSON,
    BlacklistedRatingFromJSONTyped,
    BlacklistedRatingToJSON,
} from './BlacklistedRating';
import {
    BlacklistedTag,
    BlacklistedTagFromJSON,
    BlacklistedTagFromJSONTyped,
    BlacklistedTagToJSON,
} from './BlacklistedTag';
import {
    Blogpost,
    BlogpostFromJSON,
    BlogpostFromJSONTyped,
    BlogpostToJSON,
} from './Blogpost';
import {
    Club,
    ClubFromJSON,
    ClubFromJSONTyped,
    ClubToJSON,
} from './Club';
import {
    CommentsThread,
    CommentsThreadFromJSON,
    CommentsThreadFromJSONTyped,
    CommentsThreadToJSON,
} from './CommentsThread';
import {
    IdentityUserOfLong,
    IdentityUserOfLongFromJSON,
    IdentityUserOfLongFromJSONTyped,
    IdentityUserOfLongToJSON,
} from './IdentityUserOfLong';
import {
    Infraction,
    InfractionFromJSON,
    InfractionFromJSONTyped,
    InfractionToJSON,
} from './Infraction';
import {
    Notification,
    NotificationFromJSON,
    NotificationFromJSONTyped,
    NotificationToJSON,
} from './Notification';
import {
    OgmaRole,
    OgmaRoleFromJSON,
    OgmaRoleFromJSONTyped,
    OgmaRoleToJSON,
} from './OgmaRole';
import {
    OgmaUserAllOf,
    OgmaUserAllOfFromJSON,
    OgmaUserAllOfFromJSONTyped,
    OgmaUserAllOfToJSON,
} from './OgmaUserAllOf';
import {
    Report,
    ReportFromJSON,
    ReportFromJSONTyped,
    ReportToJSON,
} from './Report';
import {
    Story,
    StoryFromJSON,
    StoryFromJSONTyped,
    StoryToJSON,
} from './Story';
import {
    UserRole,
    UserRoleFromJSON,
    UserRoleFromJSONTyped,
    UserRoleToJSON,
} from './UserRole';

/**
 * 
 * @export
 * @interface OgmaUser
 */
export interface OgmaUser {
    /**
     * 
     * @type {number}
     * @memberof OgmaUser
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof OgmaUser
     */
    userName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OgmaUser
     */
    normalizedUserName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OgmaUser
     */
    email?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OgmaUser
     */
    normalizedEmail?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof OgmaUser
     */
    emailConfirmed?: boolean;
    /**
     * 
     * @type {string}
     * @memberof OgmaUser
     */
    passwordHash?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OgmaUser
     */
    securityStamp?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OgmaUser
     */
    concurrencyStamp?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OgmaUser
     */
    phoneNumber?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof OgmaUser
     */
    phoneNumberConfirmed?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof OgmaUser
     */
    twoFactorEnabled?: boolean;
    /**
     * 
     * @type {Date}
     * @memberof OgmaUser
     */
    lockoutEnd?: Date | null;
    /**
     * 
     * @type {boolean}
     * @memberof OgmaUser
     */
    lockoutEnabled?: boolean;
    /**
     * 
     * @type {number}
     * @memberof OgmaUser
     */
    accessFailedCount?: number;
    /**
     * 
     * @type {string}
     * @memberof OgmaUser
     */
    title?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OgmaUser
     */
    bio?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof OgmaUser
     */
    links?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof OgmaUser
     */
    avatar?: string;
    /**
     * 
     * @type {string}
     * @memberof OgmaUser
     */
    avatarId?: string | null;
    /**
     * 
     * @type {Date}
     * @memberof OgmaUser
     */
    registrationDate?: Date;
    /**
     * 
     * @type {Date}
     * @memberof OgmaUser
     */
    lastActive?: Date;
    /**
     * 
     * @type {Date}
     * @memberof OgmaUser
     */
    deletedAt?: Date | null;
    /**
     * 
     * @type {CommentsThread}
     * @memberof OgmaUser
     */
    commentsThread?: CommentsThread;
    /**
     * 
     * @type {Array<UserRole>}
     * @memberof OgmaUser
     */
    userRoles?: Array<UserRole> | null;
    /**
     * 
     * @type {Array<Story>}
     * @memberof OgmaUser
     */
    stories?: Array<Story>;
    /**
     * 
     * @type {Array<Blogpost>}
     * @memberof OgmaUser
     */
    blogposts?: Array<Blogpost>;
    /**
     * 
     * @type {Array<OgmaRole>}
     * @memberof OgmaUser
     */
    roles?: Array<OgmaRole>;
    /**
     * 
     * @type {Array<BlacklistedRating>}
     * @memberof OgmaUser
     */
    blacklistedRatings?: Array<BlacklistedRating>;
    /**
     * 
     * @type {Array<BlacklistedTag>}
     * @memberof OgmaUser
     */
    blacklistedTags?: Array<BlacklistedTag>;
    /**
     * 
     * @type {Array<OgmaUser>}
     * @memberof OgmaUser
     */
    blockers?: Array<OgmaUser>;
    /**
     * 
     * @type {Array<OgmaUser>}
     * @memberof OgmaUser
     */
    blocking?: Array<OgmaUser>;
    /**
     * 
     * @type {Array<OgmaUser>}
     * @memberof OgmaUser
     */
    followers?: Array<OgmaUser>;
    /**
     * 
     * @type {Array<OgmaUser>}
     * @memberof OgmaUser
     */
    following?: Array<OgmaUser>;
    /**
     * 
     * @type {Array<CommentsThread>}
     * @memberof OgmaUser
     */
    subscribedThreads?: Array<CommentsThread>;
    /**
     * 
     * @type {Array<Report>}
     * @memberof OgmaUser
     */
    reports?: Array<Report>;
    /**
     * 
     * @type {Array<Infraction>}
     * @memberof OgmaUser
     */
    infractions?: Array<Infraction>;
    /**
     * 
     * @type {Array<Club>}
     * @memberof OgmaUser
     */
    clubsBannedFrom?: Array<Club>;
    /**
     * 
     * @type {Array<Notification>}
     * @memberof OgmaUser
     */
    notifications?: Array<Notification>;
}

export function OgmaUserFromJSON(json: any): OgmaUser {
    return OgmaUserFromJSONTyped(json, false);
}

export function OgmaUserFromJSONTyped(json: any, ignoreDiscriminator: boolean): OgmaUser {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'userName': !exists(json, 'userName') ? undefined : json['userName'],
        'normalizedUserName': !exists(json, 'normalizedUserName') ? undefined : json['normalizedUserName'],
        'email': !exists(json, 'email') ? undefined : json['email'],
        'normalizedEmail': !exists(json, 'normalizedEmail') ? undefined : json['normalizedEmail'],
        'emailConfirmed': !exists(json, 'emailConfirmed') ? undefined : json['emailConfirmed'],
        'passwordHash': !exists(json, 'passwordHash') ? undefined : json['passwordHash'],
        'securityStamp': !exists(json, 'securityStamp') ? undefined : json['securityStamp'],
        'concurrencyStamp': !exists(json, 'concurrencyStamp') ? undefined : json['concurrencyStamp'],
        'phoneNumber': !exists(json, 'phoneNumber') ? undefined : json['phoneNumber'],
        'phoneNumberConfirmed': !exists(json, 'phoneNumberConfirmed') ? undefined : json['phoneNumberConfirmed'],
        'twoFactorEnabled': !exists(json, 'twoFactorEnabled') ? undefined : json['twoFactorEnabled'],
        'lockoutEnd': !exists(json, 'lockoutEnd') ? undefined : (json['lockoutEnd'] === null ? null : new Date(json['lockoutEnd'])),
        'lockoutEnabled': !exists(json, 'lockoutEnabled') ? undefined : json['lockoutEnabled'],
        'accessFailedCount': !exists(json, 'accessFailedCount') ? undefined : json['accessFailedCount'],
        'title': !exists(json, 'title') ? undefined : json['title'],
        'bio': !exists(json, 'bio') ? undefined : json['bio'],
        'links': !exists(json, 'links') ? undefined : json['links'],
        'avatar': !exists(json, 'avatar') ? undefined : json['avatar'],
        'avatarId': !exists(json, 'avatarId') ? undefined : json['avatarId'],
        'registrationDate': !exists(json, 'registrationDate') ? undefined : (new Date(json['registrationDate'])),
        'lastActive': !exists(json, 'lastActive') ? undefined : (new Date(json['lastActive'])),
        'deletedAt': !exists(json, 'deletedAt') ? undefined : (json['deletedAt'] === null ? null : new Date(json['deletedAt'])),
        'commentsThread': !exists(json, 'commentsThread') ? undefined : CommentsThreadFromJSON(json['commentsThread']),
        'userRoles': !exists(json, 'userRoles') ? undefined : (json['userRoles'] === null ? null : (json['userRoles'] as Array<any>).map(UserRoleFromJSON)),
        'stories': !exists(json, 'stories') ? undefined : ((json['stories'] as Array<any>).map(StoryFromJSON)),
        'blogposts': !exists(json, 'blogposts') ? undefined : ((json['blogposts'] as Array<any>).map(BlogpostFromJSON)),
        'roles': !exists(json, 'roles') ? undefined : ((json['roles'] as Array<any>).map(OgmaRoleFromJSON)),
        'blacklistedRatings': !exists(json, 'blacklistedRatings') ? undefined : ((json['blacklistedRatings'] as Array<any>).map(BlacklistedRatingFromJSON)),
        'blacklistedTags': !exists(json, 'blacklistedTags') ? undefined : ((json['blacklistedTags'] as Array<any>).map(BlacklistedTagFromJSON)),
        'blockers': !exists(json, 'blockers') ? undefined : ((json['blockers'] as Array<any>).map(OgmaUserFromJSON)),
        'blocking': !exists(json, 'blocking') ? undefined : ((json['blocking'] as Array<any>).map(OgmaUserFromJSON)),
        'followers': !exists(json, 'followers') ? undefined : ((json['followers'] as Array<any>).map(OgmaUserFromJSON)),
        'following': !exists(json, 'following') ? undefined : ((json['following'] as Array<any>).map(OgmaUserFromJSON)),
        'subscribedThreads': !exists(json, 'subscribedThreads') ? undefined : ((json['subscribedThreads'] as Array<any>).map(CommentsThreadFromJSON)),
        'reports': !exists(json, 'reports') ? undefined : ((json['reports'] as Array<any>).map(ReportFromJSON)),
        'infractions': !exists(json, 'infractions') ? undefined : ((json['infractions'] as Array<any>).map(InfractionFromJSON)),
        'clubsBannedFrom': !exists(json, 'clubsBannedFrom') ? undefined : ((json['clubsBannedFrom'] as Array<any>).map(ClubFromJSON)),
        'notifications': !exists(json, 'notifications') ? undefined : ((json['notifications'] as Array<any>).map(NotificationFromJSON)),
    };
}

export function OgmaUserToJSON(value?: OgmaUser | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'userName': value.userName,
        'normalizedUserName': value.normalizedUserName,
        'email': value.email,
        'normalizedEmail': value.normalizedEmail,
        'emailConfirmed': value.emailConfirmed,
        'passwordHash': value.passwordHash,
        'securityStamp': value.securityStamp,
        'concurrencyStamp': value.concurrencyStamp,
        'phoneNumber': value.phoneNumber,
        'phoneNumberConfirmed': value.phoneNumberConfirmed,
        'twoFactorEnabled': value.twoFactorEnabled,
        'lockoutEnd': value.lockoutEnd === undefined ? undefined : (value.lockoutEnd === null ? null : value.lockoutEnd.toISOString()),
        'lockoutEnabled': value.lockoutEnabled,
        'accessFailedCount': value.accessFailedCount,
        'title': value.title,
        'bio': value.bio,
        'links': value.links,
        'avatar': value.avatar,
        'avatarId': value.avatarId,
        'registrationDate': value.registrationDate === undefined ? undefined : (value.registrationDate.toISOString()),
        'lastActive': value.lastActive === undefined ? undefined : (value.lastActive.toISOString()),
        'deletedAt': value.deletedAt === undefined ? undefined : (value.deletedAt === null ? null : value.deletedAt.toISOString()),
        'commentsThread': CommentsThreadToJSON(value.commentsThread),
        'userRoles': value.userRoles === undefined ? undefined : (value.userRoles === null ? null : (value.userRoles as Array<any>).map(UserRoleToJSON)),
        'stories': value.stories === undefined ? undefined : ((value.stories as Array<any>).map(StoryToJSON)),
        'blogposts': value.blogposts === undefined ? undefined : ((value.blogposts as Array<any>).map(BlogpostToJSON)),
        'roles': value.roles === undefined ? undefined : ((value.roles as Array<any>).map(OgmaRoleToJSON)),
        'blacklistedRatings': value.blacklistedRatings === undefined ? undefined : ((value.blacklistedRatings as Array<any>).map(BlacklistedRatingToJSON)),
        'blacklistedTags': value.blacklistedTags === undefined ? undefined : ((value.blacklistedTags as Array<any>).map(BlacklistedTagToJSON)),
        'blockers': value.blockers === undefined ? undefined : ((value.blockers as Array<any>).map(OgmaUserToJSON)),
        'blocking': value.blocking === undefined ? undefined : ((value.blocking as Array<any>).map(OgmaUserToJSON)),
        'followers': value.followers === undefined ? undefined : ((value.followers as Array<any>).map(OgmaUserToJSON)),
        'following': value.following === undefined ? undefined : ((value.following as Array<any>).map(OgmaUserToJSON)),
        'subscribedThreads': value.subscribedThreads === undefined ? undefined : ((value.subscribedThreads as Array<any>).map(CommentsThreadToJSON)),
        'reports': value.reports === undefined ? undefined : ((value.reports as Array<any>).map(ReportToJSON)),
        'infractions': value.infractions === undefined ? undefined : ((value.infractions as Array<any>).map(InfractionToJSON)),
        'clubsBannedFrom': value.clubsBannedFrom === undefined ? undefined : ((value.clubsBannedFrom as Array<any>).map(ClubToJSON)),
        'notifications': value.notifications === undefined ? undefined : ((value.notifications as Array<any>).map(NotificationToJSON)),
    };
}

