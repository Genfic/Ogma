/* tslint:disable */
/* eslint-disable */
/**
 * My Title
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Blogpost,
    BlogpostFromJSON,
    BlogpostFromJSONTyped,
    BlogpostToJSON,
} from './Blogpost';
import {
    Chapter,
    ChapterFromJSON,
    ChapterFromJSONTyped,
    ChapterToJSON,
} from './Chapter';
import {
    ClubThread,
    ClubThreadFromJSON,
    ClubThreadFromJSONTyped,
    ClubThreadToJSON,
} from './ClubThread';
import {
    Comment,
    CommentFromJSON,
    CommentFromJSONTyped,
    CommentToJSON,
} from './Comment';
import {
    OgmaUser,
    OgmaUserFromJSON,
    OgmaUserFromJSONTyped,
    OgmaUserToJSON,
} from './OgmaUser';

/**
 * 
 * @export
 * @interface CommentsThreadAllOf
 */
export interface CommentsThreadAllOf {
    /**
     * 
     * @type {Array<Comment>}
     * @memberof CommentsThreadAllOf
     */
    comments?: Array<Comment>;
    /**
     * 
     * @type {number}
     * @memberof CommentsThreadAllOf
     */
    commentsCount?: number;
    /**
     * 
     * @type {Date}
     * @memberof CommentsThreadAllOf
     */
    lockDate?: Date | null;
    /**
     * 
     * @type {OgmaUser}
     * @memberof CommentsThreadAllOf
     */
    user?: OgmaUser | null;
    /**
     * 
     * @type {number}
     * @memberof CommentsThreadAllOf
     */
    userId?: number | null;
    /**
     * 
     * @type {Chapter}
     * @memberof CommentsThreadAllOf
     */
    chapter?: Chapter | null;
    /**
     * 
     * @type {number}
     * @memberof CommentsThreadAllOf
     */
    chapterId?: number | null;
    /**
     * 
     * @type {Blogpost}
     * @memberof CommentsThreadAllOf
     */
    blogpost?: Blogpost | null;
    /**
     * 
     * @type {number}
     * @memberof CommentsThreadAllOf
     */
    blogpostId?: number | null;
    /**
     * 
     * @type {ClubThread}
     * @memberof CommentsThreadAllOf
     */
    clubThread?: ClubThread | null;
    /**
     * 
     * @type {number}
     * @memberof CommentsThreadAllOf
     */
    clubThreadId?: number | null;
    /**
     * 
     * @type {Array<OgmaUser>}
     * @memberof CommentsThreadAllOf
     */
    subscribers?: Array<OgmaUser>;
}

export function CommentsThreadAllOfFromJSON(json: any): CommentsThreadAllOf {
    return CommentsThreadAllOfFromJSONTyped(json, false);
}

export function CommentsThreadAllOfFromJSONTyped(json: any, ignoreDiscriminator: boolean): CommentsThreadAllOf {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'comments': !exists(json, 'comments') ? undefined : ((json['comments'] as Array<any>).map(CommentFromJSON)),
        'commentsCount': !exists(json, 'commentsCount') ? undefined : json['commentsCount'],
        'lockDate': !exists(json, 'lockDate') ? undefined : (json['lockDate'] === null ? null : new Date(json['lockDate'])),
        'user': !exists(json, 'user') ? undefined : OgmaUserFromJSON(json['user']),
        'userId': !exists(json, 'userId') ? undefined : json['userId'],
        'chapter': !exists(json, 'chapter') ? undefined : ChapterFromJSON(json['chapter']),
        'chapterId': !exists(json, 'chapterId') ? undefined : json['chapterId'],
        'blogpost': !exists(json, 'blogpost') ? undefined : BlogpostFromJSON(json['blogpost']),
        'blogpostId': !exists(json, 'blogpostId') ? undefined : json['blogpostId'],
        'clubThread': !exists(json, 'clubThread') ? undefined : ClubThreadFromJSON(json['clubThread']),
        'clubThreadId': !exists(json, 'clubThreadId') ? undefined : json['clubThreadId'],
        'subscribers': !exists(json, 'subscribers') ? undefined : ((json['subscribers'] as Array<any>).map(OgmaUserFromJSON)),
    };
}

export function CommentsThreadAllOfToJSON(value?: CommentsThreadAllOf | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'comments': value.comments === undefined ? undefined : ((value.comments as Array<any>).map(CommentToJSON)),
        'commentsCount': value.commentsCount,
        'lockDate': value.lockDate === undefined ? undefined : (value.lockDate === null ? null : value.lockDate.toISOString()),
        'user': OgmaUserToJSON(value.user),
        'userId': value.userId,
        'chapter': ChapterToJSON(value.chapter),
        'chapterId': value.chapterId,
        'blogpost': BlogpostToJSON(value.blogpost),
        'blogpostId': value.blogpostId,
        'clubThread': ClubThreadToJSON(value.clubThread),
        'clubThreadId': value.clubThreadId,
        'subscribers': value.subscribers === undefined ? undefined : ((value.subscribers as Array<any>).map(OgmaUserToJSON)),
    };
}

