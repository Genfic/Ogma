/* tslint:disable */
/* eslint-disable */
/**
 * My Title
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Chapter,
    ChapterFromJSON,
    ChapterFromJSONTyped,
    ChapterToJSON,
} from './Chapter';
import {
    CommentsThread,
    CommentsThreadFromJSON,
    CommentsThreadFromJSONTyped,
    CommentsThreadToJSON,
} from './CommentsThread';
import {
    ContentBlock,
    ContentBlockFromJSON,
    ContentBlockFromJSONTyped,
    ContentBlockToJSON,
} from './ContentBlock';
import {
    OgmaUser,
    OgmaUserFromJSON,
    OgmaUserFromJSONTyped,
    OgmaUserToJSON,
} from './OgmaUser';
import {
    Report,
    ReportFromJSON,
    ReportFromJSONTyped,
    ReportToJSON,
} from './Report';
import {
    Story,
    StoryFromJSON,
    StoryFromJSONTyped,
    StoryToJSON,
} from './Story';

/**
 * 
 * @export
 * @interface BlogpostAllOf
 */
export interface BlogpostAllOf {
    /**
     * 
     * @type {string}
     * @memberof BlogpostAllOf
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof BlogpostAllOf
     */
    slug?: string;
    /**
     * 
     * @type {Date}
     * @memberof BlogpostAllOf
     */
    publicationDate?: Date | null;
    /**
     * 
     * @type {Date}
     * @memberof BlogpostAllOf
     */
    creationDate?: Date;
    /**
     * 
     * @type {OgmaUser}
     * @memberof BlogpostAllOf
     */
    author?: OgmaUser;
    /**
     * 
     * @type {number}
     * @memberof BlogpostAllOf
     */
    authorId?: number;
    /**
     * 
     * @type {string}
     * @memberof BlogpostAllOf
     */
    body?: string;
    /**
     * 
     * @type {CommentsThread}
     * @memberof BlogpostAllOf
     */
    commentsThread?: CommentsThread;
    /**
     * 
     * @type {number}
     * @memberof BlogpostAllOf
     */
    wordCount?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof BlogpostAllOf
     */
    hashtags?: Array<string>;
    /**
     * 
     * @type {Story}
     * @memberof BlogpostAllOf
     */
    attachedStory?: Story | null;
    /**
     * 
     * @type {number}
     * @memberof BlogpostAllOf
     */
    attachedStoryId?: number | null;
    /**
     * 
     * @type {Chapter}
     * @memberof BlogpostAllOf
     */
    attachedChapter?: Chapter | null;
    /**
     * 
     * @type {number}
     * @memberof BlogpostAllOf
     */
    attachedChapterId?: number | null;
    /**
     * 
     * @type {ContentBlock}
     * @memberof BlogpostAllOf
     */
    contentBlock?: ContentBlock | null;
    /**
     * 
     * @type {number}
     * @memberof BlogpostAllOf
     */
    contentBlockId?: number | null;
    /**
     * 
     * @type {Array<Report>}
     * @memberof BlogpostAllOf
     */
    reports?: Array<Report>;
}

export function BlogpostAllOfFromJSON(json: any): BlogpostAllOf {
    return BlogpostAllOfFromJSONTyped(json, false);
}

export function BlogpostAllOfFromJSONTyped(json: any, ignoreDiscriminator: boolean): BlogpostAllOf {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'title': !exists(json, 'title') ? undefined : json['title'],
        'slug': !exists(json, 'slug') ? undefined : json['slug'],
        'publicationDate': !exists(json, 'publicationDate') ? undefined : (json['publicationDate'] === null ? null : new Date(json['publicationDate'])),
        'creationDate': !exists(json, 'creationDate') ? undefined : (new Date(json['creationDate'])),
        'author': !exists(json, 'author') ? undefined : OgmaUserFromJSON(json['author']),
        'authorId': !exists(json, 'authorId') ? undefined : json['authorId'],
        'body': !exists(json, 'body') ? undefined : json['body'],
        'commentsThread': !exists(json, 'commentsThread') ? undefined : CommentsThreadFromJSON(json['commentsThread']),
        'wordCount': !exists(json, 'wordCount') ? undefined : json['wordCount'],
        'hashtags': !exists(json, 'hashtags') ? undefined : json['hashtags'],
        'attachedStory': !exists(json, 'attachedStory') ? undefined : StoryFromJSON(json['attachedStory']),
        'attachedStoryId': !exists(json, 'attachedStoryId') ? undefined : json['attachedStoryId'],
        'attachedChapter': !exists(json, 'attachedChapter') ? undefined : ChapterFromJSON(json['attachedChapter']),
        'attachedChapterId': !exists(json, 'attachedChapterId') ? undefined : json['attachedChapterId'],
        'contentBlock': !exists(json, 'contentBlock') ? undefined : ContentBlockFromJSON(json['contentBlock']),
        'contentBlockId': !exists(json, 'contentBlockId') ? undefined : json['contentBlockId'],
        'reports': !exists(json, 'reports') ? undefined : ((json['reports'] as Array<any>).map(ReportFromJSON)),
    };
}

export function BlogpostAllOfToJSON(value?: BlogpostAllOf | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'title': value.title,
        'slug': value.slug,
        'publicationDate': value.publicationDate === undefined ? undefined : (value.publicationDate === null ? null : value.publicationDate.toISOString()),
        'creationDate': value.creationDate === undefined ? undefined : (value.creationDate.toISOString()),
        'author': OgmaUserToJSON(value.author),
        'authorId': value.authorId,
        'body': value.body,
        'commentsThread': CommentsThreadToJSON(value.commentsThread),
        'wordCount': value.wordCount,
        'hashtags': value.hashtags,
        'attachedStory': StoryToJSON(value.attachedStory),
        'attachedStoryId': value.attachedStoryId,
        'attachedChapter': ChapterToJSON(value.attachedChapter),
        'attachedChapterId': value.attachedChapterId,
        'contentBlock': ContentBlockToJSON(value.contentBlock),
        'contentBlockId': value.contentBlockId,
        'reports': value.reports === undefined ? undefined : ((value.reports as Array<any>).map(ReportToJSON)),
    };
}

