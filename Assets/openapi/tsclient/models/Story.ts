/* tslint:disable */
/* eslint-disable */
/**
 * My Title
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    BaseModel,
    BaseModelFromJSON,
    BaseModelFromJSONTyped,
    BaseModelToJSON,
} from './BaseModel';
import {
    Chapter,
    ChapterFromJSON,
    ChapterFromJSONTyped,
    ChapterToJSON,
} from './Chapter';
import {
    ContentBlock,
    ContentBlockFromJSON,
    ContentBlockFromJSONTyped,
    ContentBlockToJSON,
} from './ContentBlock';
import {
    EStoryStatus,
    EStoryStatusFromJSON,
    EStoryStatusFromJSONTyped,
    EStoryStatusToJSON,
} from './EStoryStatus';
import {
    Folder,
    FolderFromJSON,
    FolderFromJSONTyped,
    FolderToJSON,
} from './Folder';
import {
    OgmaUser,
    OgmaUserFromJSON,
    OgmaUserFromJSONTyped,
    OgmaUserToJSON,
} from './OgmaUser';
import {
    Rating,
    RatingFromJSON,
    RatingFromJSONTyped,
    RatingToJSON,
} from './Rating';
import {
    Report,
    ReportFromJSON,
    ReportFromJSONTyped,
    ReportToJSON,
} from './Report';
import {
    Shelf,
    ShelfFromJSON,
    ShelfFromJSONTyped,
    ShelfToJSON,
} from './Shelf';
import {
    StoryAllOf,
    StoryAllOfFromJSON,
    StoryAllOfFromJSONTyped,
    StoryAllOfToJSON,
} from './StoryAllOf';
import {
    Tag,
    TagFromJSON,
    TagFromJSONTyped,
    TagToJSON,
} from './Tag';
import {
    Vote,
    VoteFromJSON,
    VoteFromJSONTyped,
    VoteToJSON,
} from './Vote';

/**
 * 
 * @export
 * @interface Story
 */
export interface Story {
    /**
     * 
     * @type {number}
     * @memberof Story
     */
    id: number;
    /**
     * 
     * @type {OgmaUser}
     * @memberof Story
     */
    author?: OgmaUser;
    /**
     * 
     * @type {number}
     * @memberof Story
     */
    authorId?: number;
    /**
     * 
     * @type {string}
     * @memberof Story
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof Story
     */
    slug?: string;
    /**
     * 
     * @type {string}
     * @memberof Story
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof Story
     */
    hook?: string;
    /**
     * 
     * @type {string}
     * @memberof Story
     */
    cover?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Story
     */
    coverId?: string | null;
    /**
     * 
     * @type {Date}
     * @memberof Story
     */
    creationDate?: Date;
    /**
     * 
     * @type {Date}
     * @memberof Story
     */
    publicationDate?: Date | null;
    /**
     * 
     * @type {Array<Chapter>}
     * @memberof Story
     */
    chapters?: Array<Chapter>;
    /**
     * 
     * @type {Array<Tag>}
     * @memberof Story
     */
    tags?: Array<Tag>;
    /**
     * 
     * @type {Array<Vote>}
     * @memberof Story
     */
    votes?: Array<Vote>;
    /**
     * 
     * @type {Rating}
     * @memberof Story
     */
    rating?: Rating;
    /**
     * 
     * @type {number}
     * @memberof Story
     */
    ratingId?: number;
    /**
     * 
     * @type {EStoryStatus}
     * @memberof Story
     */
    status?: EStoryStatus;
    /**
     * 
     * @type {number}
     * @memberof Story
     */
    wordCount?: number;
    /**
     * 
     * @type {number}
     * @memberof Story
     */
    chapterCount?: number;
    /**
     * 
     * @type {Array<Folder>}
     * @memberof Story
     */
    folders?: Array<Folder>;
    /**
     * 
     * @type {ContentBlock}
     * @memberof Story
     */
    contentBlock?: ContentBlock | null;
    /**
     * 
     * @type {number}
     * @memberof Story
     */
    contentBlockId?: number | null;
    /**
     * 
     * @type {Array<Report>}
     * @memberof Story
     */
    reports?: Array<Report>;
    /**
     * 
     * @type {Array<Shelf>}
     * @memberof Story
     */
    shelves?: Array<Shelf>;
}

export function StoryFromJSON(json: any): Story {
    return StoryFromJSONTyped(json, false);
}

export function StoryFromJSONTyped(json: any, ignoreDiscriminator: boolean): Story {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'author': !exists(json, 'author') ? undefined : OgmaUserFromJSON(json['author']),
        'authorId': !exists(json, 'authorId') ? undefined : json['authorId'],
        'title': !exists(json, 'title') ? undefined : json['title'],
        'slug': !exists(json, 'slug') ? undefined : json['slug'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'hook': !exists(json, 'hook') ? undefined : json['hook'],
        'cover': !exists(json, 'cover') ? undefined : json['cover'],
        'coverId': !exists(json, 'coverId') ? undefined : json['coverId'],
        'creationDate': !exists(json, 'creationDate') ? undefined : (new Date(json['creationDate'])),
        'publicationDate': !exists(json, 'publicationDate') ? undefined : (json['publicationDate'] === null ? null : new Date(json['publicationDate'])),
        'chapters': !exists(json, 'chapters') ? undefined : ((json['chapters'] as Array<any>).map(ChapterFromJSON)),
        'tags': !exists(json, 'tags') ? undefined : ((json['tags'] as Array<any>).map(TagFromJSON)),
        'votes': !exists(json, 'votes') ? undefined : ((json['votes'] as Array<any>).map(VoteFromJSON)),
        'rating': !exists(json, 'rating') ? undefined : RatingFromJSON(json['rating']),
        'ratingId': !exists(json, 'ratingId') ? undefined : json['ratingId'],
        'status': !exists(json, 'status') ? undefined : EStoryStatusFromJSON(json['status']),
        'wordCount': !exists(json, 'wordCount') ? undefined : json['wordCount'],
        'chapterCount': !exists(json, 'chapterCount') ? undefined : json['chapterCount'],
        'folders': !exists(json, 'folders') ? undefined : ((json['folders'] as Array<any>).map(FolderFromJSON)),
        'contentBlock': !exists(json, 'contentBlock') ? undefined : ContentBlockFromJSON(json['contentBlock']),
        'contentBlockId': !exists(json, 'contentBlockId') ? undefined : json['contentBlockId'],
        'reports': !exists(json, 'reports') ? undefined : ((json['reports'] as Array<any>).map(ReportFromJSON)),
        'shelves': !exists(json, 'shelves') ? undefined : ((json['shelves'] as Array<any>).map(ShelfFromJSON)),
    };
}

export function StoryToJSON(value?: Story | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'author': OgmaUserToJSON(value.author),
        'authorId': value.authorId,
        'title': value.title,
        'slug': value.slug,
        'description': value.description,
        'hook': value.hook,
        'cover': value.cover,
        'coverId': value.coverId,
        'creationDate': value.creationDate === undefined ? undefined : (value.creationDate.toISOString()),
        'publicationDate': value.publicationDate === undefined ? undefined : (value.publicationDate === null ? null : value.publicationDate.toISOString()),
        'chapters': value.chapters === undefined ? undefined : ((value.chapters as Array<any>).map(ChapterToJSON)),
        'tags': value.tags === undefined ? undefined : ((value.tags as Array<any>).map(TagToJSON)),
        'votes': value.votes === undefined ? undefined : ((value.votes as Array<any>).map(VoteToJSON)),
        'rating': RatingToJSON(value.rating),
        'ratingId': value.ratingId,
        'status': EStoryStatusToJSON(value.status),
        'wordCount': value.wordCount,
        'chapterCount': value.chapterCount,
        'folders': value.folders === undefined ? undefined : ((value.folders as Array<any>).map(FolderToJSON)),
        'contentBlock': ContentBlockToJSON(value.contentBlock),
        'contentBlockId': value.contentBlockId,
        'reports': value.reports === undefined ? undefined : ((value.reports as Array<any>).map(ReportToJSON)),
        'shelves': value.shelves === undefined ? undefined : ((value.shelves as Array<any>).map(ShelfToJSON)),
    };
}

