/* tslint:disable */
/* eslint-disable */
/**
 * My Title
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CreateInfractionCommand,
    CreateInfractionCommandFromJSON,
    CreateInfractionCommandToJSON,
    CreateInfractionResponse,
    CreateInfractionResponseFromJSON,
    CreateInfractionResponseToJSON,
    DeactivateInfractionResponse,
    DeactivateInfractionResponseFromJSON,
    DeactivateInfractionResponseToJSON,
    GetInfractionDetailsResult,
    GetInfractionDetailsResultFromJSON,
    GetInfractionDetailsResultToJSON,
    GetUserInfractionsResult,
    GetUserInfractionsResultFromJSON,
    GetUserInfractionsResultToJSON,
    ProblemDetails,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
} from '../models';

export interface InfractionsAddInfractionRequest {
    createInfractionCommand: CreateInfractionCommand;
}

export interface InfractionsDeactivateInfractionRequest {
    id: number;
}

export interface InfractionsGetInfractionDetailsRequest {
    id?: number;
}

export interface InfractionsGetInfractionsRequest {
    id?: number;
}

/**
 * 
 */
export class InfractionsApi extends runtime.BaseAPI {

    /**
     */
    async infractionsAddInfractionRaw(requestParameters: InfractionsAddInfractionRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CreateInfractionResponse>> {
        if (requestParameters.createInfractionCommand === null || requestParameters.createInfractionCommand === undefined) {
            throw new runtime.RequiredError('createInfractionCommand','Required parameter requestParameters.createInfractionCommand was null or undefined when calling infractionsAddInfraction.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/infractions`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateInfractionCommandToJSON(requestParameters.createInfractionCommand),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateInfractionResponseFromJSON(jsonValue));
    }

    /**
     */
    async infractionsAddInfraction(requestParameters: InfractionsAddInfractionRequest, initOverrides?: RequestInit): Promise<CreateInfractionResponse> {
        const response = await this.infractionsAddInfractionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async infractionsDeactivateInfractionRaw(requestParameters: InfractionsDeactivateInfractionRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<DeactivateInfractionResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling infractionsDeactivateInfraction.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/infractions/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeactivateInfractionResponseFromJSON(jsonValue));
    }

    /**
     */
    async infractionsDeactivateInfraction(requestParameters: InfractionsDeactivateInfractionRequest, initOverrides?: RequestInit): Promise<DeactivateInfractionResponse> {
        const response = await this.infractionsDeactivateInfractionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async infractionsGetInfractionDetailsRaw(requestParameters: InfractionsGetInfractionDetailsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<GetInfractionDetailsResult>> {
        const queryParameters: any = {};

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/infractions/details`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetInfractionDetailsResultFromJSON(jsonValue));
    }

    /**
     */
    async infractionsGetInfractionDetails(requestParameters: InfractionsGetInfractionDetailsRequest = {}, initOverrides?: RequestInit): Promise<GetInfractionDetailsResult> {
        const response = await this.infractionsGetInfractionDetailsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async infractionsGetInfractionsRaw(requestParameters: InfractionsGetInfractionsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<GetUserInfractionsResult>>> {
        const queryParameters: any = {};

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/infractions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetUserInfractionsResultFromJSON));
    }

    /**
     */
    async infractionsGetInfractions(requestParameters: InfractionsGetInfractionsRequest = {}, initOverrides?: RequestInit): Promise<Array<GetUserInfractionsResult>> {
        const response = await this.infractionsGetInfractionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
