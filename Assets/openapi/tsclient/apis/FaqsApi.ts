/* tslint:disable */
/* eslint-disable */
/**
 * My Title
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CreateFaqCommand,
    CreateFaqCommandFromJSON,
    CreateFaqCommandToJSON,
    Faq,
    FaqFromJSON,
    FaqToJSON,
    ProblemDetails,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
    UpdateFaqCommand,
    UpdateFaqCommandFromJSON,
    UpdateFaqCommandToJSON,
} from '../models';

export interface FaqsDeleteFaqRequest {
    id: number;
}

export interface FaqsGetFaqRequest {
    id: number;
}

export interface FaqsPostFaqRequest {
    createFaqCommand: CreateFaqCommand;
}

export interface FaqsPutFaqRequest {
    updateFaqCommand: UpdateFaqCommand;
}

/**
 * 
 */
export class FaqsApi extends runtime.BaseAPI {

    /**
     */
    async faqsDeleteFaqRaw(requestParameters: FaqsDeleteFaqRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<number>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling faqsDeleteFaq.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/faqs/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async faqsDeleteFaq(requestParameters: FaqsDeleteFaqRequest, initOverrides?: RequestInit): Promise<number> {
        const response = await this.faqsDeleteFaqRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async faqsGetFaqRaw(requestParameters: FaqsGetFaqRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Faq>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling faqsGetFaq.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/faqs/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FaqFromJSON(jsonValue));
    }

    /**
     */
    async faqsGetFaq(requestParameters: FaqsGetFaqRequest, initOverrides?: RequestInit): Promise<Faq> {
        const response = await this.faqsGetFaqRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async faqsGetFaqsRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<Faq>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/faqs`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(FaqFromJSON));
    }

    /**
     */
    async faqsGetFaqs(initOverrides?: RequestInit): Promise<Array<Faq>> {
        const response = await this.faqsGetFaqsRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async faqsPostFaqRaw(requestParameters: FaqsPostFaqRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Faq>> {
        if (requestParameters.createFaqCommand === null || requestParameters.createFaqCommand === undefined) {
            throw new runtime.RequiredError('createFaqCommand','Required parameter requestParameters.createFaqCommand was null or undefined when calling faqsPostFaq.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/faqs`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateFaqCommandToJSON(requestParameters.createFaqCommand),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FaqFromJSON(jsonValue));
    }

    /**
     */
    async faqsPostFaq(requestParameters: FaqsPostFaqRequest, initOverrides?: RequestInit): Promise<Faq> {
        const response = await this.faqsPostFaqRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async faqsPutFaqRaw(requestParameters: FaqsPutFaqRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.updateFaqCommand === null || requestParameters.updateFaqCommand === undefined) {
            throw new runtime.RequiredError('updateFaqCommand','Required parameter requestParameters.updateFaqCommand was null or undefined when calling faqsPutFaq.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/faqs`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateFaqCommandToJSON(requestParameters.updateFaqCommand),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async faqsPutFaq(requestParameters: FaqsPutFaqRequest, initOverrides?: RequestInit): Promise<void> {
        await this.faqsPutFaqRaw(requestParameters, initOverrides);
    }

}
