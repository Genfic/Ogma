/* tslint:disable */
/* eslint-disable */
/**
 * My Title
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CommentsThreadControllerPermissionsResult,
    CommentsThreadControllerPermissionsResultFromJSON,
    CommentsThreadControllerPermissionsResultToJSON,
    CommentsThreadControllerPostData,
    CommentsThreadControllerPostDataFromJSON,
    CommentsThreadControllerPostDataToJSON,
    ProblemDetails,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
} from '../models';

export interface CommentsThreadGetLockStatusRequest {
    id: number;
}

export interface CommentsThreadGetPermissionsRequest {
    id: number;
}

export interface CommentsThreadLockThreadRequest {
    commentsThreadControllerPostData: CommentsThreadControllerPostData;
}

/**
 * 
 */
export class CommentsThreadApi extends runtime.BaseAPI {

    /**
     */
    async commentsThreadGetLockStatusRaw(requestParameters: CommentsThreadGetLockStatusRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling commentsThreadGetLockStatus.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/commentsthread/lock/status/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async commentsThreadGetLockStatus(requestParameters: CommentsThreadGetLockStatusRequest, initOverrides?: RequestInit): Promise<boolean> {
        const response = await this.commentsThreadGetLockStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async commentsThreadGetPermissionsRaw(requestParameters: CommentsThreadGetPermissionsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CommentsThreadControllerPermissionsResult>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling commentsThreadGetPermissions.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/commentsthread/permissions/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CommentsThreadControllerPermissionsResultFromJSON(jsonValue));
    }

    /**
     */
    async commentsThreadGetPermissions(requestParameters: CommentsThreadGetPermissionsRequest, initOverrides?: RequestInit): Promise<CommentsThreadControllerPermissionsResult> {
        const response = await this.commentsThreadGetPermissionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async commentsThreadLockThreadRaw(requestParameters: CommentsThreadLockThreadRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters.commentsThreadControllerPostData === null || requestParameters.commentsThreadControllerPostData === undefined) {
            throw new runtime.RequiredError('commentsThreadControllerPostData','Required parameter requestParameters.commentsThreadControllerPostData was null or undefined when calling commentsThreadLockThread.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/commentsthread/lock`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CommentsThreadControllerPostDataToJSON(requestParameters.commentsThreadControllerPostData),
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async commentsThreadLockThread(requestParameters: CommentsThreadLockThreadRequest, initOverrides?: RequestInit): Promise<boolean> {
        const response = await this.commentsThreadLockThreadRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
