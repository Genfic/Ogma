/* tslint:disable */
/* eslint-disable */
/**
 * My Title
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    BanUserCommand,
    BanUserCommandFromJSON,
    BanUserCommandToJSON,
    GetClubsWithStoryResult,
    GetClubsWithStoryResultFromJSON,
    GetClubsWithStoryResultToJSON,
    GetJoinedClubsResponse,
    GetJoinedClubsResponseFromJSON,
    GetJoinedClubsResponseToJSON,
    UnbanUserCommand,
    UnbanUserCommandFromJSON,
    UnbanUserCommandToJSON,
} from '../models';

export interface ClubsBanUserRequest {
    banUserCommand: BanUserCommand;
}

export interface ClubsGetClubsWithStoryRequest {
    id: number;
}

export interface ClubsUnbanUserRequest {
    unbanUserCommand: UnbanUserCommand;
}

/**
 * 
 */
export class ClubsApi extends runtime.BaseAPI {

    /**
     */
    async clubsBanUserRaw(requestParameters: ClubsBanUserRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters.banUserCommand === null || requestParameters.banUserCommand === undefined) {
            throw new runtime.RequiredError('banUserCommand','Required parameter requestParameters.banUserCommand was null or undefined when calling clubsBanUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/clubs/user/ban`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BanUserCommandToJSON(requestParameters.banUserCommand),
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async clubsBanUser(requestParameters: ClubsBanUserRequest, initOverrides?: RequestInit): Promise<boolean> {
        const response = await this.clubsBanUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async clubsGetClubsWithStoryRaw(requestParameters: ClubsGetClubsWithStoryRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<GetClubsWithStoryResult>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling clubsGetClubsWithStory.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/clubs/story/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetClubsWithStoryResultFromJSON));
    }

    /**
     */
    async clubsGetClubsWithStory(requestParameters: ClubsGetClubsWithStoryRequest, initOverrides?: RequestInit): Promise<Array<GetClubsWithStoryResult>> {
        const response = await this.clubsGetClubsWithStoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async clubsGetUserClubsRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<GetJoinedClubsResponse>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/clubs/user`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetJoinedClubsResponseFromJSON));
    }

    /**
     */
    async clubsGetUserClubs(initOverrides?: RequestInit): Promise<Array<GetJoinedClubsResponse>> {
        const response = await this.clubsGetUserClubsRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async clubsUnbanUserRaw(requestParameters: ClubsUnbanUserRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters.unbanUserCommand === null || requestParameters.unbanUserCommand === undefined) {
            throw new runtime.RequiredError('unbanUserCommand','Required parameter requestParameters.unbanUserCommand was null or undefined when calling clubsUnbanUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/clubs/user/ban`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: UnbanUserCommandToJSON(requestParameters.unbanUserCommand),
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async clubsUnbanUser(requestParameters: ClubsUnbanUserRequest, initOverrides?: RequestInit): Promise<boolean> {
        const response = await this.clubsUnbanUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
