/* tslint:disable */
/* eslint-disable */
/**
 * My Title
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    BlockUserCommand,
    BlockUserCommandFromJSON,
    BlockUserCommandToJSON,
    FollowUserCommand,
    FollowUserCommandFromJSON,
    FollowUserCommandToJSON,
    ProblemDetails,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
    UnblockUserCommand,
    UnblockUserCommandFromJSON,
    UnblockUserCommandToJSON,
    UnfollowUserCommand,
    UnfollowUserCommandFromJSON,
    UnfollowUserCommandToJSON,
    UpdateRolesCommand,
    UpdateRolesCommandFromJSON,
    UpdateRolesCommandToJSON,
} from '../models';

export interface UsersBlockUserRequest {
    blockUserCommand: BlockUserCommand;
}

export interface UsersFindNamesRequest {
    name?: string | null;
}

export interface UsersFollowUserRequest {
    followUserCommand: FollowUserCommand;
}

export interface UsersManageRolesRequest {
    updateRolesCommand: UpdateRolesCommand;
}

export interface UsersUnblockUserRequest {
    unblockUserCommand: UnblockUserCommand;
}

export interface UsersUnfollowUserRequest {
    unfollowUserCommand: UnfollowUserCommand;
}

/**
 * 
 */
export class UsersApi extends runtime.BaseAPI {

    /**
     */
    async usersBlockUserRaw(requestParameters: UsersBlockUserRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters.blockUserCommand === null || requestParameters.blockUserCommand === undefined) {
            throw new runtime.RequiredError('blockUserCommand','Required parameter requestParameters.blockUserCommand was null or undefined when calling usersBlockUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/users/block`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BlockUserCommandToJSON(requestParameters.blockUserCommand),
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async usersBlockUser(requestParameters: UsersBlockUserRequest, initOverrides?: RequestInit): Promise<boolean> {
        const response = await this.usersBlockUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async usersFindNamesRaw(requestParameters: UsersFindNamesRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<string>>> {
        const queryParameters: any = {};

        if (requestParameters.name !== undefined) {
            queryParameters['Name'] = requestParameters.name;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/users/names`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async usersFindNames(requestParameters: UsersFindNamesRequest = {}, initOverrides?: RequestInit): Promise<Array<string>> {
        const response = await this.usersFindNamesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async usersFollowUserRaw(requestParameters: UsersFollowUserRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters.followUserCommand === null || requestParameters.followUserCommand === undefined) {
            throw new runtime.RequiredError('followUserCommand','Required parameter requestParameters.followUserCommand was null or undefined when calling usersFollowUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/users/follow`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FollowUserCommandToJSON(requestParameters.followUserCommand),
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async usersFollowUser(requestParameters: UsersFollowUserRequest, initOverrides?: RequestInit): Promise<boolean> {
        const response = await this.usersFollowUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async usersManageRolesRaw(requestParameters: UsersManageRolesRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.updateRolesCommand === null || requestParameters.updateRolesCommand === undefined) {
            throw new runtime.RequiredError('updateRolesCommand','Required parameter requestParameters.updateRolesCommand was null or undefined when calling usersManageRoles.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/users/roles`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateRolesCommandToJSON(requestParameters.updateRolesCommand),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async usersManageRoles(requestParameters: UsersManageRolesRequest, initOverrides?: RequestInit): Promise<void> {
        await this.usersManageRolesRaw(requestParameters, initOverrides);
    }

    /**
     */
    async usersUnblockUserRaw(requestParameters: UsersUnblockUserRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters.unblockUserCommand === null || requestParameters.unblockUserCommand === undefined) {
            throw new runtime.RequiredError('unblockUserCommand','Required parameter requestParameters.unblockUserCommand was null or undefined when calling usersUnblockUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/users/block`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: UnblockUserCommandToJSON(requestParameters.unblockUserCommand),
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async usersUnblockUser(requestParameters: UsersUnblockUserRequest, initOverrides?: RequestInit): Promise<boolean> {
        const response = await this.usersUnblockUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async usersUnfollowUserRaw(requestParameters: UsersUnfollowUserRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters.unfollowUserCommand === null || requestParameters.unfollowUserCommand === undefined) {
            throw new runtime.RequiredError('unfollowUserCommand','Required parameter requestParameters.unfollowUserCommand was null or undefined when calling usersUnfollowUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/users/follow`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: UnfollowUserCommandToJSON(requestParameters.unfollowUserCommand),
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async usersUnfollowUser(requestParameters: UsersUnfollowUserRequest, initOverrides?: RequestInit): Promise<boolean> {
        const response = await this.usersUnfollowUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
