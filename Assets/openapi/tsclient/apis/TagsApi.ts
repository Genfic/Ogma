/* tslint:disable */
/* eslint-disable */
/**
 * My Title
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CreateTagCommand,
    CreateTagCommandFromJSON,
    CreateTagCommandToJSON,
    ProblemDetails,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
    TagDto,
    TagDtoFromJSON,
    TagDtoToJSON,
    UpdateTagCommand,
    UpdateTagCommandFromJSON,
    UpdateTagCommandToJSON,
} from '../models';

export interface TagsDeleteTagRequest {
    id: number;
}

export interface TagsGetStoryTagsRequest {
    id: number;
}

export interface TagsGetTagRequest {
    id: number;
}

export interface TagsGetTagsRequest {
    page?: number;
    perPage?: number;
}

export interface TagsPostTagRequest {
    createTagCommand: CreateTagCommand;
}

export interface TagsPutTagRequest {
    updateTagCommand: UpdateTagCommand;
}

export interface TagsSearchRequest {
    name?: string | null;
}

/**
 * 
 */
export class TagsApi extends runtime.BaseAPI {

    /**
     */
    async tagsDeleteTagRaw(requestParameters: TagsDeleteTagRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<number>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling tagsDeleteTag.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/tags/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async tagsDeleteTag(requestParameters: TagsDeleteTagRequest, initOverrides?: RequestInit): Promise<number> {
        const response = await this.tagsDeleteTagRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async tagsGetAllRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<TagDto>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/tags/all`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TagDtoFromJSON));
    }

    /**
     */
    async tagsGetAll(initOverrides?: RequestInit): Promise<Array<TagDto>> {
        const response = await this.tagsGetAllRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async tagsGetStoryTagsRaw(requestParameters: TagsGetStoryTagsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<TagDto>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling tagsGetStoryTags.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/tags/story/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TagDtoFromJSON));
    }

    /**
     */
    async tagsGetStoryTags(requestParameters: TagsGetStoryTagsRequest, initOverrides?: RequestInit): Promise<Array<TagDto>> {
        const response = await this.tagsGetStoryTagsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async tagsGetTagRaw(requestParameters: TagsGetTagRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<TagDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling tagsGetTag.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/tags/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TagDtoFromJSON(jsonValue));
    }

    /**
     */
    async tagsGetTag(requestParameters: TagsGetTagRequest, initOverrides?: RequestInit): Promise<TagDto> {
        const response = await this.tagsGetTagRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async tagsGetTagsRaw(requestParameters: TagsGetTagsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<TagDto>>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['Page'] = requestParameters.page;
        }

        if (requestParameters.perPage !== undefined) {
            queryParameters['PerPage'] = requestParameters.perPage;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/tags`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TagDtoFromJSON));
    }

    /**
     */
    async tagsGetTags(requestParameters: TagsGetTagsRequest = {}, initOverrides?: RequestInit): Promise<Array<TagDto>> {
        const response = await this.tagsGetTagsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async tagsPostTagRaw(requestParameters: TagsPostTagRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.createTagCommand === null || requestParameters.createTagCommand === undefined) {
            throw new runtime.RequiredError('createTagCommand','Required parameter requestParameters.createTagCommand was null or undefined when calling tagsPostTag.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/tags`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateTagCommandToJSON(requestParameters.createTagCommand),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async tagsPostTag(requestParameters: TagsPostTagRequest, initOverrides?: RequestInit): Promise<void> {
        await this.tagsPostTagRaw(requestParameters, initOverrides);
    }

    /**
     */
    async tagsPutTagRaw(requestParameters: TagsPutTagRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.updateTagCommand === null || requestParameters.updateTagCommand === undefined) {
            throw new runtime.RequiredError('updateTagCommand','Required parameter requestParameters.updateTagCommand was null or undefined when calling tagsPutTag.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/tags`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateTagCommandToJSON(requestParameters.updateTagCommand),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async tagsPutTag(requestParameters: TagsPutTagRequest, initOverrides?: RequestInit): Promise<void> {
        await this.tagsPutTagRaw(requestParameters, initOverrides);
    }

    /**
     */
    async tagsSearchRaw(requestParameters: TagsSearchRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<TagDto>>> {
        const queryParameters: any = {};

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/tags/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TagDtoFromJSON));
    }

    /**
     */
    async tagsSearch(requestParameters: TagsSearchRequest = {}, initOverrides?: RequestInit): Promise<Array<TagDto>> {
        const response = await this.tagsSearchRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
