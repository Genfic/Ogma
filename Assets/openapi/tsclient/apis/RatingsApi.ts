/* tslint:disable */
/* eslint-disable */
/**
 * My Title
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ProblemDetails,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
    RatingApiDto,
    RatingApiDtoFromJSON,
    RatingApiDtoToJSON,
} from '../models';

export interface RatingsDeleteRatingRequest {
    id: number;
}

export interface RatingsGetRatingRequest {
    id: number;
}

export interface RatingsPostRatingRequest {
    name?: string | null;
    description?: string | null;
    blacklistedByDefault?: boolean;
    order?: number;
    icon?: Blob | null;
}

export interface RatingsPutRatingRequest {
    id?: number;
    name?: string | null;
    description?: string | null;
    blacklistedByDefault?: boolean;
    order?: number;
    icon?: Blob | null;
}

/**
 * 
 */
export class RatingsApi extends runtime.BaseAPI {

    /**
     */
    async ratingsDeleteRatingRaw(requestParameters: RatingsDeleteRatingRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<number>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling ratingsDeleteRating.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/ratings/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async ratingsDeleteRating(requestParameters: RatingsDeleteRatingRequest, initOverrides?: RequestInit): Promise<number> {
        const response = await this.ratingsDeleteRatingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async ratingsGetRatingRaw(requestParameters: RatingsGetRatingRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RatingApiDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling ratingsGetRating.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/ratings/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RatingApiDtoFromJSON(jsonValue));
    }

    /**
     */
    async ratingsGetRating(requestParameters: RatingsGetRatingRequest, initOverrides?: RequestInit): Promise<RatingApiDto> {
        const response = await this.ratingsGetRatingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async ratingsGetRatingsRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<RatingApiDto>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/ratings`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RatingApiDtoFromJSON));
    }

    /**
     */
    async ratingsGetRatings(initOverrides?: RequestInit): Promise<Array<RatingApiDto>> {
        const response = await this.ratingsGetRatingsRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async ratingsPostRatingRaw(requestParameters: RatingsPostRatingRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RatingApiDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.name !== undefined) {
            formParams.append('Name', requestParameters.name as any);
        }

        if (requestParameters.description !== undefined) {
            formParams.append('Description', requestParameters.description as any);
        }

        if (requestParameters.blacklistedByDefault !== undefined) {
            formParams.append('BlacklistedByDefault', requestParameters.blacklistedByDefault as any);
        }

        if (requestParameters.order !== undefined) {
            formParams.append('Order', requestParameters.order as any);
        }

        if (requestParameters.icon !== undefined) {
            formParams.append('Icon', requestParameters.icon as any);
        }

        const response = await this.request({
            path: `/api/ratings`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RatingApiDtoFromJSON(jsonValue));
    }

    /**
     */
    async ratingsPostRating(requestParameters: RatingsPostRatingRequest = {}, initOverrides?: RequestInit): Promise<RatingApiDto> {
        const response = await this.ratingsPostRatingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async ratingsPutRatingRaw(requestParameters: RatingsPutRatingRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RatingApiDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.id !== undefined) {
            formParams.append('Id', requestParameters.id as any);
        }

        if (requestParameters.name !== undefined) {
            formParams.append('Name', requestParameters.name as any);
        }

        if (requestParameters.description !== undefined) {
            formParams.append('Description', requestParameters.description as any);
        }

        if (requestParameters.blacklistedByDefault !== undefined) {
            formParams.append('BlacklistedByDefault', requestParameters.blacklistedByDefault as any);
        }

        if (requestParameters.order !== undefined) {
            formParams.append('Order', requestParameters.order as any);
        }

        if (requestParameters.icon !== undefined) {
            formParams.append('Icon', requestParameters.icon as any);
        }

        const response = await this.request({
            path: `/api/ratings`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RatingApiDtoFromJSON(jsonValue));
    }

    /**
     */
    async ratingsPutRating(requestParameters: RatingsPutRatingRequest = {}, initOverrides?: RequestInit): Promise<RatingApiDto> {
        const response = await this.ratingsPutRatingRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
