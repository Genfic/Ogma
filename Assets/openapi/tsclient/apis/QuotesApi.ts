/* tslint:disable */
/* eslint-disable */
/**
 * My Title
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CreateQuoteCommand,
    CreateQuoteCommandFromJSON,
    CreateQuoteCommandToJSON,
    CreateQuotesFromJsonResponse,
    CreateQuotesFromJsonResponseFromJSON,
    CreateQuotesFromJsonResponseToJSON,
    DeleteQuoteCommand,
    DeleteQuoteCommandFromJSON,
    DeleteQuoteCommandToJSON,
    Quote,
    QuoteFromJSON,
    QuoteToJSON,
    QuoteDto,
    QuoteDtoFromJSON,
    QuoteDtoToJSON,
    UpdateQuoteCommand,
    UpdateQuoteCommandFromJSON,
    UpdateQuoteCommandToJSON,
} from '../models';

export interface QuotesDeleteQuoteRequest {
    deleteQuoteCommand: DeleteQuoteCommand;
}

export interface QuotesGetQuoteRequest {
    id: number;
}

export interface QuotesPostQuoteRequest {
    createQuoteCommand: CreateQuoteCommand;
}

export interface QuotesPutQuoteRequest {
    updateQuoteCommand: UpdateQuoteCommand;
}

/**
 * 
 */
export class QuotesApi extends runtime.BaseAPI {

    /**
     */
    async quotesDeleteQuoteRaw(requestParameters: QuotesDeleteQuoteRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Quote>> {
        if (requestParameters.deleteQuoteCommand === null || requestParameters.deleteQuoteCommand === undefined) {
            throw new runtime.RequiredError('deleteQuoteCommand','Required parameter requestParameters.deleteQuoteCommand was null or undefined when calling quotesDeleteQuote.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/quotes`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: DeleteQuoteCommandToJSON(requestParameters.deleteQuoteCommand),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QuoteFromJSON(jsonValue));
    }

    /**
     */
    async quotesDeleteQuote(requestParameters: QuotesDeleteQuoteRequest, initOverrides?: RequestInit): Promise<Quote> {
        const response = await this.quotesDeleteQuoteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async quotesGetQuoteRaw(requestParameters: QuotesGetQuoteRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<QuoteDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling quotesGetQuote.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/quotes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QuoteDtoFromJSON(jsonValue));
    }

    /**
     */
    async quotesGetQuote(requestParameters: QuotesGetQuoteRequest, initOverrides?: RequestInit): Promise<QuoteDto> {
        const response = await this.quotesGetQuoteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async quotesGetQuotesRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<Quote>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/quotes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(QuoteFromJSON));
    }

    /**
     */
    async quotesGetQuotes(initOverrides?: RequestInit): Promise<Array<Quote>> {
        const response = await this.quotesGetQuotesRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async quotesGetRandomQuoteRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<QuoteDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/quotes/random`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QuoteDtoFromJSON(jsonValue));
    }

    /**
     */
    async quotesGetRandomQuote(initOverrides?: RequestInit): Promise<QuoteDto> {
        const response = await this.quotesGetRandomQuoteRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async quotesPostJsonRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<CreateQuotesFromJsonResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/quotes/json`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateQuotesFromJsonResponseFromJSON(jsonValue));
    }

    /**
     */
    async quotesPostJson(initOverrides?: RequestInit): Promise<CreateQuotesFromJsonResponse> {
        const response = await this.quotesPostJsonRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async quotesPostQuoteRaw(requestParameters: QuotesPostQuoteRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Quote>> {
        if (requestParameters.createQuoteCommand === null || requestParameters.createQuoteCommand === undefined) {
            throw new runtime.RequiredError('createQuoteCommand','Required parameter requestParameters.createQuoteCommand was null or undefined when calling quotesPostQuote.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/quotes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateQuoteCommandToJSON(requestParameters.createQuoteCommand),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QuoteFromJSON(jsonValue));
    }

    /**
     */
    async quotesPostQuote(requestParameters: QuotesPostQuoteRequest, initOverrides?: RequestInit): Promise<Quote> {
        const response = await this.quotesPostQuoteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async quotesPutQuoteRaw(requestParameters: QuotesPutQuoteRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Quote>> {
        if (requestParameters.updateQuoteCommand === null || requestParameters.updateQuoteCommand === undefined) {
            throw new runtime.RequiredError('updateQuoteCommand','Required parameter requestParameters.updateQuoteCommand was null or undefined when calling quotesPutQuote.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/quotes`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateQuoteCommandToJSON(requestParameters.updateQuoteCommand),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QuoteFromJSON(jsonValue));
    }

    /**
     */
    async quotesPutQuote(requestParameters: QuotesPutQuoteRequest, initOverrides?: RequestInit): Promise<Quote> {
        const response = await this.quotesPutQuoteRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
