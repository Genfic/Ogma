/* tslint:disable */
/* eslint-disable */
/**
 * My Title
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CreateShelfCommand,
    CreateShelfCommandFromJSON,
    CreateShelfCommandToJSON,
    ShelfDto,
    ShelfDtoFromJSON,
    ShelfDtoToJSON,
    UpdateShelfCommand,
    UpdateShelfCommandFromJSON,
    UpdateShelfCommandToJSON,
} from '../models';

export interface ShelvesDeleteShelfRequest {
    id: number;
}

export interface ShelvesGetShelfRequest {
    id: number;
}

export interface ShelvesGetUserShelvesRequest {
    name: string | null;
    page?: number;
}

export interface ShelvesPostShelfRequest {
    createShelfCommand: CreateShelfCommand;
}

export interface ShelvesPutShelfRequest {
    updateShelfCommand: UpdateShelfCommand;
}

/**
 * 
 */
export class ShelvesApi extends runtime.BaseAPI {

    /**
     */
    async shelvesDeleteShelfRaw(requestParameters: ShelvesDeleteShelfRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<number>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling shelvesDeleteShelf.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/shelves/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async shelvesDeleteShelf(requestParameters: ShelvesDeleteShelfRequest, initOverrides?: RequestInit): Promise<number> {
        const response = await this.shelvesDeleteShelfRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async shelvesGetShelfRaw(requestParameters: ShelvesGetShelfRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ShelfDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling shelvesGetShelf.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/shelves/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ShelfDtoFromJSON(jsonValue));
    }

    /**
     */
    async shelvesGetShelf(requestParameters: ShelvesGetShelfRequest, initOverrides?: RequestInit): Promise<ShelfDto> {
        const response = await this.shelvesGetShelfRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async shelvesGetUserShelvesRaw(requestParameters: ShelvesGetUserShelvesRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<ShelfDto>>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling shelvesGetUserShelves.');
        }

        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/shelves/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ShelfDtoFromJSON));
    }

    /**
     */
    async shelvesGetUserShelves(requestParameters: ShelvesGetUserShelvesRequest, initOverrides?: RequestInit): Promise<Array<ShelfDto>> {
        const response = await this.shelvesGetUserShelvesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async shelvesPostShelfRaw(requestParameters: ShelvesPostShelfRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ShelfDto>> {
        if (requestParameters.createShelfCommand === null || requestParameters.createShelfCommand === undefined) {
            throw new runtime.RequiredError('createShelfCommand','Required parameter requestParameters.createShelfCommand was null or undefined when calling shelvesPostShelf.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/shelves`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateShelfCommandToJSON(requestParameters.createShelfCommand),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ShelfDtoFromJSON(jsonValue));
    }

    /**
     */
    async shelvesPostShelf(requestParameters: ShelvesPostShelfRequest, initOverrides?: RequestInit): Promise<ShelfDto> {
        const response = await this.shelvesPostShelfRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async shelvesPutShelfRaw(requestParameters: ShelvesPutShelfRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ShelfDto>> {
        if (requestParameters.updateShelfCommand === null || requestParameters.updateShelfCommand === undefined) {
            throw new runtime.RequiredError('updateShelfCommand','Required parameter requestParameters.updateShelfCommand was null or undefined when calling shelvesPutShelf.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/shelves`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateShelfCommandToJSON(requestParameters.updateShelfCommand),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ShelfDtoFromJSON(jsonValue));
    }

    /**
     */
    async shelvesPutShelf(requestParameters: ShelvesPutShelfRequest, initOverrides?: RequestInit): Promise<ShelfDto> {
        const response = await this.shelvesPutShelfRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
