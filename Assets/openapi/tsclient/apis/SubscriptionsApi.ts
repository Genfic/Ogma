/* tslint:disable */
/* eslint-disable */
/**
 * My Title
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    SubscribeCommentsThreadCommand,
    SubscribeCommentsThreadCommandFromJSON,
    SubscribeCommentsThreadCommandToJSON,
    UnsubscribeCommentsThreadCommand,
    UnsubscribeCommentsThreadCommandFromJSON,
    UnsubscribeCommentsThreadCommandToJSON,
} from '../models';

export interface SubscriptionsIsSubscribedToThreadRequest {
    threadId?: number;
}

export interface SubscriptionsSubscribeThreadRequest {
    subscribeCommentsThreadCommand: SubscribeCommentsThreadCommand;
}

export interface SubscriptionsUnsubscribeThreadRequest {
    unsubscribeCommentsThreadCommand: UnsubscribeCommentsThreadCommand;
}

/**
 * 
 */
export class SubscriptionsApi extends runtime.BaseAPI {

    /**
     */
    async subscriptionsIsSubscribedToThreadRaw(requestParameters: SubscriptionsIsSubscribedToThreadRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<boolean>> {
        const queryParameters: any = {};

        if (requestParameters.threadId !== undefined) {
            queryParameters['ThreadId'] = requestParameters.threadId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/subscriptions/thread`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async subscriptionsIsSubscribedToThread(requestParameters: SubscriptionsIsSubscribedToThreadRequest = {}, initOverrides?: RequestInit): Promise<boolean> {
        const response = await this.subscriptionsIsSubscribedToThreadRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async subscriptionsSubscribeThreadRaw(requestParameters: SubscriptionsSubscribeThreadRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters.subscribeCommentsThreadCommand === null || requestParameters.subscribeCommentsThreadCommand === undefined) {
            throw new runtime.RequiredError('subscribeCommentsThreadCommand','Required parameter requestParameters.subscribeCommentsThreadCommand was null or undefined when calling subscriptionsSubscribeThread.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/subscriptions/thread`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SubscribeCommentsThreadCommandToJSON(requestParameters.subscribeCommentsThreadCommand),
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async subscriptionsSubscribeThread(requestParameters: SubscriptionsSubscribeThreadRequest, initOverrides?: RequestInit): Promise<boolean> {
        const response = await this.subscriptionsSubscribeThreadRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async subscriptionsUnsubscribeThreadRaw(requestParameters: SubscriptionsUnsubscribeThreadRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters.unsubscribeCommentsThreadCommand === null || requestParameters.unsubscribeCommentsThreadCommand === undefined) {
            throw new runtime.RequiredError('unsubscribeCommentsThreadCommand','Required parameter requestParameters.unsubscribeCommentsThreadCommand was null or undefined when calling subscriptionsUnsubscribeThread.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/subscriptions/thread`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: UnsubscribeCommentsThreadCommandToJSON(requestParameters.unsubscribeCommentsThreadCommand),
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async subscriptionsUnsubscribeThread(requestParameters: SubscriptionsUnsubscribeThreadRequest, initOverrides?: RequestInit): Promise<boolean> {
        const response = await this.subscriptionsUnsubscribeThreadRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
