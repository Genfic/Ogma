/* tslint:disable */
/* eslint-disable */
/**
 * My Title
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    AddStoryToFolderCommand,
    AddStoryToFolderCommandFromJSON,
    AddStoryToFolderCommandToJSON,
    FolderStory,
    FolderStoryFromJSON,
    FolderStoryToJSON,
    GetFolderResult,
    GetFolderResultFromJSON,
    GetFolderResultToJSON,
} from '../models';

export interface FoldersAddStoryRequest {
    addStoryToFolderCommand: AddStoryToFolderCommand;
}

export interface FoldersGetFoldersOfClubRequest {
    id: number;
}

/**
 * 
 */
export class FoldersApi extends runtime.BaseAPI {

    /**
     */
    async foldersAddStoryRaw(requestParameters: FoldersAddStoryRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<FolderStory>> {
        if (requestParameters.addStoryToFolderCommand === null || requestParameters.addStoryToFolderCommand === undefined) {
            throw new runtime.RequiredError('addStoryToFolderCommand','Required parameter requestParameters.addStoryToFolderCommand was null or undefined when calling foldersAddStory.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/folders/add-story`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddStoryToFolderCommandToJSON(requestParameters.addStoryToFolderCommand),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FolderStoryFromJSON(jsonValue));
    }

    /**
     */
    async foldersAddStory(requestParameters: FoldersAddStoryRequest, initOverrides?: RequestInit): Promise<FolderStory> {
        const response = await this.foldersAddStoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async foldersGetFoldersOfClubRaw(requestParameters: FoldersGetFoldersOfClubRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<GetFolderResult>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling foldersGetFoldersOfClub.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/folders/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetFolderResultFromJSON));
    }

    /**
     */
    async foldersGetFoldersOfClub(requestParameters: FoldersGetFoldersOfClubRequest, initOverrides?: RequestInit): Promise<Array<GetFolderResult>> {
        const response = await this.foldersGetFoldersOfClubRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
