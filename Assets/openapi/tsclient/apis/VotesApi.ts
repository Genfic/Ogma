/* tslint:disable */
/* eslint-disable */
/**
 * My Title
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CreateVoteCommand,
    CreateVoteCommandFromJSON,
    CreateVoteCommandToJSON,
    CreateVoteResult,
    CreateVoteResultFromJSON,
    CreateVoteResultToJSON,
    DeleteVoteCommand,
    DeleteVoteCommandFromJSON,
    DeleteVoteCommandToJSON,
    DeleteVoteResult,
    DeleteVoteResultFromJSON,
    DeleteVoteResultToJSON,
    GetVotesResult,
    GetVotesResultFromJSON,
    GetVotesResultToJSON,
} from '../models';

export interface VotesDeleteVoteRequest {
    deleteVoteCommand: DeleteVoteCommand;
}

export interface VotesGetVotesRequest {
    storyId: number;
}

export interface VotesPostVoteRequest {
    createVoteCommand: CreateVoteCommand;
}

/**
 * 
 */
export class VotesApi extends runtime.BaseAPI {

    /**
     */
    async votesDeleteVoteRaw(requestParameters: VotesDeleteVoteRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<DeleteVoteResult>> {
        if (requestParameters.deleteVoteCommand === null || requestParameters.deleteVoteCommand === undefined) {
            throw new runtime.RequiredError('deleteVoteCommand','Required parameter requestParameters.deleteVoteCommand was null or undefined when calling votesDeleteVote.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/votes`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: DeleteVoteCommandToJSON(requestParameters.deleteVoteCommand),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteVoteResultFromJSON(jsonValue));
    }

    /**
     */
    async votesDeleteVote(requestParameters: VotesDeleteVoteRequest, initOverrides?: RequestInit): Promise<DeleteVoteResult> {
        const response = await this.votesDeleteVoteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async votesGetVotesRaw(requestParameters: VotesGetVotesRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<GetVotesResult>> {
        if (requestParameters.storyId === null || requestParameters.storyId === undefined) {
            throw new runtime.RequiredError('storyId','Required parameter requestParameters.storyId was null or undefined when calling votesGetVotes.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/votes/{storyId}`.replace(`{${"storyId"}}`, encodeURIComponent(String(requestParameters.storyId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetVotesResultFromJSON(jsonValue));
    }

    /**
     */
    async votesGetVotes(requestParameters: VotesGetVotesRequest, initOverrides?: RequestInit): Promise<GetVotesResult> {
        const response = await this.votesGetVotesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async votesPostVoteRaw(requestParameters: VotesPostVoteRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CreateVoteResult>> {
        if (requestParameters.createVoteCommand === null || requestParameters.createVoteCommand === undefined) {
            throw new runtime.RequiredError('createVoteCommand','Required parameter requestParameters.createVoteCommand was null or undefined when calling votesPostVote.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/votes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateVoteCommandToJSON(requestParameters.createVoteCommand),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateVoteResultFromJSON(jsonValue));
    }

    /**
     */
    async votesPostVote(requestParameters: VotesPostVoteRequest, initOverrides?: RequestInit): Promise<CreateVoteResult> {
        const response = await this.votesPostVoteRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
