{
  "version": 3,
  "sources": ["..\\..\\FrontendCode\\typescript\\generated\\typed-fetch.ts", "..\\..\\FrontendCode\\typescript\\generated\\paths-public.ts", "..\\..\\FrontendCode\\typescript\\src\\admin\\quotes.ts"],
  "sourcesContent": [
    "interface TypedResponse<T> {\n\treadonly ok: boolean;\n\treadonly status: number;\n\treadonly statusText: string;\n\treadonly headers: Headers;\n\treadonly data: T;\n}\n\nexport async function typedFetch<TOut>(\n\turl: string,\n\tmethod: \"GET\" | \"POST\" | \"PUT\" | \"PATCH\" | \"DELETE\" | \"HEAD\" | string,\n\tbody?: object,\n\theaders?: HeadersInit,\n\toptions?: RequestInit,\n): Promise<Readonly<TypedResponse<TOut>>> {\n\tconst res = await fetch(url, {\n\t\tmethod: method,\n\t\theaders: {\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t...headers,\n\t\t},\n\t\tbody: body ? JSON.stringify(body) : null,\n\t\t...options,\n\t});\n\n\tconst contentType = res.headers.get(\"content-type\");\n\n\tlet data: TOut;\n\tif (contentType?.includes(\"application/json\")) {\n\t\tdata = await res.json();\n\t} else {\n\t\tdata = (await res.text()) as TOut;\n\t}\n\n\treturn {\n\t\tok: res.ok,\n\t\tstatus: res.status,\n\t\tstatusText: res.statusText,\n\t\theaders: res.headers,\n\t\tdata: data as TOut,\n\t};\n}\n",
    "import type {\n\tAddBookToShelfCommand,\n\tAddStoryToFolderCommand,\n\tAddStoryToFolderResponse,\n\tAdminIssueInviteCodeCommand,\n\tBlockUserCommand,\n\tCommentDto,\n\tCreateCommentCommand,\n\tCreateFaqCommand,\n\tCreateQuoteCommand,\n\tCreateQuotesFromJsonQuery,\n\tCreateRoleCommand,\n\tCreateShelfCommand,\n\tCreateTagCommand,\n\tCreateVoteCommand,\n\tDeleteVoteCommand,\n\tFaqDto,\n\tFollowUserCommand,\n\tFullQuoteDto,\n\tGetClubsWithStoryResult,\n\tGetFolderResult,\n\tGetJoinedClubsResponse,\n\tGetRevisionResult,\n\tGetSignInDataResult,\n\tGetThreadDetailsResult,\n\tGetUserNotificationsResult,\n\tInviteCodeDto,\n\tIssueInviteCodeCommand,\n\tJoinClubCommand,\n\tLeaveClubCommand,\n\tLockThreadCommand,\n\tMarkChapterAsReadCommand,\n\tMarkChapterAsUnreadCommand,\n\tQuickShelvesResult,\n\tQuoteDto,\n\tRatingApiDto,\n\tRemoveBookFromShelfCommand,\n\tRemoveBookFromShelfResult,\n\tReportContentCommand,\n\tRoleDto,\n\tShelfAddResult,\n\tShelfDto,\n\tShelfResult,\n\tSubscribeCommentsThreadCommand,\n\tTagDto,\n\tUnblockUserCommand,\n\tUnfollowUserCommand,\n\tUpdateCommentCommand,\n\tUpdateCommentResponse,\n\tUpdateFaqCommand,\n\tUpdateQuoteCommand,\n\tUpdateRoleCommand,\n\tUpdateRolesCommand,\n\tUpdateShelfCommand,\n\tUpdateTagCommand,\n\tVoteResult,\n} from './types-public';\nimport { typedFetch } from './typed-fetch';\n\n\nexport const DeleteApiChaptersread = async (body: MarkChapterAsUnreadCommand, headers?: HeadersInit, options?: RequestInit) => await typedFetch<number[]>(\"/api/chaptersread\",\n\t\"DELETE\",\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const DeleteApiClubjoin = async (body: LeaveClubCommand, headers?: HeadersInit, options?: RequestInit) => await typedFetch<boolean|string>(\"/api/clubjoin\",\n\t\"DELETE\",\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const DeleteApiComments = async (commentId: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<number>(`/api/comments/${commentId}`,\n\t\"DELETE\",\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const DeleteApiFaqs = async (id: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<number>(`/api/faqs?id=${id}`,\n\t\"DELETE\",\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const DeleteApiInviteCodes = async (codeId: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<number>(`/api/InviteCodes/${codeId}`,\n\t\"DELETE\",\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const DeleteApiNotifications = async (id: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<void>(`/api/notifications/${id}`,\n\t\"DELETE\",\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const DeleteApiQuotes = async (id: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<number>(`/api/quotes/${id}`,\n\t\"DELETE\",\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const DeleteApiRatings = async (ratingId: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<number>(`/api/ratings/${ratingId}`,\n\t\"DELETE\",\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const DeleteApiRoles = async (roleId: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<number>(`/api/roles?roleId=${roleId}`,\n\t\"DELETE\",\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const DeleteApiShelfStories = async (body: RemoveBookFromShelfCommand, headers?: HeadersInit, options?: RequestInit) => await typedFetch<RemoveBookFromShelfResult>(\"/api/ShelfStories\",\n\t\"DELETE\",\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const DeleteApiShelves = async (shelfId: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<number>(`/api/shelves/${shelfId}`,\n\t\"DELETE\",\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const DeleteApiSubscriptionsThread = async (threadId: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<boolean>(`/api/subscriptions/thread?threadId=${threadId}`,\n\t\"DELETE\",\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const DeleteApiTags = async (tagId: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<number>(`/api/tags?tagId=${tagId}`,\n\t\"DELETE\",\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const DeleteApiUsersBlock = async (body: UnblockUserCommand, headers?: HeadersInit, options?: RequestInit) => await typedFetch<boolean>(\"/api/users/block\",\n\t\"DELETE\",\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const DeleteApiUsersFollow = async (body: UnfollowUserCommand, headers?: HeadersInit, options?: RequestInit) => await typedFetch<boolean>(\"/api/users/follow\",\n\t\"DELETE\",\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const DeleteApiVotes = async (body: DeleteVoteCommand, headers?: HeadersInit, options?: RequestInit) => await typedFetch<VoteResult>(\"/api/votes\",\n\t\"DELETE\",\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const GetAllQuotes = async (headers?: HeadersInit, options?: RequestInit) => await typedFetch<FullQuoteDto[]>(\"/api/quotes\",\n\t\"GET\",\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetApiChaptersread = async (id: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<number[]>(`/api/chaptersread/${id}`,\n\t\"GET\",\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetApiClubjoin = async (clubId: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<boolean>(`/api/clubjoin/${clubId}`,\n\t\"GET\",\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetApiClubsStory = async (storyId: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<GetClubsWithStoryResult[]>(`/api/clubs/story/${storyId}`,\n\t\"GET\",\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetApiClubsUser = async (headers?: HeadersInit, options?: RequestInit) => await typedFetch<GetJoinedClubsResponse[]>(\"/api/clubs/user\",\n\t\"GET\",\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetApiComments = async (thread: number, page: number, highlight: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<{\n\telements: CommentDto[];\n\ttotal: number;\n\tperPage: number;\n\tpages: number;\n\tpage: number;\n}>(`/api/comments?thread=${thread}&page=${page}&highlight=${highlight}`,\n\t\"GET\",\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetApiCommentsMd = async (commentId: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<string>(`/api/comments/${commentId}/md`,\n\t\"GET\",\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetApiCommentsRevisions = async (commentId: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<GetRevisionResult[]>(`/api/comments/${commentId}/revisions`,\n\t\"GET\",\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetApiCommentsThread = async (threadId: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<GetThreadDetailsResult>(`/api/CommentsThread/${threadId}`,\n\t\"GET\",\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetApiFaqs = async (headers?: HeadersInit, options?: RequestInit) => await typedFetch<FaqDto[]>(\"/api/faqs\",\n\t\"GET\",\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetApiFolders = async (clubId: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<GetFolderResult[]>(`/api/folders?clubId=${clubId}`,\n\t\"GET\",\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetApiInviteCodes = async (headers?: HeadersInit, options?: RequestInit) => await typedFetch<InviteCodeDto[]>(\"/api/InviteCodes\",\n\t\"GET\",\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetApiInviteCodesPaginated = async (page: number, perPage: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<InviteCodeDto[]>(`/api/InviteCodes/paginated?page=${page}&perPage=${perPage}`,\n\t\"GET\",\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetApiNotifications = async (headers?: HeadersInit, options?: RequestInit) => await typedFetch<GetUserNotificationsResult[]>(\"/api/notifications\",\n\t\"GET\",\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetApiNotificationsCount = async (headers?: HeadersInit, options?: RequestInit) => await typedFetch<number>(\"/api/notifications/count\",\n\t\"GET\",\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetApiQuotesRandom = async (headers?: HeadersInit, options?: RequestInit) => await typedFetch<QuoteDto>(\"/api/quotes/random\",\n\t\"GET\",\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetApiRatings = async (headers?: HeadersInit, options?: RequestInit) => await typedFetch<RatingApiDto[]>(\"/api/ratings\",\n\t\"GET\",\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetApiRoles = async (headers?: HeadersInit, options?: RequestInit) => await typedFetch<RoleDto[]>(\"/api/roles\",\n\t\"GET\",\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetApiShelfStories = async (storyId: number, page: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<ShelfResult[]>(`/api/ShelfStories/${storyId}?page=${page}`,\n\t\"GET\",\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetApiShelfStoriesQuick = async (storyId: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<QuickShelvesResult[]>(`/api/ShelfStories/${storyId}/quick`,\n\t\"GET\",\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetApiShelves = async (userName: string, page: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<ShelfDto[]>(`/api/shelves/${userName}?page=${page}`,\n\t\"GET\",\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetApiSignin = async (name: string, headers?: HeadersInit, options?: RequestInit) => await typedFetch<GetSignInDataResult>(`/api/signin?name=${name}`,\n\t\"GET\",\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetApiSubscriptionsThread = async (threadId: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<boolean>(`/api/subscriptions/thread?threadId=${threadId}`,\n\t\"GET\",\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetApiTags = async (page: number, perPage: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<TagDto[]>(`/api/tags?page=${page}&perPage=${perPage}`,\n\t\"GET\",\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetApiTagsAll = async (headers?: HeadersInit, options?: RequestInit) => await typedFetch<TagDto[]>(\"/api/tags/all\",\n\t\"GET\",\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetApiTagsSearch = async (searchString: string, headers?: HeadersInit, options?: RequestInit) => await typedFetch<TagDto[]>(`/api/tags/search?searchString=${searchString}`,\n\t\"GET\",\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetApiTagsStory = async (storyId: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<TagDto[]>(`/api/tags/story/${storyId}`,\n\t\"GET\",\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetApiTest = async (headers?: HeadersInit, options?: RequestInit) => await typedFetch<void>(\"/api/test\",\n\t\"GET\",\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetApiUsersNames = async (name: string, headers?: HeadersInit, options?: RequestInit) => await typedFetch<string[]|string>(`/api/users/names?name=${name}`,\n\t\"GET\",\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetApiVotes = async (storyId: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<VoteResult>(`/api/votes/${storyId}`,\n\t\"GET\",\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetComment = async (commentId: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<CommentDto>(`/api/comments/${commentId}`,\n\t\"GET\",\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetRatingById = async (id: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<RatingApiDto>(`/api/ratings/${id}`,\n\t\"GET\",\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetRoleById = async (roleId: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<RoleDto>(`/api/roles/${roleId}`,\n\t\"GET\",\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetShelf = async (shelfId: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<ShelfDto>(`/api/shelves/${shelfId}`,\n\t\"GET\",\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetSingleFaq = async (faqId: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<FaqDto>(`/api/faqs/${faqId}`,\n\t\"GET\",\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetSingleQuote = async (id: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<QuoteDto>(`/api/quotes/${id}`,\n\t\"GET\",\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetSingleTag = async (tagId: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<TagDto>(`/api/tags/${tagId}`,\n\t\"GET\",\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const PatchApiComments = async (body: UpdateCommentCommand, headers?: HeadersInit, options?: RequestInit) => await typedFetch<UpdateCommentResponse>(\"/api/comments\",\n\t\"PATCH\",\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const PostApiChaptersread = async (body: MarkChapterAsReadCommand, headers?: HeadersInit, options?: RequestInit) => await typedFetch<number[]>(\"/api/chaptersread\",\n\t\"POST\",\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const PostApiClubjoin = async (body: JoinClubCommand, headers?: HeadersInit, options?: RequestInit) => await typedFetch<boolean>(\"/api/clubjoin\",\n\t\"POST\",\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const PostApiComments = async (body: CreateCommentCommand, headers?: HeadersInit, options?: RequestInit) => await typedFetch<void>(\"/api/comments\",\n\t\"POST\",\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const PostApiCommentsThreadLock = async (body: LockThreadCommand, headers?: HeadersInit, options?: RequestInit) => await typedFetch<boolean>(\"/api/CommentsThread/lock\",\n\t\"POST\",\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const PostApiFaqs = async (body: CreateFaqCommand, headers?: HeadersInit, options?: RequestInit) => await typedFetch<FaqDto>(\"/api/faqs\",\n\t\"POST\",\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const PostApiFoldersAddStory = async (body: AddStoryToFolderCommand, headers?: HeadersInit, options?: RequestInit) => await typedFetch<AddStoryToFolderResponse|string>(\"/api/folders/AddStory\",\n\t\"POST\",\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const PostApiInviteCodes = async (headers?: HeadersInit, options?: RequestInit) => await typedFetch<InviteCodeDto|string>(\"/api/InviteCodes\",\n\t\"POST\",\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const PostApiInviteCodesNoLimit = async (headers?: HeadersInit, options?: RequestInit) => await typedFetch<InviteCodeDto>(\"/api/InviteCodes/no-limit\",\n\t\"POST\",\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const PostApiQuotes = async (body: CreateQuoteCommand, headers?: HeadersInit, options?: RequestInit) => await typedFetch<QuoteDto>(\"/api/quotes\",\n\t\"POST\",\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const PostApiQuotesJson = async (body: CreateQuotesFromJsonQuery, headers?: HeadersInit, options?: RequestInit) => await typedFetch<number>(\"/api/quotes/json\",\n\t\"POST\",\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const PostApiRatings = async (headers?: HeadersInit, options?: RequestInit) => await typedFetch<RatingApiDto>(\"/api/ratings\",\n\t\"POST\",\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const PostApiReports = async (body: ReportContentCommand, headers?: HeadersInit, options?: RequestInit) => await typedFetch<number>(\"/api/reports\",\n\t\"POST\",\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const PostApiRoles = async (body: CreateRoleCommand, headers?: HeadersInit, options?: RequestInit) => await typedFetch<RoleDto|string>(\"/api/roles\",\n\t\"POST\",\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const PostApiShelfStories = async (body: AddBookToShelfCommand, headers?: HeadersInit, options?: RequestInit) => await typedFetch<ShelfAddResult>(\"/api/ShelfStories\",\n\t\"POST\",\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const PostApiShelves = async (body: CreateShelfCommand, headers?: HeadersInit, options?: RequestInit) => await typedFetch<ShelfDto>(\"/api/shelves\",\n\t\"POST\",\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const PostApiSubscriptionsThread = async (body: SubscribeCommentsThreadCommand, headers?: HeadersInit, options?: RequestInit) => await typedFetch<boolean>(\"/api/subscriptions/thread\",\n\t\"POST\",\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const PostApiTags = async (body: CreateTagCommand, headers?: HeadersInit, options?: RequestInit) => await typedFetch<TagDto|string>(\"/api/tags\",\n\t\"POST\",\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const PostApiUsersBlock = async (body: BlockUserCommand, headers?: HeadersInit, options?: RequestInit) => await typedFetch<boolean>(\"/api/users/block\",\n\t\"POST\",\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const PostApiUsersFollow = async (body: FollowUserCommand, headers?: HeadersInit, options?: RequestInit) => await typedFetch<boolean>(\"/api/users/follow\",\n\t\"POST\",\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const PostApiUsersRoles = async (body: UpdateRolesCommand, headers?: HeadersInit, options?: RequestInit) => await typedFetch<void>(\"/api/users/roles\",\n\t\"POST\",\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const PostApiVotes = async (body: CreateVoteCommand, headers?: HeadersInit, options?: RequestInit) => await typedFetch<VoteResult>(\"/api/votes\",\n\t\"POST\",\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const PutApiFaqs = async (body: UpdateFaqCommand, headers?: HeadersInit, options?: RequestInit) => await typedFetch<void>(\"/api/faqs\",\n\t\"PUT\",\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const PutApiQuotes = async (body: UpdateQuoteCommand, headers?: HeadersInit, options?: RequestInit) => await typedFetch<void>(\"/api/quotes\",\n\t\"PUT\",\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const PutApiRatings = async (headers?: HeadersInit, options?: RequestInit) => await typedFetch<RatingApiDto>(\"/api/ratings\",\n\t\"PUT\",\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const PutApiRoles = async (body: UpdateRoleCommand, headers?: HeadersInit, options?: RequestInit) => await typedFetch<void>(\"/api/roles\",\n\t\"PUT\",\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const PutApiShelves = async (body: UpdateShelfCommand, headers?: HeadersInit, options?: RequestInit) => await typedFetch<void>(\"/api/shelves\",\n\t\"PUT\",\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const PutApiTags = async (body: UpdateTagCommand, headers?: HeadersInit, options?: RequestInit) => await typedFetch<string>(\"/api/tags\",\n\t\"PUT\",\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const UpdateLastActive = async (headers?: HeadersInit, options?: RequestInit) => await typedFetch<number>(\"/api/useractivity\",\n\t\"HEAD\",\n\tundefined,\n\theaders,\n\toptions,\n);\n\n",
    "import {\r\n\tPostApiQuotes as createQuote,\r\n\tPostApiQuotesJson as createQuotesFromJson,\r\n\tDeleteApiQuotes as deleteQuote,\r\n\tGetAllQuotes as getAllQuotes,\r\n\tPutApiQuotes as updateQuote,\r\n} from \"../../generated/paths-public\";\r\nimport type { FullQuoteDto } from \"../../generated/types-public\";\r\n\r\n// @ts-ignore\r\nnew Vue({\r\n\tel: \"#app\",\r\n\tdata: {\r\n\t\tform: {\r\n\t\t\tid: null,\r\n\t\t\tbody: null,\r\n\t\t\tauthor: null,\r\n\t\t} as FullQuoteDto,\r\n\t\tquotes: [] as FullQuoteDto[],\r\n\t\tjson: null,\r\n\t\tsearch: \"\",\r\n\r\n\t\teditorOpen: false,\r\n\t},\r\n\tmethods: {\r\n\t\t// Gets all existing namespaces\r\n\t\tgetQuotes: async function () {\r\n\t\t\tconst data = await getAllQuotes();\r\n\t\t\tthis.quotes = data.data;\r\n\t\t},\r\n\r\n\t\tdeleteQuote: async function (q: FullQuoteDto) {\r\n\t\t\tif (confirm(\"Delete permanently?\")) {\r\n\t\t\t\tconst data = await deleteQuote(q.id);\r\n\t\t\t\tconst id = data.data;\r\n\t\t\t\tthis.quotes = this.quotes.filter((i: FullQuoteDto) => i.id !== id);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\topenEditor: function (q: FullQuoteDto) {\r\n\t\t\tthis.editorOpen = true;\r\n\t\t\tthis.form = q;\r\n\t\t},\r\n\r\n\t\tcloseEditor: function () {\r\n\t\t\tthis.editorOpen = false;\r\n\t\t\tfor (const key in Object.keys(this.form)) {\r\n\t\t\t\tthis.form[key] = null;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tsaveQuote: async function () {\r\n\t\t\tif (this.form.id) {\r\n\t\t\t\tawait updateQuote(this.form);\r\n\t\t\t} else {\r\n\t\t\t\tawait createQuote(this.form);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t// Upload Json\r\n\t\tfromJson: async function () {\r\n\t\t\tconst res = await createQuotesFromJson({ quotes: this.json });\r\n\t\t\talert(`Created ${res.data} quotes`);\r\n\t\t},\r\n\t},\r\n\r\n\twatch: {\r\n\t\tsearch() {\r\n\t\t\tfor (const q of this.quotes) {\r\n\t\t\t\tq.show = this.search\r\n\t\t\t\t\t? q.body.toLowerCase().includes(this.search.toLowerCase()) ||\r\n\t\t\t\t\t\tq.author.toLowerCase().includes(this.search.toLowerCase())\r\n\t\t\t\t\t: true;\r\n\t\t\t}\r\n\t\t},\r\n\t},\r\n\r\n\tasync mounted() {\r\n\t\tawait this.getQuotes();\r\n\t},\r\n});\r\n"
  ],
  "mappings": "AAQA,eAAsB,CAAgB,CACrC,EACA,EACA,EACA,EACA,EACyC,CACzC,IAAM,EAAM,MAAM,MAAM,EAAK,CAC5B,OAAQ,EACR,QAAS,CACR,eAAgB,sBACb,CACJ,EACA,KAAM,EAAO,KAAK,UAAU,CAAI,EAAI,QACjC,CACJ,CAAC,EAEK,EAAc,EAAI,QAAQ,IAAI,cAAc,EAE9C,EACJ,GAAI,GAAa,SAAS,kBAAkB,EAC3C,EAAO,MAAM,EAAI,KAAK,EAEtB,OAAQ,MAAM,EAAI,KAAK,EAGxB,MAAO,CACN,GAAI,EAAI,GACR,OAAQ,EAAI,OACZ,WAAY,EAAI,WAChB,QAAS,EAAI,QACb,KAAM,CACP,ECoEM,IAAM,EAAkB,MAAO,EAAY,EAAuB,IAA0B,MAAM,EAAmB,eAAe,IAC1I,SACA,OACA,EACA,CACD,EA2EO,IAAM,EAAe,MAAO,EAAuB,IAA0B,MAAM,EAA2B,cACpH,MACA,OACA,EACA,CACD,EAiXO,IAAM,EAAgB,MAAO,EAA0B,EAAuB,IAA0B,MAAM,EAAqB,cACzI,OACA,EACA,EACA,CACD,EAGa,EAAoB,MAAO,EAAiC,EAAuB,IAA0B,MAAM,EAAmB,mBAClJ,OACA,EACA,EACA,CACD,EAmGO,IAAM,EAAe,MAAO,EAA0B,EAAuB,IAA0B,MAAM,EAAiB,cACpI,MACA,EACA,EACA,CACD,EC7pBA,IAAI,IAAI,CACP,GAAI,OACJ,KAAM,CACL,KAAM,CACL,GAAI,KACJ,KAAM,KACN,OAAQ,IACT,EACA,OAAQ,CAAC,EACT,KAAM,KACN,OAAQ,GAER,WAAY,EACb,EACA,QAAS,CAER,UAAW,cAAe,EAAG,CAC5B,IAAM,EAAO,MAAM,EAAa,EAChC,KAAK,OAAS,EAAK,MAGpB,YAAa,cAAe,CAAC,EAAiB,CAC7C,GAAI,QAAQ,qBAAqB,EAAG,CAEnC,IAAM,GADO,MAAM,EAAY,EAAE,EAAE,GACnB,KAChB,KAAK,OAAS,KAAK,OAAO,OAAO,CAAC,IAAoB,EAAE,KAAO,CAAE,IAInE,WAAY,QAAS,CAAC,EAAiB,CACtC,KAAK,WAAa,GAClB,KAAK,KAAO,GAGb,YAAa,QAAS,EAAG,CACxB,KAAK,WAAa,GAClB,QAAW,KAAO,OAAO,KAAK,KAAK,IAAI,EACtC,KAAK,KAAK,GAAO,MAInB,UAAW,cAAe,EAAG,CAC5B,GAAI,KAAK,KAAK,GACb,MAAM,EAAY,KAAK,IAAI,EAE3B,WAAM,EAAY,KAAK,IAAI,GAK7B,SAAU,cAAe,EAAG,CAC3B,IAAM,EAAM,MAAM,EAAqB,CAAE,OAAQ,KAAK,IAAK,CAAC,EAC5D,MAAM,WAAW,EAAI,aAAa,EAEpC,EAEA,MAAO,CACN,MAAM,EAAG,CACR,QAAW,KAAK,KAAK,OACpB,EAAE,KAAO,KAAK,OACX,EAAE,KAAK,YAAY,EAAE,SAAS,KAAK,OAAO,YAAY,CAAC,GACxD,EAAE,OAAO,YAAY,EAAE,SAAS,KAAK,OAAO,YAAY,CAAC,EACxD,GAGN,OAEM,QAAO,EAAG,CACf,MAAM,KAAK,UAAU,EAEvB,CAAC",
  "debugId": "31E9C177B4E1D81364756E2164756E21",
  "names": []
}