{
  "version": 3,
  "sources": ["..\\..\\FrontendCode\\typescript\\generated\\typed-fetch.ts", "..\\..\\FrontendCode\\typescript\\generated\\paths-internal.ts", "..\\..\\FrontendCode\\typescript\\generated\\paths-public.ts", "..\\..\\FrontendCode\\typescript\\src\\admin\\users.ts"],
  "sourcesContent": [
    "interface TypedResponse<T> {\r\n\treadonly ok: boolean;\r\n\treadonly status: number;\r\n\treadonly statusText: string;\r\n\treadonly headers: Headers;\r\n\treadonly data: T;\r\n}\r\n\r\nexport async function typedFetch<TOut>(\r\n\turl: string,\r\n\tmethod: \"GET\" | \"POST\" | \"PUT\" | \"PATCH\" | \"DELETE\" | \"HEAD\" | string,\r\n\tbody?: object,\r\n\theaders?: HeadersInit,\r\n\toptions?: RequestInit,\r\n): Promise<Readonly<TypedResponse<TOut>>> {\r\n\tconst res = await fetch(url, {\r\n\t\tmethod: method,\r\n\t\theaders: {\r\n\t\t\t\"Content-Type\": \"application/json\",\r\n\t\t\t...headers,\r\n\t\t},\r\n\t\tbody: body ? JSON.stringify(body) : null,\r\n\t\t...options,\r\n\t});\r\n\r\n\tconst contentType = res.headers.get(\"content-type\");\r\n\r\n\tlet data: TOut;\r\n\tif (contentType?.includes(\"application/json\")) {\r\n\t\tdata = await res.json();\r\n\t} else {\r\n\t\tdata = (await res.text()) as TOut;\r\n\t}\r\n\r\n\treturn {\r\n\t\tok: res.ok,\r\n\t\tstatus: res.status,\r\n\t\tstatusText: res.statusText,\r\n\t\theaders: res.headers,\r\n\t\tdata: data as TOut,\r\n\t};\r\n}\r\n",
    "import { typedFetch } from \"./typed-fetch\";\r\nimport type { CreateInfractionCommand, GetUserInfractionsResult, InfractionDto } from \"./types-internal\";\r\n\r\nexport const DeleteAdminApiCache = async (headers?: HeadersInit, options?: RequestInit) =>\r\n\tawait typedFetch<string>(\"/admin/api/cache\", \"DELETE\", undefined, headers, options);\r\n\r\nexport const DeleteAdminApiInfractions = async (infractionId: number, headers?: HeadersInit, options?: RequestInit) =>\r\n\tawait typedFetch<void>(`/admin/api/infractions/${infractionId}`, \"DELETE\", undefined, headers, options);\r\n\r\nexport const GetAdminApiCache = async (headers?: HeadersInit, options?: RequestInit) =>\r\n\tawait typedFetch<number | string>(\"/admin/api/cache\", \"GET\", undefined, headers, options);\r\n\r\nexport const GetAdminApiInfractionsUser = async (userId: number, headers?: HeadersInit, options?: RequestInit) =>\r\n\tawait typedFetch<GetUserInfractionsResult[]>(\r\n\t\t`/admin/api/infractions/user/${userId}`,\r\n\t\t\"GET\",\r\n\t\tundefined,\r\n\t\theaders,\r\n\t\toptions,\r\n\t);\r\n\r\nexport const GetAdminApiTelemetryGetImportantItemCounts = async (headers?: HeadersInit, options?: RequestInit) =>\r\n\tawait typedFetch<object>(\"/admin/api/telemetry/GetImportantItemCounts\", \"GET\", undefined, headers, options);\r\n\r\nexport const GetAdminApiTelemetryGetTableInfo = async (headers?: HeadersInit, options?: RequestInit) =>\r\n\tawait typedFetch<object>(\"/admin/api/telemetry/GetTableInfo\", \"GET\", undefined, headers, options);\r\n\r\nexport const GetInfractionDetails = async (infractionId: number, headers?: HeadersInit, options?: RequestInit) =>\r\n\tawait typedFetch<InfractionDto>(`/admin/api/infractions/${infractionId}`, \"GET\", undefined, headers, options);\r\n\r\nexport const PostAdminApiInfractions = async (\r\n\tbody: CreateInfractionCommand,\r\n\theaders?: HeadersInit,\r\n\toptions?: RequestInit,\r\n) => await typedFetch<InfractionDto>(\"/admin/api/infractions\", \"POST\", body, headers, options);\r\n",
    "import { typedFetch } from \"./typed-fetch\";\r\nimport type {\r\n\tAddBookToShelfCommand,\r\n\tAddStoryToFolderCommand,\r\n\tAddStoryToFolderResponse,\r\n\tAdminIssueInviteCodeCommand,\r\n\tBlockUserCommand,\r\n\tCommentDto,\r\n\tCreateCommentCommand,\r\n\tCreateFaqCommand,\r\n\tCreateQuoteCommand,\r\n\tCreateQuotesFromJsonQuery,\r\n\tCreateRoleCommand,\r\n\tCreateShelfCommand,\r\n\tCreateTagCommand,\r\n\tCreateVoteCommand,\r\n\tDeleteVoteCommand,\r\n\tFaqDto,\r\n\tFollowUserCommand,\r\n\tFullQuoteDto,\r\n\tGetClubsWithStoryResult,\r\n\tGetFolderResult,\r\n\tGetJoinedClubsResponse,\r\n\tGetRevisionResult,\r\n\tGetSignInDataResult,\r\n\tGetThreadDetailsResult,\r\n\tGetUserNotificationsResult,\r\n\tInviteCodeDto,\r\n\tIssueInviteCodeCommand,\r\n\tJoinClubCommand,\r\n\tLeaveClubCommand,\r\n\tLockThreadCommand,\r\n\tMarkChapterAsReadCommand,\r\n\tMarkChapterAsUnreadCommand,\r\n\tQuickShelvesResult,\r\n\tQuoteDto,\r\n\tRatingApiDto,\r\n\tRemoveBookFromShelfCommand,\r\n\tRemoveBookFromShelfResult,\r\n\tReportContentCommand,\r\n\tRoleDto,\r\n\tShelfAddResult,\r\n\tShelfDto,\r\n\tShelfResult,\r\n\tSubscribeCommentsThreadCommand,\r\n\tTagDto,\r\n\tUnblockUserCommand,\r\n\tUnfollowUserCommand,\r\n\tUpdateCommentCommand,\r\n\tUpdateCommentResponse,\r\n\tUpdateFaqCommand,\r\n\tUpdateQuoteCommand,\r\n\tUpdateRoleCommand,\r\n\tUpdateRolesCommand,\r\n\tUpdateShelfCommand,\r\n\tUpdateTagCommand,\r\n\tVoteResult,\r\n} from \"./types-public\";\r\n\r\nexport const DeleteApiChaptersread = async (\r\n\tbody: MarkChapterAsUnreadCommand,\r\n\theaders?: HeadersInit,\r\n\toptions?: RequestInit,\r\n) => await typedFetch<number[]>(\"/api/chaptersread\", \"DELETE\", body, headers, options);\r\n\r\nexport const DeleteApiClubjoin = async (body: LeaveClubCommand, headers?: HeadersInit, options?: RequestInit) =>\r\n\tawait typedFetch<boolean | string>(\"/api/clubjoin\", \"DELETE\", body, headers, options);\r\n\r\nexport const DeleteApiComments = async (commentId: number, headers?: HeadersInit, options?: RequestInit) =>\r\n\tawait typedFetch<number>(`/api/comments/${commentId}`, \"DELETE\", undefined, headers, options);\r\n\r\nexport const DeleteApiFaqs = async (id: number, headers?: HeadersInit, options?: RequestInit) =>\r\n\tawait typedFetch<number>(`/api/faqs?id=${id}`, \"DELETE\", undefined, headers, options);\r\n\r\nexport const DeleteApiInviteCodes = async (codeId: number, headers?: HeadersInit, options?: RequestInit) =>\r\n\tawait typedFetch<number>(`/api/InviteCodes/${codeId}`, \"DELETE\", undefined, headers, options);\r\n\r\nexport const DeleteApiNotifications = async (id: number, headers?: HeadersInit, options?: RequestInit) =>\r\n\tawait typedFetch<void>(`/api/notifications/${id}`, \"DELETE\", undefined, headers, options);\r\n\r\nexport const DeleteApiQuotes = async (id: number, headers?: HeadersInit, options?: RequestInit) =>\r\n\tawait typedFetch<number>(`/api/quotes/${id}`, \"DELETE\", undefined, headers, options);\r\n\r\nexport const DeleteApiRatings = async (ratingId: number, headers?: HeadersInit, options?: RequestInit) =>\r\n\tawait typedFetch<number>(`/api/ratings/${ratingId}`, \"DELETE\", undefined, headers, options);\r\n\r\nexport const DeleteApiRoles = async (roleId: number, headers?: HeadersInit, options?: RequestInit) =>\r\n\tawait typedFetch<number>(`/api/roles?roleId=${roleId}`, \"DELETE\", undefined, headers, options);\r\n\r\nexport const DeleteApiShelfStories = async (\r\n\tbody: RemoveBookFromShelfCommand,\r\n\theaders?: HeadersInit,\r\n\toptions?: RequestInit,\r\n) => await typedFetch<RemoveBookFromShelfResult>(\"/api/ShelfStories\", \"DELETE\", body, headers, options);\r\n\r\nexport const DeleteApiShelves = async (shelfId: number, headers?: HeadersInit, options?: RequestInit) =>\r\n\tawait typedFetch<number>(`/api/shelves/${shelfId}`, \"DELETE\", undefined, headers, options);\r\n\r\nexport const DeleteApiSubscriptionsThread = async (threadId: number, headers?: HeadersInit, options?: RequestInit) =>\r\n\tawait typedFetch<boolean>(`/api/subscriptions/thread?threadId=${threadId}`, \"DELETE\", undefined, headers, options);\r\n\r\nexport const DeleteApiTags = async (tagId: number, headers?: HeadersInit, options?: RequestInit) =>\r\n\tawait typedFetch<number>(`/api/tags?tagId=${tagId}`, \"DELETE\", undefined, headers, options);\r\n\r\nexport const DeleteApiUsersBlock = async (body: UnblockUserCommand, headers?: HeadersInit, options?: RequestInit) =>\r\n\tawait typedFetch<boolean>(\"/api/users/block\", \"DELETE\", body, headers, options);\r\n\r\nexport const DeleteApiUsersFollow = async (body: UnfollowUserCommand, headers?: HeadersInit, options?: RequestInit) =>\r\n\tawait typedFetch<boolean>(\"/api/users/follow\", \"DELETE\", body, headers, options);\r\n\r\nexport const DeleteApiVotes = async (body: DeleteVoteCommand, headers?: HeadersInit, options?: RequestInit) =>\r\n\tawait typedFetch<VoteResult>(\"/api/votes\", \"DELETE\", body, headers, options);\r\n\r\nexport const GetAllQuotes = async (headers?: HeadersInit, options?: RequestInit) =>\r\n\tawait typedFetch<FullQuoteDto[]>(\"/api/quotes\", \"GET\", undefined, headers, options);\r\n\r\nexport const GetApiChaptersread = async (id: number, headers?: HeadersInit, options?: RequestInit) =>\r\n\tawait typedFetch<number[]>(`/api/chaptersread/${id}`, \"GET\", undefined, headers, options);\r\n\r\nexport const GetApiClubjoin = async (clubId: number, headers?: HeadersInit, options?: RequestInit) =>\r\n\tawait typedFetch<boolean>(`/api/clubjoin/${clubId}`, \"GET\", undefined, headers, options);\r\n\r\nexport const GetApiClubsStory = async (storyId: number, headers?: HeadersInit, options?: RequestInit) =>\r\n\tawait typedFetch<GetClubsWithStoryResult[]>(`/api/clubs/story/${storyId}`, \"GET\", undefined, headers, options);\r\n\r\nexport const GetApiClubsUser = async (headers?: HeadersInit, options?: RequestInit) =>\r\n\tawait typedFetch<GetJoinedClubsResponse[]>(\"/api/clubs/user\", \"GET\", undefined, headers, options);\r\n\r\nexport const GetApiComments = async (\r\n\tthread: number,\r\n\tpage: number,\r\n\thighlight: number,\r\n\theaders?: HeadersInit,\r\n\toptions?: RequestInit,\r\n) =>\r\n\tawait typedFetch<{\r\n\t\telements: CommentDto[];\r\n\t\ttotal: number;\r\n\t\tperPage: number;\r\n\t\tpages: number;\r\n\t\tpage: number;\r\n\t}>(`/api/comments?thread=${thread}&page=${page}&highlight=${highlight}`, \"GET\", undefined, headers, options);\r\n\r\nexport const GetApiCommentsMd = async (commentId: number, headers?: HeadersInit, options?: RequestInit) =>\r\n\tawait typedFetch<string>(`/api/comments/${commentId}/md`, \"GET\", undefined, headers, options);\r\n\r\nexport const GetApiCommentsRevisions = async (commentId: number, headers?: HeadersInit, options?: RequestInit) =>\r\n\tawait typedFetch<GetRevisionResult[]>(`/api/comments/${commentId}/revisions`, \"GET\", undefined, headers, options);\r\n\r\nexport const GetApiCommentsThread = async (threadId: number, headers?: HeadersInit, options?: RequestInit) =>\r\n\tawait typedFetch<GetThreadDetailsResult>(`/api/CommentsThread/${threadId}`, \"GET\", undefined, headers, options);\r\n\r\nexport const GetApiFaqs = async (headers?: HeadersInit, options?: RequestInit) =>\r\n\tawait typedFetch<FaqDto[]>(\"/api/faqs\", \"GET\", undefined, headers, options);\r\n\r\nexport const GetApiFolders = async (clubId: number, headers?: HeadersInit, options?: RequestInit) =>\r\n\tawait typedFetch<GetFolderResult[]>(`/api/folders?clubId=${clubId}`, \"GET\", undefined, headers, options);\r\n\r\nexport const GetApiInviteCodes = async (headers?: HeadersInit, options?: RequestInit) =>\r\n\tawait typedFetch<InviteCodeDto[]>(\"/api/InviteCodes\", \"GET\", undefined, headers, options);\r\n\r\nexport const GetApiInviteCodesPaginated = async (\r\n\tpage: number,\r\n\tperPage: number,\r\n\theaders?: HeadersInit,\r\n\toptions?: RequestInit,\r\n) =>\r\n\tawait typedFetch<InviteCodeDto[]>(\r\n\t\t`/api/InviteCodes/paginated?page=${page}&perPage=${perPage}`,\r\n\t\t\"GET\",\r\n\t\tundefined,\r\n\t\theaders,\r\n\t\toptions,\r\n\t);\r\n\r\nexport const GetApiNotifications = async (headers?: HeadersInit, options?: RequestInit) =>\r\n\tawait typedFetch<GetUserNotificationsResult[]>(\"/api/notifications\", \"GET\", undefined, headers, options);\r\n\r\nexport const GetApiNotificationsCount = async (headers?: HeadersInit, options?: RequestInit) =>\r\n\tawait typedFetch<number>(\"/api/notifications/count\", \"GET\", undefined, headers, options);\r\n\r\nexport const GetApiQuotesRandom = async (headers?: HeadersInit, options?: RequestInit) =>\r\n\tawait typedFetch<QuoteDto>(\"/api/quotes/random\", \"GET\", undefined, headers, options);\r\n\r\nexport const GetApiRatings = async (headers?: HeadersInit, options?: RequestInit) =>\r\n\tawait typedFetch<RatingApiDto[]>(\"/api/ratings\", \"GET\", undefined, headers, options);\r\n\r\nexport const GetApiRoles = async (headers?: HeadersInit, options?: RequestInit) =>\r\n\tawait typedFetch<RoleDto[]>(\"/api/roles\", \"GET\", undefined, headers, options);\r\n\r\nexport const GetApiShelfStories = async (storyId: number, page: number, headers?: HeadersInit, options?: RequestInit) =>\r\n\tawait typedFetch<ShelfResult[]>(`/api/ShelfStories/${storyId}?page=${page}`, \"GET\", undefined, headers, options);\r\n\r\nexport const GetApiShelfStoriesQuick = async (storyId: number, headers?: HeadersInit, options?: RequestInit) =>\r\n\tawait typedFetch<QuickShelvesResult[]>(`/api/ShelfStories/${storyId}/quick`, \"GET\", undefined, headers, options);\r\n\r\nexport const GetApiShelves = async (userName: string, page: number, headers?: HeadersInit, options?: RequestInit) =>\r\n\tawait typedFetch<ShelfDto[]>(`/api/shelves/${userName}?page=${page}`, \"GET\", undefined, headers, options);\r\n\r\nexport const GetApiSignin = async (name: string, headers?: HeadersInit, options?: RequestInit) =>\r\n\tawait typedFetch<GetSignInDataResult>(`/api/signin?name=${name}`, \"GET\", undefined, headers, options);\r\n\r\nexport const GetApiSubscriptionsThread = async (threadId: number, headers?: HeadersInit, options?: RequestInit) =>\r\n\tawait typedFetch<boolean>(`/api/subscriptions/thread?threadId=${threadId}`, \"GET\", undefined, headers, options);\r\n\r\nexport const GetApiTags = async (page: number, perPage: number, headers?: HeadersInit, options?: RequestInit) =>\r\n\tawait typedFetch<TagDto[]>(`/api/tags?page=${page}&perPage=${perPage}`, \"GET\", undefined, headers, options);\r\n\r\nexport const GetApiTagsAll = async (headers?: HeadersInit, options?: RequestInit) =>\r\n\tawait typedFetch<TagDto[]>(\"/api/tags/all\", \"GET\", undefined, headers, options);\r\n\r\nexport const GetApiTagsSearch = async (searchString: string, headers?: HeadersInit, options?: RequestInit) =>\r\n\tawait typedFetch<TagDto[]>(`/api/tags/search?searchString=${searchString}`, \"GET\", undefined, headers, options);\r\n\r\nexport const GetApiTagsStory = async (storyId: number, headers?: HeadersInit, options?: RequestInit) =>\r\n\tawait typedFetch<TagDto[]>(`/api/tags/story/${storyId}`, \"GET\", undefined, headers, options);\r\n\r\nexport const GetApiTest = async (headers?: HeadersInit, options?: RequestInit) =>\r\n\tawait typedFetch<void>(\"/api/test\", \"GET\", undefined, headers, options);\r\n\r\nexport const GetApiUsersNames = async (name: string, headers?: HeadersInit, options?: RequestInit) =>\r\n\tawait typedFetch<string[] | string>(`/api/users/names?name=${name}`, \"GET\", undefined, headers, options);\r\n\r\nexport const GetApiVotes = async (storyId: number, headers?: HeadersInit, options?: RequestInit) =>\r\n\tawait typedFetch<VoteResult>(`/api/votes/${storyId}`, \"GET\", undefined, headers, options);\r\n\r\nexport const GetComment = async (commentId: number, headers?: HeadersInit, options?: RequestInit) =>\r\n\tawait typedFetch<CommentDto>(`/api/comments/${commentId}`, \"GET\", undefined, headers, options);\r\n\r\nexport const GetRatingById = async (id: number, headers?: HeadersInit, options?: RequestInit) =>\r\n\tawait typedFetch<RatingApiDto>(`/api/ratings/${id}`, \"GET\", undefined, headers, options);\r\n\r\nexport const GetRoleById = async (roleId: number, headers?: HeadersInit, options?: RequestInit) =>\r\n\tawait typedFetch<RoleDto>(`/api/roles/${roleId}`, \"GET\", undefined, headers, options);\r\n\r\nexport const GetShelf = async (shelfId: number, headers?: HeadersInit, options?: RequestInit) =>\r\n\tawait typedFetch<ShelfDto>(`/api/shelves/${shelfId}`, \"GET\", undefined, headers, options);\r\n\r\nexport const GetSingleFaq = async (faqId: number, headers?: HeadersInit, options?: RequestInit) =>\r\n\tawait typedFetch<FaqDto>(`/api/faqs/${faqId}`, \"GET\", undefined, headers, options);\r\n\r\nexport const GetSingleQuote = async (id: number, headers?: HeadersInit, options?: RequestInit) =>\r\n\tawait typedFetch<QuoteDto>(`/api/quotes/${id}`, \"GET\", undefined, headers, options);\r\n\r\nexport const GetSingleTag = async (tagId: number, headers?: HeadersInit, options?: RequestInit) =>\r\n\tawait typedFetch<TagDto>(`/api/tags/${tagId}`, \"GET\", undefined, headers, options);\r\n\r\nexport const PatchApiComments = async (body: UpdateCommentCommand, headers?: HeadersInit, options?: RequestInit) =>\r\n\tawait typedFetch<UpdateCommentResponse>(\"/api/comments\", \"PATCH\", body, headers, options);\r\n\r\nexport const PostApiChaptersread = async (\r\n\tbody: MarkChapterAsReadCommand,\r\n\theaders?: HeadersInit,\r\n\toptions?: RequestInit,\r\n) => await typedFetch<number[]>(\"/api/chaptersread\", \"POST\", body, headers, options);\r\n\r\nexport const PostApiClubjoin = async (body: JoinClubCommand, headers?: HeadersInit, options?: RequestInit) =>\r\n\tawait typedFetch<boolean>(\"/api/clubjoin\", \"POST\", body, headers, options);\r\n\r\nexport const PostApiComments = async (body: CreateCommentCommand, headers?: HeadersInit, options?: RequestInit) =>\r\n\tawait typedFetch<void>(\"/api/comments\", \"POST\", body, headers, options);\r\n\r\nexport const PostApiCommentsThreadLock = async (\r\n\tbody: LockThreadCommand,\r\n\theaders?: HeadersInit,\r\n\toptions?: RequestInit,\r\n) => await typedFetch<boolean>(\"/api/CommentsThread/lock\", \"POST\", body, headers, options);\r\n\r\nexport const PostApiFaqs = async (body: CreateFaqCommand, headers?: HeadersInit, options?: RequestInit) =>\r\n\tawait typedFetch<FaqDto>(\"/api/faqs\", \"POST\", body, headers, options);\r\n\r\nexport const PostApiFoldersAddStory = async (\r\n\tbody: AddStoryToFolderCommand,\r\n\theaders?: HeadersInit,\r\n\toptions?: RequestInit,\r\n) => await typedFetch<AddStoryToFolderResponse | string>(\"/api/folders/AddStory\", \"POST\", body, headers, options);\r\n\r\nexport const PostApiInviteCodes = async (headers?: HeadersInit, options?: RequestInit) =>\r\n\tawait typedFetch<InviteCodeDto | string>(\"/api/InviteCodes\", \"POST\", undefined, headers, options);\r\n\r\nexport const PostApiInviteCodesNoLimit = async (headers?: HeadersInit, options?: RequestInit) =>\r\n\tawait typedFetch<InviteCodeDto>(\"/api/InviteCodes/no-limit\", \"POST\", undefined, headers, options);\r\n\r\nexport const PostApiQuotes = async (body: CreateQuoteCommand, headers?: HeadersInit, options?: RequestInit) =>\r\n\tawait typedFetch<QuoteDto>(\"/api/quotes\", \"POST\", body, headers, options);\r\n\r\nexport const PostApiQuotesJson = async (\r\n\tbody: CreateQuotesFromJsonQuery,\r\n\theaders?: HeadersInit,\r\n\toptions?: RequestInit,\r\n) => await typedFetch<number>(\"/api/quotes/json\", \"POST\", body, headers, options);\r\n\r\nexport const PostApiRatings = async (headers?: HeadersInit, options?: RequestInit) =>\r\n\tawait typedFetch<RatingApiDto>(\"/api/ratings\", \"POST\", undefined, headers, options);\r\n\r\nexport const PostApiReports = async (body: ReportContentCommand, headers?: HeadersInit, options?: RequestInit) =>\r\n\tawait typedFetch<number>(\"/api/reports\", \"POST\", body, headers, options);\r\n\r\nexport const PostApiRoles = async (body: CreateRoleCommand, headers?: HeadersInit, options?: RequestInit) =>\r\n\tawait typedFetch<RoleDto | string>(\"/api/roles\", \"POST\", body, headers, options);\r\n\r\nexport const PostApiShelfStories = async (body: AddBookToShelfCommand, headers?: HeadersInit, options?: RequestInit) =>\r\n\tawait typedFetch<ShelfAddResult>(\"/api/ShelfStories\", \"POST\", body, headers, options);\r\n\r\nexport const PostApiShelves = async (body: CreateShelfCommand, headers?: HeadersInit, options?: RequestInit) =>\r\n\tawait typedFetch<ShelfDto>(\"/api/shelves\", \"POST\", body, headers, options);\r\n\r\nexport const PostApiSubscriptionsThread = async (\r\n\tbody: SubscribeCommentsThreadCommand,\r\n\theaders?: HeadersInit,\r\n\toptions?: RequestInit,\r\n) => await typedFetch<boolean>(\"/api/subscriptions/thread\", \"POST\", body, headers, options);\r\n\r\nexport const PostApiTags = async (body: CreateTagCommand, headers?: HeadersInit, options?: RequestInit) =>\r\n\tawait typedFetch<TagDto | string>(\"/api/tags\", \"POST\", body, headers, options);\r\n\r\nexport const PostApiUsersBlock = async (body: BlockUserCommand, headers?: HeadersInit, options?: RequestInit) =>\r\n\tawait typedFetch<boolean>(\"/api/users/block\", \"POST\", body, headers, options);\r\n\r\nexport const PostApiUsersFollow = async (body: FollowUserCommand, headers?: HeadersInit, options?: RequestInit) =>\r\n\tawait typedFetch<boolean>(\"/api/users/follow\", \"POST\", body, headers, options);\r\n\r\nexport const PostApiUsersRoles = async (body: UpdateRolesCommand, headers?: HeadersInit, options?: RequestInit) =>\r\n\tawait typedFetch<void>(\"/api/users/roles\", \"POST\", body, headers, options);\r\n\r\nexport const PostApiVotes = async (body: CreateVoteCommand, headers?: HeadersInit, options?: RequestInit) =>\r\n\tawait typedFetch<VoteResult>(\"/api/votes\", \"POST\", body, headers, options);\r\n\r\nexport const PutApiFaqs = async (body: UpdateFaqCommand, headers?: HeadersInit, options?: RequestInit) =>\r\n\tawait typedFetch<void>(\"/api/faqs\", \"PUT\", body, headers, options);\r\n\r\nexport const PutApiQuotes = async (body: UpdateQuoteCommand, headers?: HeadersInit, options?: RequestInit) =>\r\n\tawait typedFetch<void>(\"/api/quotes\", \"PUT\", body, headers, options);\r\n\r\nexport const PutApiRatings = async (headers?: HeadersInit, options?: RequestInit) =>\r\n\tawait typedFetch<RatingApiDto>(\"/api/ratings\", \"PUT\", undefined, headers, options);\r\n\r\nexport const PutApiRoles = async (body: UpdateRoleCommand, headers?: HeadersInit, options?: RequestInit) =>\r\n\tawait typedFetch<void>(\"/api/roles\", \"PUT\", body, headers, options);\r\n\r\nexport const PutApiShelves = async (body: UpdateShelfCommand, headers?: HeadersInit, options?: RequestInit) =>\r\n\tawait typedFetch<void>(\"/api/shelves\", \"PUT\", body, headers, options);\r\n\r\nexport const PutApiTags = async (body: UpdateTagCommand, headers?: HeadersInit, options?: RequestInit) =>\r\n\tawait typedFetch<string>(\"/api/tags\", \"PUT\", body, headers, options);\r\n\r\nexport const UpdateLastActive = async (headers?: HeadersInit, options?: RequestInit) =>\r\n\tawait typedFetch<number>(\"/api/useractivity\", \"HEAD\", undefined, headers, options);\r\n",
    "import { DeleteAdminApiInfractions } from \"../../generated/paths-internal\";\r\nimport { PostApiUsersRoles, GetApiUsersNames as getNames } from \"../../generated/paths-public\";\r\n\r\n// @ts-ignore\r\nnew Vue({\r\n\tel: \"#app\",\r\n\tdata: {\r\n\t\tcsrf: null,\r\n\t\trolesRoute: null,\r\n\t\tinfractionsRoute: null,\r\n\t\troles: [],\r\n\t\tuserId: null,\r\n\r\n\t\tnames: [],\r\n\t\tinput: \"\",\r\n\r\n\t\timage: null as HTMLImageElement,\r\n\t},\r\n\tmethods: {\r\n\t\tmanageInfractions: function () {\r\n\t\t\tthis.$refs.manage.visible = true;\r\n\t\t},\r\n\r\n\t\tremoveInfraction: async function (id: number) {\r\n\t\t\tconst res = await DeleteAdminApiInfractions(id, { RequestVerificationToken: this.csrf });\r\n\t\t\tif (res.ok) location.reload();\r\n\t\t},\r\n\r\n\t\tsaveRoles: async function () {\r\n\t\t\tthis.roles = [...document.querySelectorAll(\"input[type=checkbox][name=roles]:checked\")].map(\r\n\t\t\t\t(e: HTMLInputElement) => Number.parseInt(e.value),\r\n\t\t\t);\r\n\t\t\tconst res = await PostApiUsersRoles(\r\n\t\t\t\t{\r\n\t\t\t\t\tuserId: this.userId,\r\n\t\t\t\t\troles: this.roles,\r\n\t\t\t\t},\r\n\t\t\t\t{ RequestVerificationToken: this.csrf },\r\n\t\t\t);\r\n\r\n\t\t\tif (res.ok) {\r\n\t\t\t\tlocation.reload();\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tgetNames: async function () {\r\n\t\t\tif (this.input.length < 3) {\r\n\t\t\t\tthis.names = [];\r\n\t\t\t} else {\r\n\t\t\t\tconst res = await getNames(this.input);\r\n\t\t\t\tif (res.ok) {\r\n\t\t\t\t\tconst data = res.data;\r\n\t\t\t\t\tif (Array.isArray(data)) {\r\n\t\t\t\t\t\tthis.names = data;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tconsole.warn(data);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tshowImage: function (e: MouseEvent) {\r\n\t\t\tif (!this.image) {\r\n\t\t\t\tthis.image = document.createElement(\"img\");\r\n\t\t\t\tthis.image.src = (e.target as HTMLAnchorElement).href;\r\n\t\t\t\tthis.image.height = 200;\r\n\t\t\t\tthis.image.style.position = \"absolute\";\r\n\t\t\t\tthis.image.style.pointerEvents = \"none\";\r\n\r\n\t\t\t\tdocument.body.append(this.image);\r\n\t\t\t}\r\n\t\t\tthis.image.style.display = \"block\";\r\n\t\t},\r\n\r\n\t\tupdateImage: function (e: MouseEvent) {\r\n\t\t\tthis.image.style.left = `${e.clientX}px`;\r\n\t\t\tthis.image.style.top = `${e.clientY}px`;\r\n\t\t},\r\n\r\n\t\thideImage: function () {\r\n\t\t\tthis.image.style.display = \"none\";\r\n\t\t},\r\n\t},\r\n\tmounted() {\r\n\t\tconst dataElement: HTMLElement = this.$refs.dataElement;\r\n\t\tthis.csrf = dataElement.dataset.csrf;\r\n\r\n\t\tthis.userId = Number(document.getElementById(\"id\").innerText);\r\n\t},\r\n});\r\n"
  ],
  "mappings": "AAQA,eAAsB,CAAgB,CACrC,EACA,EACA,EACA,EACA,EACyC,CACzC,IAAM,EAAM,MAAM,MAAM,EAAK,CAC5B,OAAQ,EACR,QAAS,CACR,eAAgB,sBACb,CACJ,EACA,KAAM,EAAO,KAAK,UAAU,CAAI,EAAI,QACjC,CACJ,CAAC,EAEK,EAAc,EAAI,QAAQ,IAAI,cAAc,EAE9C,EACJ,GAAI,GAAa,SAAS,kBAAkB,EAC3C,EAAO,MAAM,EAAI,KAAK,EAEtB,OAAQ,MAAM,EAAI,KAAK,EAGxB,MAAO,CACN,GAAI,EAAI,GACR,OAAQ,EAAI,OACZ,WAAY,EAAI,WAChB,QAAS,EAAI,QACb,KAAM,CACP,EClCM,IAAM,EAA4B,MAAO,EAAsB,EAAuB,IAC5F,MAAM,EAAiB,0BAA0B,IAAgB,SAAU,OAAW,EAAS,CAAO,ECqNhG,IAAM,EAAmB,MAAO,EAAc,EAAuB,IAC3E,MAAM,EAA8B,yBAAyB,IAAQ,MAAO,OAAW,EAAS,CAAO,EAqGjG,IAAM,EAAoB,MAAO,EAA0B,EAAuB,IACxF,MAAM,EAAiB,mBAAoB,OAAQ,EAAM,EAAS,CAAO,EC/T1E,IAAI,IAAI,CACP,GAAI,OACJ,KAAM,CACL,KAAM,KACN,WAAY,KACZ,iBAAkB,KAClB,MAAO,CAAC,EACR,OAAQ,KAER,MAAO,CAAC,EACR,MAAO,GAEP,MAAO,IACR,EACA,QAAS,CACR,kBAAmB,QAAS,EAAG,CAC9B,KAAK,MAAM,OAAO,QAAU,IAG7B,iBAAkB,cAAe,CAAC,EAAY,CAE7C,IADY,MAAM,EAA0B,EAAI,CAAE,yBAA0B,KAAK,IAAK,CAAC,GAC/E,GAAI,SAAS,OAAO,GAG7B,UAAW,cAAe,EAAG,CAY5B,GAXA,KAAK,MAAQ,CAAC,GAAG,SAAS,iBAAiB,0CAA0C,CAAC,EAAE,IACvF,CAAC,IAAwB,OAAO,SAAS,EAAE,KAAK,CACjD,GACY,MAAM,EACjB,CACC,OAAQ,KAAK,OACb,MAAO,KAAK,KACb,EACA,CAAE,yBAA0B,KAAK,IAAK,CACvC,GAEQ,GACP,SAAS,OAAO,GAIlB,SAAU,cAAe,EAAG,CAC3B,GAAI,KAAK,MAAM,OAAS,EACvB,KAAK,MAAQ,CAAC,EACR,KACN,IAAM,EAAM,MAAM,EAAS,KAAK,KAAK,EACrC,GAAI,EAAI,GAAI,CACX,IAAM,EAAO,EAAI,KACjB,GAAI,MAAM,QAAQ,CAAI,EACrB,KAAK,MAAQ,EAEb,aAAQ,KAAK,CAAI,KAMrB,UAAW,QAAS,CAAC,EAAe,CACnC,IAAK,KAAK,MACT,KAAK,MAAQ,SAAS,cAAc,KAAK,EACzC,KAAK,MAAM,IAAO,EAAE,OAA6B,KACjD,KAAK,MAAM,OAAS,IACpB,KAAK,MAAM,MAAM,SAAW,WAC5B,KAAK,MAAM,MAAM,cAAgB,OAEjC,SAAS,KAAK,OAAO,KAAK,KAAK,EAEhC,KAAK,MAAM,MAAM,QAAU,SAG5B,YAAa,QAAS,CAAC,EAAe,CACrC,KAAK,MAAM,MAAM,KAAO,GAAG,EAAE,YAC7B,KAAK,MAAM,MAAM,IAAM,GAAG,EAAE,aAG7B,UAAW,QAAS,EAAG,CACtB,KAAK,MAAM,MAAM,QAAU,OAE7B,EACA,OAAO,EAAG,CACT,IAAM,EAA2B,KAAK,MAAM,YAC5C,KAAK,KAAO,EAAY,QAAQ,KAEhC,KAAK,OAAS,OAAO,SAAS,eAAe,IAAI,EAAE,SAAS,EAE9D,CAAC",
  "debugId": "2E4D518D8C63E4D864756E2164756E21",
  "names": []
}