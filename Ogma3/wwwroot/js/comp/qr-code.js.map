{
  "version": 3,
  "sources": ["..\\..\\..\\FrontendCode\\typescript\\src-helpers\\dom.ts", "..\\..\\..\\FrontendCode\\node_modules\\uqr\\dist\\index.mjs", "..\\..\\..\\FrontendCode\\typescript\\src-solid\\qr-code.tsx"],
  "sourcesContent": [
    "const parser = new DOMParser();\r\n\r\nexport const parseDom = (html: string): HTMLElement => {\r\n\treturn parser.parseFromString(html, \"text/html\").body.firstElementChild as HTMLElement;\r\n};\r\n\r\n/**\r\n * Finds the first following sibling element matching a CSS selector.\r\n * Searches forward only from the starting element.\r\n *\r\n * @param el The starting element.\r\n * @param selector The CSS selector to match siblings against.\r\n * @returns The first matching following sibling, or null if none is found.\r\n */\r\nexport const findNextSibling = (el: Element, selector: string): Element | null => {\r\n\tif (!el) return null; // Handle cases where the starting element doesn't exist\r\n\r\n\tlet currentSibling = el.nextElementSibling; // Start with the immediate next sibling\r\n\r\n\t// Loop through all following siblings\r\n\twhile (currentSibling) {\r\n\t\t// Check if the current sibling matches the selector\r\n\t\tif (currentSibling.matches(selector)) {\r\n\t\t\t// Found the matching sibling\r\n\t\t\treturn currentSibling;\r\n\t\t}\r\n\t\t// Move to the next sibling\r\n\t\tcurrentSibling = currentSibling.nextElementSibling;\r\n\t}\r\n\r\n\t// No matching sibling found after the starting element\r\n\treturn null;\r\n};\r\n",
    "var QrCodeDataType = /* @__PURE__ */ ((QrCodeDataType2) => {\n  QrCodeDataType2[QrCodeDataType2[\"Border\"] = -1] = \"Border\";\n  QrCodeDataType2[QrCodeDataType2[\"Data\"] = 0] = \"Data\";\n  QrCodeDataType2[QrCodeDataType2[\"Function\"] = 1] = \"Function\";\n  QrCodeDataType2[QrCodeDataType2[\"Position\"] = 2] = \"Position\";\n  QrCodeDataType2[QrCodeDataType2[\"Timing\"] = 3] = \"Timing\";\n  QrCodeDataType2[QrCodeDataType2[\"Alignment\"] = 4] = \"Alignment\";\n  return QrCodeDataType2;\n})(QrCodeDataType || {});\n\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nconst LOW = [0, 1];\nconst MEDIUM = [1, 0];\nconst QUARTILE = [2, 3];\nconst HIGH = [3, 2];\nconst EccMap = {\n  L: LOW,\n  M: MEDIUM,\n  Q: QUARTILE,\n  H: HIGH\n};\nconst NUMERIC_REGEX = /^[0-9]*$/;\nconst ALPHANUMERIC_REGEX = /^[A-Z0-9 $%*+.\\/:-]*$/;\nconst ALPHANUMERIC_CHARSET = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ $%*+-./:\";\nconst MIN_VERSION = 1;\nconst MAX_VERSION = 40;\nconst PENALTY_N1 = 3;\nconst PENALTY_N2 = 3;\nconst PENALTY_N3 = 40;\nconst PENALTY_N4 = 10;\nconst ECC_CODEWORDS_PER_BLOCK = [\n  // Version: (note that index 0 is for padding, and is set to an illegal value)\n  // 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40    Error correction level\n  [-1, 7, 10, 15, 20, 26, 18, 20, 24, 30, 18, 20, 24, 26, 30, 22, 24, 28, 30, 28, 28, 28, 28, 30, 30, 26, 28, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30],\n  // Low\n  [-1, 10, 16, 26, 18, 24, 16, 18, 22, 22, 26, 30, 22, 22, 24, 24, 28, 28, 26, 26, 26, 26, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28],\n  // Medium\n  [-1, 13, 22, 18, 26, 18, 24, 18, 22, 20, 24, 28, 26, 24, 20, 30, 24, 28, 28, 26, 30, 28, 30, 30, 30, 30, 28, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30],\n  // Quartile\n  [-1, 17, 28, 22, 16, 22, 28, 26, 26, 24, 28, 24, 28, 22, 24, 24, 30, 28, 28, 26, 28, 30, 24, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30]\n  // High\n];\nconst NUM_ERROR_CORRECTION_BLOCKS = [\n  // Version: (note that index 0 is for padding, and is set to an illegal value)\n  // 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40    Error correction level\n  [-1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 4, 4, 4, 4, 4, 6, 6, 6, 6, 7, 8, 8, 9, 9, 10, 12, 12, 12, 13, 14, 15, 16, 17, 18, 19, 19, 20, 21, 22, 24, 25],\n  // Low\n  [-1, 1, 1, 1, 2, 2, 4, 4, 4, 5, 5, 5, 8, 9, 9, 10, 10, 11, 13, 14, 16, 17, 17, 18, 20, 21, 23, 25, 26, 28, 29, 31, 33, 35, 37, 38, 40, 43, 45, 47, 49],\n  // Medium\n  [-1, 1, 1, 2, 2, 4, 4, 6, 6, 8, 8, 8, 10, 12, 16, 12, 17, 16, 18, 21, 20, 23, 23, 25, 27, 29, 34, 34, 35, 38, 40, 43, 45, 48, 51, 53, 56, 59, 62, 65, 68],\n  // Quartile\n  [-1, 1, 1, 2, 4, 4, 4, 5, 6, 8, 8, 11, 11, 16, 16, 18, 16, 19, 21, 25, 25, 25, 34, 30, 32, 35, 37, 40, 42, 45, 48, 51, 54, 57, 60, 63, 66, 70, 74, 77, 81]\n  // High\n];\nclass QrCode {\n  /* -- Constructor (low level) and fields -- */\n  // Creates a new QR Code with the given version number,\n  // error correction level, data codeword bytes, and mask number.\n  // This is a low-level API that most users should not use directly.\n  // A mid-level API is the encodeSegments() function.\n  constructor(version, ecc, dataCodewords, msk) {\n    this.version = version;\n    this.ecc = ecc;\n    /* -- Fields -- */\n    // The width and height of this QR Code, measured in modules, between\n    // 21 and 177 (inclusive). This is equal to version * 4 + 17.\n    __publicField(this, \"size\");\n    // The index of the mask pattern used in this QR Code, which is between 0 and 7 (inclusive).\n    // Even if a QR Code is created with automatic masking requested (mask = -1),\n    // the resulting object still has a mask value between 0 and 7.\n    __publicField(this, \"mask\");\n    // The modules of this QR Code (false = light, true = dark).\n    // Immutable after constructor finishes. Accessed through getModule().\n    __publicField(this, \"modules\", []);\n    __publicField(this, \"types\", []);\n    if (version < MIN_VERSION || version > MAX_VERSION)\n      throw new RangeError(\"Version value out of range\");\n    if (msk < -1 || msk > 7)\n      throw new RangeError(\"Mask value out of range\");\n    this.size = version * 4 + 17;\n    const row = Array.from({ length: this.size }, () => false);\n    for (let i = 0; i < this.size; i++) {\n      this.modules.push(row.slice());\n      this.types.push(row.map(() => 0));\n    }\n    this.drawFunctionPatterns();\n    const allCodewords = this.addEccAndInterleave(dataCodewords);\n    this.drawCodewords(allCodewords);\n    if (msk === -1) {\n      let minPenalty = 1e9;\n      for (let i = 0; i < 8; i++) {\n        this.applyMask(i);\n        this.drawFormatBits(i);\n        const penalty = this.getPenaltyScore();\n        if (penalty < minPenalty) {\n          msk = i;\n          minPenalty = penalty;\n        }\n        this.applyMask(i);\n      }\n    }\n    this.mask = msk;\n    this.applyMask(msk);\n    this.drawFormatBits(msk);\n  }\n  /* -- Accessor methods -- */\n  // Returns the color of the module (pixel) at the given coordinates, which is false\n  // for light or true for dark. The top left corner has the coordinates (x=0, y=0).\n  // If the given coordinates are out of bounds, then false (light) is returned.\n  getModule(x, y) {\n    return x >= 0 && x < this.size && y >= 0 && y < this.size && this.modules[y][x];\n  }\n  /* -- Private helper methods for constructor: Drawing function modules -- */\n  // Reads this object's version field, and draws and marks all function modules.\n  drawFunctionPatterns() {\n    for (let i = 0; i < this.size; i++) {\n      this.setFunctionModule(6, i, i % 2 === 0, QrCodeDataType.Timing);\n      this.setFunctionModule(i, 6, i % 2 === 0, QrCodeDataType.Timing);\n    }\n    this.drawFinderPattern(3, 3);\n    this.drawFinderPattern(this.size - 4, 3);\n    this.drawFinderPattern(3, this.size - 4);\n    const alignPatPos = this.getAlignmentPatternPositions();\n    const numAlign = alignPatPos.length;\n    for (let i = 0; i < numAlign; i++) {\n      for (let j = 0; j < numAlign; j++) {\n        if (!(i === 0 && j === 0 || i === 0 && j === numAlign - 1 || i === numAlign - 1 && j === 0))\n          this.drawAlignmentPattern(alignPatPos[i], alignPatPos[j]);\n      }\n    }\n    this.drawFormatBits(0);\n    this.drawVersion();\n  }\n  // Draws two copies of the format bits (with its own error correction code)\n  // based on the given mask and this object's error correction level field.\n  drawFormatBits(mask) {\n    const data = this.ecc[1] << 3 | mask;\n    let rem = data;\n    for (let i = 0; i < 10; i++)\n      rem = rem << 1 ^ (rem >>> 9) * 1335;\n    const bits = (data << 10 | rem) ^ 21522;\n    for (let i = 0; i <= 5; i++)\n      this.setFunctionModule(8, i, getBit(bits, i));\n    this.setFunctionModule(8, 7, getBit(bits, 6));\n    this.setFunctionModule(8, 8, getBit(bits, 7));\n    this.setFunctionModule(7, 8, getBit(bits, 8));\n    for (let i = 9; i < 15; i++)\n      this.setFunctionModule(14 - i, 8, getBit(bits, i));\n    for (let i = 0; i < 8; i++)\n      this.setFunctionModule(this.size - 1 - i, 8, getBit(bits, i));\n    for (let i = 8; i < 15; i++)\n      this.setFunctionModule(8, this.size - 15 + i, getBit(bits, i));\n    this.setFunctionModule(8, this.size - 8, true);\n  }\n  // Draws two copies of the version bits (with its own error correction code),\n  // based on this object's version field, iff 7 <= version <= 40.\n  drawVersion() {\n    if (this.version < 7)\n      return;\n    let rem = this.version;\n    for (let i = 0; i < 12; i++)\n      rem = rem << 1 ^ (rem >>> 11) * 7973;\n    const bits = this.version << 12 | rem;\n    for (let i = 0; i < 18; i++) {\n      const color = getBit(bits, i);\n      const a = this.size - 11 + i % 3;\n      const b = Math.floor(i / 3);\n      this.setFunctionModule(a, b, color);\n      this.setFunctionModule(b, a, color);\n    }\n  }\n  // Draws a 9*9 finder pattern including the border separator,\n  // with the center module at (x, y). Modules can be out of bounds.\n  drawFinderPattern(x, y) {\n    for (let dy = -4; dy <= 4; dy++) {\n      for (let dx = -4; dx <= 4; dx++) {\n        const dist = Math.max(Math.abs(dx), Math.abs(dy));\n        const xx = x + dx;\n        const yy = y + dy;\n        if (xx >= 0 && xx < this.size && yy >= 0 && yy < this.size)\n          this.setFunctionModule(xx, yy, dist !== 2 && dist !== 4, QrCodeDataType.Position);\n      }\n    }\n  }\n  // Draws a 5*5 alignment pattern, with the center module\n  // at (x, y). All modules must be in bounds.\n  drawAlignmentPattern(x, y) {\n    for (let dy = -2; dy <= 2; dy++) {\n      for (let dx = -2; dx <= 2; dx++) {\n        this.setFunctionModule(\n          x + dx,\n          y + dy,\n          Math.max(Math.abs(dx), Math.abs(dy)) !== 1,\n          QrCodeDataType.Alignment\n        );\n      }\n    }\n  }\n  // Sets the color of a module and marks it as a function module.\n  // Only used by the constructor. Coordinates must be in bounds.\n  setFunctionModule(x, y, isDark, type = QrCodeDataType.Function) {\n    this.modules[y][x] = isDark;\n    this.types[y][x] = type;\n  }\n  /* -- Private helper methods for constructor: Codewords and masking -- */\n  // Returns a new byte string representing the given data with the appropriate error correction\n  // codewords appended to it, based on this object's version and error correction level.\n  addEccAndInterleave(data) {\n    const ver = this.version;\n    const ecl = this.ecc;\n    if (data.length !== getNumDataCodewords(ver, ecl))\n      throw new RangeError(\"Invalid argument\");\n    const numBlocks = NUM_ERROR_CORRECTION_BLOCKS[ecl[0]][ver];\n    const blockEccLen = ECC_CODEWORDS_PER_BLOCK[ecl[0]][ver];\n    const rawCodewords = Math.floor(getNumRawDataModules(ver) / 8);\n    const numShortBlocks = numBlocks - rawCodewords % numBlocks;\n    const shortBlockLen = Math.floor(rawCodewords / numBlocks);\n    const blocks = [];\n    const rsDiv = reedSolomonComputeDivisor(blockEccLen);\n    for (let i = 0, k = 0; i < numBlocks; i++) {\n      const dat = data.slice(k, k + shortBlockLen - blockEccLen + (i < numShortBlocks ? 0 : 1));\n      k += dat.length;\n      const ecc = reedSolomonComputeRemainder(dat, rsDiv);\n      if (i < numShortBlocks)\n        dat.push(0);\n      blocks.push(dat.concat(ecc));\n    }\n    const result = [];\n    for (let i = 0; i < blocks[0].length; i++) {\n      blocks.forEach((block, j) => {\n        if (i !== shortBlockLen - blockEccLen || j >= numShortBlocks)\n          result.push(block[i]);\n      });\n    }\n    return result;\n  }\n  // Draws the given sequence of 8-bit codewords (data and error correction) onto the entire\n  // data area of this QR Code. Function modules need to be marked off before this is called.\n  drawCodewords(data) {\n    if (data.length !== Math.floor(getNumRawDataModules(this.version) / 8))\n      throw new RangeError(\"Invalid argument\");\n    let i = 0;\n    for (let right = this.size - 1; right >= 1; right -= 2) {\n      if (right === 6)\n        right = 5;\n      for (let vert = 0; vert < this.size; vert++) {\n        for (let j = 0; j < 2; j++) {\n          const x = right - j;\n          const upward = (right + 1 & 2) === 0;\n          const y = upward ? this.size - 1 - vert : vert;\n          if (!this.types[y][x] && i < data.length * 8) {\n            this.modules[y][x] = getBit(data[i >>> 3], 7 - (i & 7));\n            i++;\n          }\n        }\n      }\n    }\n  }\n  // XORs the codeword modules in this QR Code with the given mask pattern.\n  // The function modules must be marked and the codeword bits must be drawn\n  // before masking. Due to the arithmetic of XOR, calling applyMask() with\n  // the same mask value a second time will undo the mask. A final well-formed\n  // QR Code needs exactly one (not zero, two, etc.) mask applied.\n  applyMask(mask) {\n    if (mask < 0 || mask > 7)\n      throw new RangeError(\"Mask value out of range\");\n    for (let y = 0; y < this.size; y++) {\n      for (let x = 0; x < this.size; x++) {\n        let invert;\n        switch (mask) {\n          case 0:\n            invert = (x + y) % 2 === 0;\n            break;\n          case 1:\n            invert = y % 2 === 0;\n            break;\n          case 2:\n            invert = x % 3 === 0;\n            break;\n          case 3:\n            invert = (x + y) % 3 === 0;\n            break;\n          case 4:\n            invert = (Math.floor(x / 3) + Math.floor(y / 2)) % 2 === 0;\n            break;\n          case 5:\n            invert = x * y % 2 + x * y % 3 === 0;\n            break;\n          case 6:\n            invert = (x * y % 2 + x * y % 3) % 2 === 0;\n            break;\n          case 7:\n            invert = ((x + y) % 2 + x * y % 3) % 2 === 0;\n            break;\n          default:\n            throw new Error(\"Unreachable\");\n        }\n        if (!this.types[y][x] && invert)\n          this.modules[y][x] = !this.modules[y][x];\n      }\n    }\n  }\n  // Calculates and returns the penalty score based on state of this QR Code's current modules.\n  // This is used by the automatic mask choice algorithm to find the mask pattern that yields the lowest score.\n  getPenaltyScore() {\n    let result = 0;\n    for (let y = 0; y < this.size; y++) {\n      let runColor = false;\n      let runX = 0;\n      const runHistory = [0, 0, 0, 0, 0, 0, 0];\n      for (let x = 0; x < this.size; x++) {\n        if (this.modules[y][x] === runColor) {\n          runX++;\n          if (runX === 5)\n            result += PENALTY_N1;\n          else if (runX > 5)\n            result++;\n        } else {\n          this.finderPenaltyAddHistory(runX, runHistory);\n          if (!runColor)\n            result += this.finderPenaltyCountPatterns(runHistory) * PENALTY_N3;\n          runColor = this.modules[y][x];\n          runX = 1;\n        }\n      }\n      result += this.finderPenaltyTerminateAndCount(runColor, runX, runHistory) * PENALTY_N3;\n    }\n    for (let x = 0; x < this.size; x++) {\n      let runColor = false;\n      let runY = 0;\n      const runHistory = [0, 0, 0, 0, 0, 0, 0];\n      for (let y = 0; y < this.size; y++) {\n        if (this.modules[y][x] === runColor) {\n          runY++;\n          if (runY === 5)\n            result += PENALTY_N1;\n          else if (runY > 5)\n            result++;\n        } else {\n          this.finderPenaltyAddHistory(runY, runHistory);\n          if (!runColor)\n            result += this.finderPenaltyCountPatterns(runHistory) * PENALTY_N3;\n          runColor = this.modules[y][x];\n          runY = 1;\n        }\n      }\n      result += this.finderPenaltyTerminateAndCount(runColor, runY, runHistory) * PENALTY_N3;\n    }\n    for (let y = 0; y < this.size - 1; y++) {\n      for (let x = 0; x < this.size - 1; x++) {\n        const color = this.modules[y][x];\n        if (color === this.modules[y][x + 1] && color === this.modules[y + 1][x] && color === this.modules[y + 1][x + 1])\n          result += PENALTY_N2;\n      }\n    }\n    let dark = 0;\n    for (const row of this.modules)\n      dark = row.reduce((sum, color) => sum + (color ? 1 : 0), dark);\n    const total = this.size * this.size;\n    const k = Math.ceil(Math.abs(dark * 20 - total * 10) / total) - 1;\n    result += k * PENALTY_N4;\n    return result;\n  }\n  /* -- Private helper functions -- */\n  // Returns an ascending list of positions of alignment patterns for this version number.\n  // Each position is in the range [0,177), and are used on both the x and y axes.\n  // This could be implemented as lookup table of 40 variable-length lists of integers.\n  getAlignmentPatternPositions() {\n    if (this.version === 1) {\n      return [];\n    } else {\n      const numAlign = Math.floor(this.version / 7) + 2;\n      const step = this.version === 32 ? 26 : Math.ceil((this.version * 4 + 4) / (numAlign * 2 - 2)) * 2;\n      const result = [6];\n      for (let pos = this.size - 7; result.length < numAlign; pos -= step)\n        result.splice(1, 0, pos);\n      return result;\n    }\n  }\n  // Can only be called immediately after a light run is added, and\n  // returns either 0, 1, or 2. A helper function for getPenaltyScore().\n  finderPenaltyCountPatterns(runHistory) {\n    const n = runHistory[1];\n    const core = n > 0 && runHistory[2] === n && runHistory[3] === n * 3 && runHistory[4] === n && runHistory[5] === n;\n    return (core && runHistory[0] >= n * 4 && runHistory[6] >= n ? 1 : 0) + (core && runHistory[6] >= n * 4 && runHistory[0] >= n ? 1 : 0);\n  }\n  // Must be called at the end of a line (row or column) of modules. A helper function for getPenaltyScore().\n  finderPenaltyTerminateAndCount(currentRunColor, currentRunLength, runHistory) {\n    if (currentRunColor) {\n      this.finderPenaltyAddHistory(currentRunLength, runHistory);\n      currentRunLength = 0;\n    }\n    currentRunLength += this.size;\n    this.finderPenaltyAddHistory(currentRunLength, runHistory);\n    return this.finderPenaltyCountPatterns(runHistory);\n  }\n  // Pushes the given value to the front and drops the last value. A helper function for getPenaltyScore().\n  finderPenaltyAddHistory(currentRunLength, runHistory) {\n    if (runHistory[0] === 0)\n      currentRunLength += this.size;\n    runHistory.pop();\n    runHistory.unshift(currentRunLength);\n  }\n}\nfunction appendBits(val, len, bb) {\n  if (len < 0 || len > 31 || val >>> len !== 0)\n    throw new RangeError(\"Value out of range\");\n  for (let i = len - 1; i >= 0; i--)\n    bb.push(val >>> i & 1);\n}\nfunction getBit(x, i) {\n  return (x >>> i & 1) !== 0;\n}\nclass QrSegment {\n  // Creates a new QR Code segment with the given attributes and data.\n  // The character count (numChars) must agree with the mode and the bit buffer length,\n  // but the constraint isn't checked. The given bit buffer is cloned and stored.\n  constructor(mode, numChars, bitData) {\n    this.mode = mode;\n    this.numChars = numChars;\n    this.bitData = bitData;\n    if (numChars < 0)\n      throw new RangeError(\"Invalid argument\");\n    this.bitData = bitData.slice();\n  }\n  /* -- Methods -- */\n  // Returns a new copy of the data bits of this segment.\n  getData() {\n    return this.bitData.slice();\n  }\n}\nconst MODE_NUMERIC = [1, 10, 12, 14];\nconst MODE_ALPHANUMERIC = [2, 9, 11, 13];\nconst MODE_BYTE = [4, 8, 16, 16];\nfunction numCharCountBits(mode, ver) {\n  return mode[Math.floor((ver + 7) / 17) + 1];\n}\nfunction makeBytes(data) {\n  const bb = [];\n  for (const b of data)\n    appendBits(b, 8, bb);\n  return new QrSegment(MODE_BYTE, data.length, bb);\n}\nfunction makeNumeric(digits) {\n  if (!isNumeric(digits))\n    throw new RangeError(\"String contains non-numeric characters\");\n  const bb = [];\n  for (let i = 0; i < digits.length; ) {\n    const n = Math.min(digits.length - i, 3);\n    appendBits(Number.parseInt(digits.substring(i, i + n), 10), n * 3 + 1, bb);\n    i += n;\n  }\n  return new QrSegment(MODE_NUMERIC, digits.length, bb);\n}\nfunction makeAlphanumeric(text) {\n  if (!isAlphanumeric(text))\n    throw new RangeError(\"String contains unencodable characters in alphanumeric mode\");\n  const bb = [];\n  let i;\n  for (i = 0; i + 2 <= text.length; i += 2) {\n    let temp = ALPHANUMERIC_CHARSET.indexOf(text.charAt(i)) * 45;\n    temp += ALPHANUMERIC_CHARSET.indexOf(text.charAt(i + 1));\n    appendBits(temp, 11, bb);\n  }\n  if (i < text.length)\n    appendBits(ALPHANUMERIC_CHARSET.indexOf(text.charAt(i)), 6, bb);\n  return new QrSegment(MODE_ALPHANUMERIC, text.length, bb);\n}\nfunction makeSegments(text) {\n  if (text === \"\")\n    return [];\n  else if (isNumeric(text))\n    return [makeNumeric(text)];\n  else if (isAlphanumeric(text))\n    return [makeAlphanumeric(text)];\n  else\n    return [makeBytes(toUtf8ByteArray(text))];\n}\nfunction isNumeric(text) {\n  return NUMERIC_REGEX.test(text);\n}\nfunction isAlphanumeric(text) {\n  return ALPHANUMERIC_REGEX.test(text);\n}\nfunction getTotalBits(segs, version) {\n  let result = 0;\n  for (const seg of segs) {\n    const ccbits = numCharCountBits(seg.mode, version);\n    if (seg.numChars >= 1 << ccbits)\n      return Number.POSITIVE_INFINITY;\n    result += 4 + ccbits + seg.bitData.length;\n  }\n  return result;\n}\nfunction toUtf8ByteArray(str) {\n  str = encodeURI(str);\n  const result = [];\n  for (let i = 0; i < str.length; i++) {\n    if (str.charAt(i) !== \"%\") {\n      result.push(str.charCodeAt(i));\n    } else {\n      result.push(Number.parseInt(str.substring(i + 1, i + 3), 16));\n      i += 2;\n    }\n  }\n  return result;\n}\nfunction getNumRawDataModules(ver) {\n  if (ver < MIN_VERSION || ver > MAX_VERSION)\n    throw new RangeError(\"Version number out of range\");\n  let result = (16 * ver + 128) * ver + 64;\n  if (ver >= 2) {\n    const numAlign = Math.floor(ver / 7) + 2;\n    result -= (25 * numAlign - 10) * numAlign - 55;\n    if (ver >= 7)\n      result -= 36;\n  }\n  return result;\n}\nfunction getNumDataCodewords(ver, ecl) {\n  return Math.floor(getNumRawDataModules(ver) / 8) - ECC_CODEWORDS_PER_BLOCK[ecl[0]][ver] * NUM_ERROR_CORRECTION_BLOCKS[ecl[0]][ver];\n}\nfunction reedSolomonComputeDivisor(degree) {\n  if (degree < 1 || degree > 255)\n    throw new RangeError(\"Degree out of range\");\n  const result = [];\n  for (let i = 0; i < degree - 1; i++)\n    result.push(0);\n  result.push(1);\n  let root = 1;\n  for (let i = 0; i < degree; i++) {\n    for (let j = 0; j < result.length; j++) {\n      result[j] = reedSolomonMultiply(result[j], root);\n      if (j + 1 < result.length)\n        result[j] ^= result[j + 1];\n    }\n    root = reedSolomonMultiply(root, 2);\n  }\n  return result;\n}\nfunction reedSolomonComputeRemainder(data, divisor) {\n  const result = divisor.map((_) => 0);\n  for (const b of data) {\n    const factor = b ^ result.shift();\n    result.push(0);\n    divisor.forEach((coef, i) => result[i] ^= reedSolomonMultiply(coef, factor));\n  }\n  return result;\n}\nfunction reedSolomonMultiply(x, y) {\n  if (x >>> 8 !== 0 || y >>> 8 !== 0)\n    throw new RangeError(\"Byte out of range\");\n  let z = 0;\n  for (let i = 7; i >= 0; i--) {\n    z = z << 1 ^ (z >>> 7) * 285;\n    z ^= (y >>> i & 1) * x;\n  }\n  return z;\n}\nfunction encodeSegments(segs, ecl, minVersion = 1, maxVersion = 40, mask = -1, boostEcl = true) {\n  if (!(MIN_VERSION <= minVersion && minVersion <= maxVersion && maxVersion <= MAX_VERSION) || mask < -1 || mask > 7)\n    throw new RangeError(\"Invalid value\");\n  let version;\n  let dataUsedBits;\n  for (version = minVersion; ; version++) {\n    const dataCapacityBits2 = getNumDataCodewords(version, ecl) * 8;\n    const usedBits = getTotalBits(segs, version);\n    if (usedBits <= dataCapacityBits2) {\n      dataUsedBits = usedBits;\n      break;\n    }\n    if (version >= maxVersion)\n      throw new RangeError(\"Data too long\");\n  }\n  for (const newEcl of [MEDIUM, QUARTILE, HIGH]) {\n    if (boostEcl && dataUsedBits <= getNumDataCodewords(version, newEcl) * 8)\n      ecl = newEcl;\n  }\n  const bb = [];\n  for (const seg of segs) {\n    appendBits(seg.mode[0], 4, bb);\n    appendBits(seg.numChars, numCharCountBits(seg.mode, version), bb);\n    for (const b of seg.getData())\n      bb.push(b);\n  }\n  const dataCapacityBits = getNumDataCodewords(version, ecl) * 8;\n  appendBits(0, Math.min(4, dataCapacityBits - bb.length), bb);\n  appendBits(0, (8 - bb.length % 8) % 8, bb);\n  for (let padByte = 236; bb.length < dataCapacityBits; padByte ^= 236 ^ 17)\n    appendBits(padByte, 8, bb);\n  const dataCodewords = Array.from({ length: Math.ceil(bb.length / 8) }, () => 0);\n  bb.forEach((b, i) => dataCodewords[i >>> 3] |= b << 7 - (i & 7));\n  return new QrCode(version, ecl, dataCodewords, mask);\n}\n\nfunction encode(data, options) {\n  const {\n    ecc = \"L\",\n    boostEcc = false,\n    minVersion = 1,\n    maxVersion = 40,\n    maskPattern = -1,\n    border = 1\n  } = options || {};\n  const segment = typeof data === \"string\" ? makeSegments(data) : Array.isArray(data) ? [makeBytes(data)] : void 0;\n  if (!segment)\n    throw new Error(`uqr only supports encoding string and binary data, but got: ${typeof data}`);\n  const qr = encodeSegments(\n    segment,\n    EccMap[ecc],\n    minVersion,\n    maxVersion,\n    maskPattern,\n    boostEcc\n  );\n  const result = addBorder({\n    version: qr.version,\n    maskPattern: qr.mask,\n    size: qr.size,\n    data: qr.modules,\n    types: qr.types\n  }, border);\n  if (options?.invert)\n    result.data = result.data.map((row) => row.map((mod) => !mod));\n  options?.onEncoded?.(result);\n  return result;\n}\nfunction addBorder(input, border = 1) {\n  if (!border)\n    return input;\n  const { size } = input;\n  const newSize = size + border * 2;\n  input.size = newSize;\n  input.data.forEach((row) => {\n    for (let i = 0; i < border; i++) {\n      row.unshift(false);\n      row.push(false);\n    }\n  });\n  for (let i = 0; i < border; i++) {\n    input.data.unshift(Array.from({ length: newSize }, (_) => false));\n    input.data.push(Array.from({ length: newSize }, (_) => false));\n  }\n  const b = QrCodeDataType.Border;\n  input.types.forEach((row) => {\n    for (let i = 0; i < border; i++) {\n      row.unshift(b);\n      row.push(b);\n    }\n  });\n  for (let i = 0; i < border; i++) {\n    input.types.unshift(Array.from({ length: newSize }, (_) => b));\n    input.types.push(Array.from({ length: newSize }, (_) => b));\n  }\n  return input;\n}\nfunction getDataAt(data, x, y, defaults = false) {\n  if (x < 0 || y < 0 || x >= data.length || y >= data.length)\n    return defaults;\n  return data[y][x];\n}\n\nfunction renderUnicode(data, options = {}) {\n  const {\n    whiteChar = \"\\u2588\",\n    blackChar = \"\\u2591\"\n  } = options;\n  const result = encode(data, options);\n  return result.data.map((row) => {\n    return row.map((mod) => mod ? blackChar : whiteChar).join(\"\");\n  }).join(\"\\n\");\n}\nfunction renderANSI(data, options = {}) {\n  return renderUnicode(data, {\n    ...options,\n    blackChar: \"\\x1B[40m\\u3000\\x1B[0m\",\n    whiteChar: \"\\x1B[47m\\u3000\\x1B[0m\"\n  });\n}\nfunction renderUnicodeCompact(data, options = {}) {\n  const platte = {\n    WHITE_ALL: \"\\u2588\",\n    WHITE_BLACK: \"\\u2580\",\n    BLACK_WHITE: \"\\u2584\",\n    BLACK_ALL: \" \"\n  };\n  const result = encode(data, options);\n  const WHITE = false;\n  const BLACK = true;\n  const at = (x, y) => getDataAt(result.data, x, y, true);\n  const lines = [];\n  let line = \"\";\n  for (let row = 0; row < result.size; row += 2) {\n    for (let col = 0; col < result.size; col++) {\n      if (at(col, row) === WHITE && at(col, row + 1) === WHITE)\n        line += platte.WHITE_ALL;\n      else if (at(col, row) === WHITE && at(col, row + 1) === BLACK)\n        line += platte.WHITE_BLACK;\n      else if (at(col, row) === BLACK && at(col, row + 1) === WHITE)\n        line += platte.BLACK_WHITE;\n      else\n        line += platte.BLACK_ALL;\n    }\n    lines.push(line);\n    line = \"\";\n  }\n  return lines.join(\"\\n\");\n}\n\nfunction renderSVG(data, options = {}) {\n  const result = encode(data, options);\n  const {\n    pixelSize = 10,\n    whiteColor = \"white\",\n    blackColor = \"black\"\n  } = options;\n  const height = result.size * pixelSize;\n  const width = result.size * pixelSize;\n  let svg = `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 ${width} ${height}\">`;\n  const pathes = [];\n  for (let row = 0; row < result.size; row++) {\n    for (let col = 0; col < result.size; col++) {\n      const x = col * pixelSize;\n      const y = row * pixelSize;\n      if (result.data[row][col])\n        pathes.push(`M${x},${y}h${pixelSize}v${pixelSize}h-${pixelSize}z`);\n    }\n  }\n  svg += `<rect fill=\"${whiteColor}\" width=\"${width}\" height=\"${height}\"/>`;\n  svg += `<path fill=\"${blackColor}\" d=\"${pathes.join(\"\")}\"/>`;\n  svg += \"</svg>\";\n  return svg;\n}\n\nexport { QrCodeDataType, encode, renderANSI, renderSVG, renderUnicode, renderUnicodeCompact };\n",
    "import { template as _$template } from \"solid-js/web\";\nimport { effect as _$effect } from \"solid-js/web\";\nvar _tmpl$ = /*#__PURE__*/_$template(`<div>`);\nimport { parseDom } from \"@h/dom\";\nimport { customElement } from \"solid-element\";\nimport { createSignal, onMount } from \"solid-js\";\nimport { renderSVG } from \"uqr\";\nconst QrCode = props => {\n  const [svg, setSvg] = createSignal(\"\");\n  const width = props.width ?? props.height;\n  const height = props.height ?? props.width;\n  onMount(() => {\n    let svg = renderSVG(props.data, props);\n    if (props.width || props.height) {\n      const svgDom = parseDom(svg);\n      svgDom.setAttribute(\"width\", width.toString());\n      svgDom.setAttribute(\"height\", height.toString());\n      svg = svgDom.outerHTML;\n    }\n    setSvg(svg);\n  });\n  return (() => {\n    var _el$ = _tmpl$();\n    `${width}px` != null ? _el$.style.setProperty(\"width\", `${width}px`) : _el$.style.removeProperty(\"width\");\n    `${height}px` != null ? _el$.style.setProperty(\"height\", `${height}px`) : _el$.style.removeProperty(\"height\");\n    _el$.style.setProperty(\"padding\", \"5px\");\n    _$effect(() => _el$.innerHTML = svg());\n    return _el$;\n  })();\n};\ncustomElement(\"qr-code\", {\n  width: null,\n  height: null,\n  data: \"\",\n  ecc: \"M\",\n  pixelSize: 4\n}, QrCode);"
  ],
  "mappings": "qEAAA,IAAM,EAAS,IAAI,UAEN,EAAW,CAAC,IAA8B,CACtD,OAAO,EAAO,gBAAgB,EAAM,WAAW,EAAE,KAAK,mBCHvD,IAAI,GAAkC,CAAC,IAAoB,CAOzD,OANA,EAAgB,EAAgB,OAAY,IAAM,SAClD,EAAgB,EAAgB,KAAU,GAAK,OAC/C,EAAgB,EAAgB,SAAc,GAAK,WACnD,EAAgB,EAAgB,SAAc,GAAK,WACnD,EAAgB,EAAgB,OAAY,GAAK,SACjD,EAAgB,EAAgB,UAAe,GAAK,YAC7C,IACN,GAAkB,CAAC,CAAC,EAEnB,EAAY,OAAO,eACnB,EAAkB,CAAC,EAAK,EAAK,KAAU,KAAO,GAAM,EAAU,EAAK,EAAK,CAAE,WAAY,GAAM,aAAc,GAAM,SAAU,GAAM,OAAM,CAAC,EAAI,EAAI,GAAO,EACtJ,EAAgB,CAAC,EAAK,EAAK,IAAU,CAEvC,OADA,EAAgB,EAAK,OAAO,IAAQ,SAAW,EAAM,GAAK,EAAK,CAAK,EAC7D,GAEH,EAAM,CAAC,EAAG,CAAC,EACX,EAAS,CAAC,EAAG,CAAC,EACd,EAAW,CAAC,EAAG,CAAC,EAChB,EAAO,CAAC,EAAG,CAAC,EACZ,EAAS,CACb,EAAG,EACH,EAAG,EACH,EAAG,EACH,EAAG,CACL,EACM,EAAgB,WAChB,EAAqB,wBACrB,EAAuB,gDACvB,EAAc,EACd,EAAc,GACd,EAAa,EACb,EAAa,EACb,EAAa,GACb,EAAa,GACb,EAA0B,CAG9B,CAAC,GAAI,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAE,EAElK,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAE,EAEnK,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAE,EAEnK,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAE,CAErK,EACM,EAA8B,CAGlC,CAAC,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAE,EAE5I,CAAC,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAE,EAErJ,CAAC,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAE,EAExJ,CAAC,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAE,CAE3J,EACA,MAAM,CAAO,CAMX,WAAW,CAAC,EAAS,EAAK,EAAe,EAAK,CAe5C,GAdA,KAAK,QAAU,EACf,KAAK,IAAM,EAIX,EAAc,KAAM,MAAM,EAI1B,EAAc,KAAM,MAAM,EAG1B,EAAc,KAAM,UAAW,CAAC,CAAC,EACjC,EAAc,KAAM,QAAS,CAAC,CAAC,EAC3B,EAAU,GAAe,EAAU,EACrC,MAAM,IAAI,WAAW,4BAA4B,EACnD,GAAI,EAAM,IAAM,EAAM,EACpB,MAAM,IAAI,WAAW,yBAAyB,EAChD,KAAK,KAAO,EAAU,EAAI,GAC1B,IAAM,EAAM,MAAM,KAAK,CAAE,OAAQ,KAAK,IAAK,EAAG,IAAM,EAAK,EACzD,QAAS,EAAI,EAAG,EAAI,KAAK,KAAM,IAC7B,KAAK,QAAQ,KAAK,EAAI,MAAM,CAAC,EAC7B,KAAK,MAAM,KAAK,EAAI,IAAI,IAAM,CAAC,CAAC,EAElC,KAAK,qBAAqB,EAC1B,IAAM,EAAe,KAAK,oBAAoB,CAAa,EAE3D,GADA,KAAK,cAAc,CAAY,EAC3B,IAAQ,GAAI,CACd,IAAI,EAAa,IACjB,QAAS,EAAI,EAAG,EAAI,EAAG,IAAK,CAC1B,KAAK,UAAU,CAAC,EAChB,KAAK,eAAe,CAAC,EACrB,IAAM,EAAU,KAAK,gBAAgB,EACrC,GAAI,EAAU,EACZ,EAAM,EACN,EAAa,EAEf,KAAK,UAAU,CAAC,GAGpB,KAAK,KAAO,EACZ,KAAK,UAAU,CAAG,EAClB,KAAK,eAAe,CAAG,EAMzB,SAAS,CAAC,EAAG,EAAG,CACd,OAAO,GAAK,GAAK,EAAI,KAAK,MAAQ,GAAK,GAAK,EAAI,KAAK,MAAQ,KAAK,QAAQ,GAAG,GAI/E,oBAAoB,EAAG,CACrB,QAAS,EAAI,EAAG,EAAI,KAAK,KAAM,IAC7B,KAAK,kBAAkB,EAAG,EAAG,EAAI,IAAM,EAAG,EAAe,MAAM,EAC/D,KAAK,kBAAkB,EAAG,EAAG,EAAI,IAAM,EAAG,EAAe,MAAM,EAEjE,KAAK,kBAAkB,EAAG,CAAC,EAC3B,KAAK,kBAAkB,KAAK,KAAO,EAAG,CAAC,EACvC,KAAK,kBAAkB,EAAG,KAAK,KAAO,CAAC,EACvC,IAAM,EAAc,KAAK,6BAA6B,EAChD,EAAW,EAAY,OAC7B,QAAS,EAAI,EAAG,EAAI,EAAU,IAC5B,QAAS,EAAI,EAAG,EAAI,EAAU,IAC5B,KAAM,IAAM,GAAK,IAAM,GAAK,IAAM,GAAK,IAAM,EAAW,GAAK,IAAM,EAAW,GAAK,IAAM,GACvF,KAAK,qBAAqB,EAAY,GAAI,EAAY,EAAE,EAG9D,KAAK,eAAe,CAAC,EACrB,KAAK,YAAY,EAInB,cAAc,CAAC,EAAM,CACnB,IAAM,EAAO,KAAK,IAAI,IAAM,EAAI,EAC5B,EAAM,EACV,QAAS,EAAI,EAAG,EAAI,GAAI,IACtB,EAAM,GAAO,GAAK,IAAQ,GAAK,KACjC,IAAM,GAAQ,GAAQ,GAAK,GAAO,MAClC,QAAS,EAAI,EAAG,GAAK,EAAG,IACtB,KAAK,kBAAkB,EAAG,EAAG,EAAO,EAAM,CAAC,CAAC,EAC9C,KAAK,kBAAkB,EAAG,EAAG,EAAO,EAAM,CAAC,CAAC,EAC5C,KAAK,kBAAkB,EAAG,EAAG,EAAO,EAAM,CAAC,CAAC,EAC5C,KAAK,kBAAkB,EAAG,EAAG,EAAO,EAAM,CAAC,CAAC,EAC5C,QAAS,EAAI,EAAG,EAAI,GAAI,IACtB,KAAK,kBAAkB,GAAK,EAAG,EAAG,EAAO,EAAM,CAAC,CAAC,EACnD,QAAS,EAAI,EAAG,EAAI,EAAG,IACrB,KAAK,kBAAkB,KAAK,KAAO,EAAI,EAAG,EAAG,EAAO,EAAM,CAAC,CAAC,EAC9D,QAAS,EAAI,EAAG,EAAI,GAAI,IACtB,KAAK,kBAAkB,EAAG,KAAK,KAAO,GAAK,EAAG,EAAO,EAAM,CAAC,CAAC,EAC/D,KAAK,kBAAkB,EAAG,KAAK,KAAO,EAAG,EAAI,EAI/C,WAAW,EAAG,CACZ,GAAI,KAAK,QAAU,EACjB,OACF,IAAI,EAAM,KAAK,QACf,QAAS,EAAI,EAAG,EAAI,GAAI,IACtB,EAAM,GAAO,GAAK,IAAQ,IAAM,KAClC,IAAM,EAAO,KAAK,SAAW,GAAK,EAClC,QAAS,EAAI,EAAG,EAAI,GAAI,IAAK,CAC3B,IAAM,EAAQ,EAAO,EAAM,CAAC,EACtB,EAAI,KAAK,KAAO,GAAK,EAAI,EACzB,EAAI,KAAK,MAAM,EAAI,CAAC,EAC1B,KAAK,kBAAkB,EAAG,EAAG,CAAK,EAClC,KAAK,kBAAkB,EAAG,EAAG,CAAK,GAKtC,iBAAiB,CAAC,EAAG,EAAG,CACtB,QAAS,EAAK,GAAI,GAAM,EAAG,IACzB,QAAS,EAAK,GAAI,GAAM,EAAG,IAAM,CAC/B,IAAM,EAAO,KAAK,IAAI,KAAK,IAAI,CAAE,EAAG,KAAK,IAAI,CAAE,CAAC,EAC1C,EAAK,EAAI,EACT,EAAK,EAAI,EACf,GAAI,GAAM,GAAK,EAAK,KAAK,MAAQ,GAAM,GAAK,EAAK,KAAK,KACpD,KAAK,kBAAkB,EAAI,EAAI,IAAS,GAAK,IAAS,EAAG,EAAe,QAAQ,GAMxF,oBAAoB,CAAC,EAAG,EAAG,CACzB,QAAS,EAAK,GAAI,GAAM,EAAG,IACzB,QAAS,EAAK,GAAI,GAAM,EAAG,IACzB,KAAK,kBACH,EAAI,EACJ,EAAI,EACJ,KAAK,IAAI,KAAK,IAAI,CAAE,EAAG,KAAK,IAAI,CAAE,CAAC,IAAM,EACzC,EAAe,SACjB,EAMN,iBAAiB,CAAC,EAAG,EAAG,EAAQ,EAAO,EAAe,SAAU,CAC9D,KAAK,QAAQ,GAAG,GAAK,EACrB,KAAK,MAAM,GAAG,GAAK,EAKrB,mBAAmB,CAAC,EAAM,CACxB,IAAM,EAAM,KAAK,QACX,EAAM,KAAK,IACjB,GAAI,EAAK,SAAW,EAAoB,EAAK,CAAG,EAC9C,MAAM,IAAI,WAAW,kBAAkB,EACzC,IAAM,EAAY,EAA4B,EAAI,IAAI,GAChD,EAAc,EAAwB,EAAI,IAAI,GAC9C,EAAe,KAAK,MAAM,EAAqB,CAAG,EAAI,CAAC,EACvD,EAAiB,EAAY,EAAe,EAC5C,EAAgB,KAAK,MAAM,EAAe,CAAS,EACnD,EAAS,CAAC,EACV,EAAQ,GAA0B,CAAW,EACnD,QAAS,EAAI,EAAG,EAAI,EAAG,EAAI,EAAW,IAAK,CACzC,IAAM,EAAM,EAAK,MAAM,EAAG,EAAI,EAAgB,GAAe,EAAI,EAAiB,EAAI,EAAE,EACxF,GAAK,EAAI,OACT,IAAM,EAAM,GAA4B,EAAK,CAAK,EAClD,GAAI,EAAI,EACN,EAAI,KAAK,CAAC,EACZ,EAAO,KAAK,EAAI,OAAO,CAAG,CAAC,EAE7B,IAAM,EAAS,CAAC,EAChB,QAAS,EAAI,EAAG,EAAI,EAAO,GAAG,OAAQ,IACpC,EAAO,QAAQ,CAAC,EAAO,IAAM,CAC3B,GAAI,IAAM,EAAgB,GAAe,GAAK,EAC5C,EAAO,KAAK,EAAM,EAAE,EACvB,EAEH,OAAO,EAIT,aAAa,CAAC,EAAM,CAClB,GAAI,EAAK,SAAW,KAAK,MAAM,EAAqB,KAAK,OAAO,EAAI,CAAC,EACnE,MAAM,IAAI,WAAW,kBAAkB,EACzC,IAAI,EAAI,EACR,QAAS,EAAQ,KAAK,KAAO,EAAG,GAAS,EAAG,GAAS,EAAG,CACtD,GAAI,IAAU,EACZ,EAAQ,EACV,QAAS,EAAO,EAAG,EAAO,KAAK,KAAM,IACnC,QAAS,EAAI,EAAG,EAAI,EAAG,IAAK,CAC1B,IAAM,EAAI,EAAQ,EAEZ,GADU,EAAQ,EAAI,KAAO,EAChB,KAAK,KAAO,EAAI,EAAO,EAC1C,IAAK,KAAK,MAAM,GAAG,IAAM,EAAI,EAAK,OAAS,EACzC,KAAK,QAAQ,GAAG,GAAK,EAAO,EAAK,IAAM,GAAI,GAAK,EAAI,EAAE,EACtD,MAWV,SAAS,CAAC,EAAM,CACd,GAAI,EAAO,GAAK,EAAO,EACrB,MAAM,IAAI,WAAW,yBAAyB,EAChD,QAAS,EAAI,EAAG,EAAI,KAAK,KAAM,IAC7B,QAAS,EAAI,EAAG,EAAI,KAAK,KAAM,IAAK,CAClC,IAAI,EACJ,OAAQ,OACD,GACH,GAAU,EAAI,GAAK,IAAM,EACzB,UACG,GACH,EAAS,EAAI,IAAM,EACnB,UACG,GACH,EAAS,EAAI,IAAM,EACnB,UACG,GACH,GAAU,EAAI,GAAK,IAAM,EACzB,UACG,GACH,GAAU,KAAK,MAAM,EAAI,CAAC,EAAI,KAAK,MAAM,EAAI,CAAC,GAAK,IAAM,EACzD,UACG,GACH,EAAS,EAAI,EAAI,EAAI,EAAI,EAAI,IAAM,EACnC,UACG,GACH,GAAU,EAAI,EAAI,EAAI,EAAI,EAAI,GAAK,IAAM,EACzC,UACG,GACH,IAAW,EAAI,GAAK,EAAI,EAAI,EAAI,GAAK,IAAM,EAC3C,cAEA,MAAM,IAAI,MAAM,aAAa,EAEjC,IAAK,KAAK,MAAM,GAAG,IAAM,EACvB,KAAK,QAAQ,GAAG,IAAM,KAAK,QAAQ,GAAG,IAM9C,eAAe,EAAG,CAChB,IAAI,EAAS,EACb,QAAS,EAAI,EAAG,EAAI,KAAK,KAAM,IAAK,CAClC,IAAI,EAAW,GACX,EAAO,EACL,EAAa,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,CAAC,EACvC,QAAS,EAAI,EAAG,EAAI,KAAK,KAAM,IAC7B,GAAI,KAAK,QAAQ,GAAG,KAAO,GAEzB,GADA,IACI,IAAS,EACX,GAAU,EACP,QAAI,EAAO,EACd,IACG,KAEL,GADA,KAAK,wBAAwB,EAAM,CAAU,GACxC,EACH,GAAU,KAAK,2BAA2B,CAAU,EAAI,EAC1D,EAAW,KAAK,QAAQ,GAAG,GAC3B,EAAO,EAGX,GAAU,KAAK,+BAA+B,EAAU,EAAM,CAAU,EAAI,EAE9E,QAAS,EAAI,EAAG,EAAI,KAAK,KAAM,IAAK,CAClC,IAAI,EAAW,GACX,EAAO,EACL,EAAa,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,CAAC,EACvC,QAAS,EAAI,EAAG,EAAI,KAAK,KAAM,IAC7B,GAAI,KAAK,QAAQ,GAAG,KAAO,GAEzB,GADA,IACI,IAAS,EACX,GAAU,EACP,QAAI,EAAO,EACd,IACG,KAEL,GADA,KAAK,wBAAwB,EAAM,CAAU,GACxC,EACH,GAAU,KAAK,2BAA2B,CAAU,EAAI,EAC1D,EAAW,KAAK,QAAQ,GAAG,GAC3B,EAAO,EAGX,GAAU,KAAK,+BAA+B,EAAU,EAAM,CAAU,EAAI,EAE9E,QAAS,EAAI,EAAG,EAAI,KAAK,KAAO,EAAG,IACjC,QAAS,EAAI,EAAG,EAAI,KAAK,KAAO,EAAG,IAAK,CACtC,IAAM,EAAQ,KAAK,QAAQ,GAAG,GAC9B,GAAI,IAAU,KAAK,QAAQ,GAAG,EAAI,IAAM,IAAU,KAAK,QAAQ,EAAI,GAAG,IAAM,IAAU,KAAK,QAAQ,EAAI,GAAG,EAAI,GAC5G,GAAU,EAGhB,IAAI,EAAO,EACX,QAAW,KAAO,KAAK,QACrB,EAAO,EAAI,OAAO,CAAC,EAAK,IAAU,GAAO,EAAQ,EAAI,GAAI,CAAI,EAC/D,IAAM,EAAQ,KAAK,KAAO,KAAK,KACzB,EAAI,KAAK,KAAK,KAAK,IAAI,EAAO,GAAK,EAAQ,EAAE,EAAI,CAAK,EAAI,EAEhE,OADA,GAAU,EAAI,EACP,EAMT,4BAA4B,EAAG,CAC7B,GAAI,KAAK,UAAY,EACnB,MAAO,CAAC,EACH,KACL,IAAM,EAAW,KAAK,MAAM,KAAK,QAAU,CAAC,EAAI,EAC1C,EAAO,KAAK,UAAY,GAAK,GAAK,KAAK,MAAM,KAAK,QAAU,EAAI,IAAM,EAAW,EAAI,EAAE,EAAI,EAC3F,EAAS,CAAC,CAAC,EACjB,QAAS,EAAM,KAAK,KAAO,EAAG,EAAO,OAAS,EAAU,GAAO,EAC7D,EAAO,OAAO,EAAG,EAAG,CAAG,EACzB,OAAO,GAKX,0BAA0B,CAAC,EAAY,CACrC,IAAM,EAAI,EAAW,GACf,EAAO,EAAI,GAAK,EAAW,KAAO,GAAK,EAAW,KAAO,EAAI,GAAK,EAAW,KAAO,GAAK,EAAW,KAAO,EACjH,OAAQ,GAAQ,EAAW,IAAM,EAAI,GAAK,EAAW,IAAM,EAAI,EAAI,IAAM,GAAQ,EAAW,IAAM,EAAI,GAAK,EAAW,IAAM,EAAI,EAAI,GAGtI,8BAA8B,CAAC,EAAiB,EAAkB,EAAY,CAC5E,GAAI,EACF,KAAK,wBAAwB,EAAkB,CAAU,EACzD,EAAmB,EAIrB,OAFA,GAAoB,KAAK,KACzB,KAAK,wBAAwB,EAAkB,CAAU,EAClD,KAAK,2BAA2B,CAAU,EAGnD,uBAAuB,CAAC,EAAkB,EAAY,CACpD,GAAI,EAAW,KAAO,EACpB,GAAoB,KAAK,KAC3B,EAAW,IAAI,EACf,EAAW,QAAQ,CAAgB,EAEvC,CACA,SAAS,CAAU,CAAC,EAAK,EAAK,EAAI,CAChC,GAAI,EAAM,GAAK,EAAM,IAAM,IAAQ,IAAQ,EACzC,MAAM,IAAI,WAAW,oBAAoB,EAC3C,QAAS,EAAI,EAAM,EAAG,GAAK,EAAG,IAC5B,EAAG,KAAK,IAAQ,EAAI,CAAC,EAEzB,SAAS,CAAM,CAAC,EAAG,EAAG,CACpB,OAAQ,IAAM,EAAI,KAAO,EAE3B,MAAM,CAAU,CAId,WAAW,CAAC,EAAM,EAAU,EAAS,CAInC,GAHA,KAAK,KAAO,EACZ,KAAK,SAAW,EAChB,KAAK,QAAU,EACX,EAAW,EACb,MAAM,IAAI,WAAW,kBAAkB,EACzC,KAAK,QAAU,EAAQ,MAAM,EAI/B,OAAO,EAAG,CACR,OAAO,KAAK,QAAQ,MAAM,EAE9B,CACA,IAAM,GAAe,CAAC,EAAG,GAAI,GAAI,EAAE,EAC7B,GAAoB,CAAC,EAAG,EAAG,GAAI,EAAE,EACjC,GAAY,CAAC,EAAG,EAAG,GAAI,EAAE,EAC/B,SAAS,CAAgB,CAAC,EAAM,EAAK,CACnC,OAAO,EAAK,KAAK,OAAO,EAAM,GAAK,EAAE,EAAI,GAE3C,SAAS,CAAS,CAAC,EAAM,CACvB,IAAM,EAAK,CAAC,EACZ,QAAW,KAAK,EACd,EAAW,EAAG,EAAG,CAAE,EACrB,OAAO,IAAI,EAAU,GAAW,EAAK,OAAQ,CAAE,EAEjD,SAAS,EAAW,CAAC,EAAQ,CAC3B,IAAK,EAAU,CAAM,EACnB,MAAM,IAAI,WAAW,wCAAwC,EAC/D,IAAM,EAAK,CAAC,EACZ,QAAS,EAAI,EAAG,EAAI,EAAO,QAAU,CACnC,IAAM,EAAI,KAAK,IAAI,EAAO,OAAS,EAAG,CAAC,EACvC,EAAW,OAAO,SAAS,EAAO,UAAU,EAAG,EAAI,CAAC,EAAG,EAAE,EAAG,EAAI,EAAI,EAAG,CAAE,EACzE,GAAK,EAEP,OAAO,IAAI,EAAU,GAAc,EAAO,OAAQ,CAAE,EAEtD,SAAS,EAAgB,CAAC,EAAM,CAC9B,IAAK,EAAe,CAAI,EACtB,MAAM,IAAI,WAAW,6DAA6D,EACpF,IAAM,EAAK,CAAC,EACR,EACJ,IAAK,EAAI,EAAG,EAAI,GAAK,EAAK,OAAQ,GAAK,EAAG,CACxC,IAAI,EAAO,EAAqB,QAAQ,EAAK,OAAO,CAAC,CAAC,EAAI,GAC1D,GAAQ,EAAqB,QAAQ,EAAK,OAAO,EAAI,CAAC,CAAC,EACvD,EAAW,EAAM,GAAI,CAAE,EAEzB,GAAI,EAAI,EAAK,OACX,EAAW,EAAqB,QAAQ,EAAK,OAAO,CAAC,CAAC,EAAG,EAAG,CAAE,EAChE,OAAO,IAAI,EAAU,GAAmB,EAAK,OAAQ,CAAE,EAEzD,SAAS,EAAY,CAAC,EAAM,CAC1B,GAAI,IAAS,GACX,MAAO,CAAC,EACL,QAAI,EAAU,CAAI,EACrB,MAAO,CAAC,GAAY,CAAI,CAAC,EACtB,QAAI,EAAe,CAAI,EAC1B,MAAO,CAAC,GAAiB,CAAI,CAAC,EAE9B,WAAO,CAAC,EAAU,GAAgB,CAAI,CAAC,CAAC,EAE5C,SAAS,CAAS,CAAC,EAAM,CACvB,OAAO,EAAc,KAAK,CAAI,EAEhC,SAAS,CAAc,CAAC,EAAM,CAC5B,OAAO,EAAmB,KAAK,CAAI,EAErC,SAAS,EAAY,CAAC,EAAM,EAAS,CACnC,IAAI,EAAS,EACb,QAAW,KAAO,EAAM,CACtB,IAAM,EAAS,EAAiB,EAAI,KAAM,CAAO,EACjD,GAAI,EAAI,UAAY,GAAK,EACvB,OAAO,OAAO,kBAChB,GAAU,EAAI,EAAS,EAAI,QAAQ,OAErC,OAAO,EAET,SAAS,EAAe,CAAC,EAAK,CAC5B,EAAM,UAAU,CAAG,EACnB,IAAM,EAAS,CAAC,EAChB,QAAS,EAAI,EAAG,EAAI,EAAI,OAAQ,IAC9B,GAAI,EAAI,OAAO,CAAC,IAAM,IACpB,EAAO,KAAK,EAAI,WAAW,CAAC,CAAC,EAE7B,OAAO,KAAK,OAAO,SAAS,EAAI,UAAU,EAAI,EAAG,EAAI,CAAC,EAAG,EAAE,CAAC,EAC5D,GAAK,EAGT,OAAO,EAET,SAAS,CAAoB,CAAC,EAAK,CACjC,GAAI,EAAM,GAAe,EAAM,EAC7B,MAAM,IAAI,WAAW,6BAA6B,EACpD,IAAI,GAAU,GAAK,EAAM,KAAO,EAAM,GACtC,GAAI,GAAO,EAAG,CACZ,IAAM,EAAW,KAAK,MAAM,EAAM,CAAC,EAAI,EAEvC,GADA,IAAW,GAAK,EAAW,IAAM,EAAW,GACxC,GAAO,EACT,GAAU,GAEd,OAAO,EAET,SAAS,CAAmB,CAAC,EAAK,EAAK,CACrC,OAAO,KAAK,MAAM,EAAqB,CAAG,EAAI,CAAC,EAAI,EAAwB,EAAI,IAAI,GAAO,EAA4B,EAAI,IAAI,GAEhI,SAAS,EAAyB,CAAC,EAAQ,CACzC,GAAI,EAAS,GAAK,EAAS,IACzB,MAAM,IAAI,WAAW,qBAAqB,EAC5C,IAAM,EAAS,CAAC,EAChB,QAAS,EAAI,EAAG,EAAI,EAAS,EAAG,IAC9B,EAAO,KAAK,CAAC,EACf,EAAO,KAAK,CAAC,EACb,IAAI,EAAO,EACX,QAAS,EAAI,EAAG,EAAI,EAAQ,IAAK,CAC/B,QAAS,EAAI,EAAG,EAAI,EAAO,OAAQ,IAEjC,GADA,EAAO,GAAK,EAAoB,EAAO,GAAI,CAAI,EAC3C,EAAI,EAAI,EAAO,OACjB,EAAO,IAAM,EAAO,EAAI,GAE5B,EAAO,EAAoB,EAAM,CAAC,EAEpC,OAAO,EAET,SAAS,EAA2B,CAAC,EAAM,EAAS,CAClD,IAAM,EAAS,EAAQ,IAAI,CAAC,IAAM,CAAC,EACnC,QAAW,KAAK,EAAM,CACpB,IAAM,EAAS,EAAI,EAAO,MAAM,EAChC,EAAO,KAAK,CAAC,EACb,EAAQ,QAAQ,CAAC,EAAM,IAAM,EAAO,IAAM,EAAoB,EAAM,CAAM,CAAC,EAE7E,OAAO,EAET,SAAS,CAAmB,CAAC,EAAG,EAAG,CACjC,GAAI,IAAM,IAAM,GAAK,IAAM,IAAM,EAC/B,MAAM,IAAI,WAAW,mBAAmB,EAC1C,IAAI,EAAI,EACR,QAAS,EAAI,EAAG,GAAK,EAAG,IACtB,EAAI,GAAK,GAAK,IAAM,GAAK,IACzB,IAAM,IAAM,EAAI,GAAK,EAEvB,OAAO,EAET,SAAS,EAAc,CAAC,EAAM,EAAK,EAAa,EAAG,EAAa,GAAI,EAAO,GAAI,EAAW,GAAM,CAC9F,KAAM,GAAe,GAAc,GAAc,GAAc,GAAc,IAAgB,EAAO,IAAM,EAAO,EAC/G,MAAM,IAAI,WAAW,eAAe,EACtC,IAAI,EACA,EACJ,IAAK,EAAU,GAAc,IAAW,CACtC,IAAM,EAAoB,EAAoB,EAAS,CAAG,EAAI,EACxD,EAAW,GAAa,EAAM,CAAO,EAC3C,GAAI,GAAY,EAAmB,CACjC,EAAe,EACf,MAEF,GAAI,GAAW,EACb,MAAM,IAAI,WAAW,eAAe,EAExC,QAAW,IAAU,CAAC,EAAQ,EAAU,CAAI,EAC1C,GAAI,GAAY,GAAgB,EAAoB,EAAS,CAAM,EAAI,EACrE,EAAM,EAEV,IAAM,EAAK,CAAC,EACZ,QAAW,KAAO,EAAM,CACtB,EAAW,EAAI,KAAK,GAAI,EAAG,CAAE,EAC7B,EAAW,EAAI,SAAU,EAAiB,EAAI,KAAM,CAAO,EAAG,CAAE,EAChE,QAAW,KAAK,EAAI,QAAQ,EAC1B,EAAG,KAAK,CAAC,EAEb,IAAM,EAAmB,EAAoB,EAAS,CAAG,EAAI,EAC7D,EAAW,EAAG,KAAK,IAAI,EAAG,EAAmB,EAAG,MAAM,EAAG,CAAE,EAC3D,EAAW,GAAI,EAAI,EAAG,OAAS,GAAK,EAAG,CAAE,EACzC,QAAS,EAAU,IAAK,EAAG,OAAS,EAAkB,GAAW,IAC/D,EAAW,EAAS,EAAG,CAAE,EAC3B,IAAM,EAAgB,MAAM,KAAK,CAAE,OAAQ,KAAK,KAAK,EAAG,OAAS,CAAC,CAAE,EAAG,IAAM,CAAC,EAE9E,OADA,EAAG,QAAQ,CAAC,EAAG,IAAM,EAAc,IAAM,IAAM,GAAK,GAAK,EAAI,EAAE,EACxD,IAAI,EAAO,EAAS,EAAK,EAAe,CAAI,EAGrD,SAAS,EAAM,CAAC,EAAM,EAAS,CAC7B,IACE,MAAM,IACN,WAAW,GACX,aAAa,EACb,aAAa,GACb,cAAc,GACd,SAAS,GACP,GAAW,CAAC,EACV,EAAU,OAAO,IAAS,SAAW,GAAa,CAAI,EAAI,MAAM,QAAQ,CAAI,EAAI,CAAC,EAAU,CAAI,CAAC,EAAS,OAC/G,IAAK,EACH,MAAM,IAAI,MAAM,+DAA+D,OAAO,GAAM,EAC9F,IAAM,EAAK,GACT,EACA,EAAO,GACP,EACA,EACA,EACA,CACF,EACM,EAAS,GAAU,CACvB,QAAS,EAAG,QACZ,YAAa,EAAG,KAChB,KAAM,EAAG,KACT,KAAM,EAAG,QACT,MAAO,EAAG,KACZ,EAAG,CAAM,EACT,GAAI,GAAS,OACX,EAAO,KAAO,EAAO,KAAK,IAAI,CAAC,IAAQ,EAAI,IAAI,CAAC,KAAS,CAAG,CAAC,EAE/D,OADA,GAAS,YAAY,CAAM,EACpB,EAET,SAAS,EAAS,CAAC,EAAO,EAAS,EAAG,CACpC,IAAK,EACH,OAAO,EACT,IAAQ,QAAS,EACX,EAAU,EAAO,EAAS,EAChC,EAAM,KAAO,EACb,EAAM,KAAK,QAAQ,CAAC,IAAQ,CAC1B,QAAS,EAAI,EAAG,EAAI,EAAQ,IAC1B,EAAI,QAAQ,EAAK,EACjB,EAAI,KAAK,EAAK,EAEjB,EACD,QAAS,EAAI,EAAG,EAAI,EAAQ,IAC1B,EAAM,KAAK,QAAQ,MAAM,KAAK,CAAE,OAAQ,CAAQ,EAAG,CAAC,IAAM,EAAK,CAAC,EAChE,EAAM,KAAK,KAAK,MAAM,KAAK,CAAE,OAAQ,CAAQ,EAAG,CAAC,IAAM,EAAK,CAAC,EAE/D,IAAM,EAAI,EAAe,OACzB,EAAM,MAAM,QAAQ,CAAC,IAAQ,CAC3B,QAAS,EAAI,EAAG,EAAI,EAAQ,IAC1B,EAAI,QAAQ,CAAC,EACb,EAAI,KAAK,CAAC,EAEb,EACD,QAAS,EAAI,EAAG,EAAI,EAAQ,IAC1B,EAAM,MAAM,QAAQ,MAAM,KAAK,CAAE,OAAQ,CAAQ,EAAG,CAAC,IAAM,CAAC,CAAC,EAC7D,EAAM,MAAM,KAAK,MAAM,KAAK,CAAE,OAAQ,CAAQ,EAAG,CAAC,IAAM,CAAC,CAAC,EAE5D,OAAO,EAuDT,SAAS,CAAS,CAAC,EAAM,EAAU,CAAC,EAAG,CACrC,IAAM,EAAS,GAAO,EAAM,CAAO,GAEjC,YAAY,GACZ,aAAa,QACb,aAAa,SACX,EACE,EAAS,EAAO,KAAO,EACvB,EAAQ,EAAO,KAAO,EACxB,EAAM,wDAAwD,KAAS,MACrE,EAAS,CAAC,EAChB,QAAS,EAAM,EAAG,EAAM,EAAO,KAAM,IACnC,QAAS,EAAM,EAAG,EAAM,EAAO,KAAM,IAAO,CAC1C,IAAM,EAAI,EAAM,EACV,EAAI,EAAM,EAChB,GAAI,EAAO,KAAK,GAAK,GACnB,EAAO,KAAK,IAAI,KAAK,KAAK,KAAa,MAAc,IAAY,EAMvE,OAHA,GAAO,eAAe,aAAsB,cAAkB,OAC9D,GAAO,eAAe,SAAkB,EAAO,KAAK,EAAE,OACtD,GAAO,SACA,EC9tBT,IAAI,GAAsB,EAAW,OAAO,EAKtC,GAAS,KAAS,CACtB,IAAO,EAAK,GAAU,EAAa,EAAE,EAC/B,EAAQ,EAAM,OAAS,EAAM,OAC7B,EAAS,EAAM,QAAU,EAAM,MAWrC,OAVA,EAAQ,IAAM,CACZ,IAAI,EAAM,EAAU,EAAM,KAAM,CAAK,EACrC,GAAI,EAAM,OAAS,EAAM,OAAQ,CAC/B,IAAM,EAAS,EAAS,CAAG,EAC3B,EAAO,aAAa,QAAS,EAAM,SAAS,CAAC,EAC7C,EAAO,aAAa,SAAU,EAAO,SAAS,CAAC,EAC/C,EAAM,EAAO,UAEf,EAAO,CAAG,EACX,GACO,IAAM,CACZ,IAAI,EAAO,GAAO,EAKlB,MAJA,GAAG,OAAa,KAAO,EAAK,MAAM,YAAY,QAAS,GAAG,KAAS,EAAI,EAAK,MAAM,eAAe,OAAO,EACxG,GAAG,OAAc,KAAO,EAAK,MAAM,YAAY,SAAU,GAAG,KAAU,EAAI,EAAK,MAAM,eAAe,QAAQ,EAC5G,EAAK,MAAM,YAAY,UAAW,KAAK,EACvC,EAAS,IAAM,EAAK,UAAY,EAAI,CAAC,EAC9B,IACN,GAEL,EAAc,UAAW,CACvB,MAAO,KACP,OAAQ,KACR,KAAM,GACN,IAAK,IACL,UAAW,CACb,EAAG,EAAM",
  "debugId": "998814E774DA7CD964756E2164756E21",
  "names": []
}