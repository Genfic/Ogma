{
  "version": 3,
  "sources": ["..\\..\\FrontendCode\\typescript\\generated\\typed-fetch.ts", "..\\..\\FrontendCode\\typescript\\generated\\paths-public.ts", "..\\..\\FrontendCode\\typescript\\src\\comments.ts"],
  "sourcesContent": [
    "interface TypedResponse<T> {\n\treadonly ok: boolean;\n\treadonly status: number;\n\treadonly statusText: string;\n\treadonly headers: Headers;\n\treadonly data: T;\n}\n\ntype HttpMethod = \"GET\" | \"POST\" | \"PUT\" | \"PATCH\" | \"DELETE\" | \"HEAD\";\n\nexport const get: HttpMethod = \"GET\";\nexport const post: HttpMethod = \"POST\";\nexport const put: HttpMethod = \"PUT\";\nexport const patch: HttpMethod = \"PATCH\";\nexport const del: HttpMethod = \"DELETE\";\nexport const head: HttpMethod = \"HEAD\";\n\nexport async function typedFetch<TOut, TBody>(\n\turl: string,\n\tmethod: HttpMethod | (string & { ___?: never }),\n\tbody?: TBody,\n\theaders?: HeadersInit,\n\toptions?: RequestInit,\n): Promise<Readonly<TypedResponse<TOut>>> {\n\tconst res = await fetch(url, {\n\t\tmethod: method,\n\t\theaders: {\n\t\t\t\"content-type\": \"application/json\",\n\t\t\t...headers,\n\t\t},\n\t\tbody: body && JSON.stringify(body),\n\t\t...options,\n\t});\n\n\tconst contentType = res.headers.get(\"content-type\");\n\n\tconst data: TOut = contentType?.includes(\"application/json\")\n\t\t? await res.json()\n\t\t: await res.text();\n\n\treturn {\n\t\tok: res.ok,\n\t\tstatus: res.status,\n\t\tstatusText: res.statusText,\n\t\theaders: res.headers,\n\t\tdata: data,\n\t};\n}\n",
    "import type {\n\tAddBookToShelfCommand,\n\tAddStoryToFolderCommand,\n\tAddStoryToFolderResponse,\n\tAdminIssueInviteCodeCommand,\n\tBlockUserCommand,\n\tCommentDto,\n\tCreateCommentCommand,\n\tCreateFaqCommand,\n\tCreateQuoteCommand,\n\tCreateQuotesFromJsonQuery,\n\tCreateRoleCommand,\n\tCreateShelfCommand,\n\tCreateTagCommand,\n\tCreateVoteCommand,\n\tDeleteVoteCommand,\n\tFaqDto,\n\tFollowUserCommand,\n\tFullQuoteDto,\n\tGetClubsWithStoryResult,\n\tGetFolderResult,\n\tGetJoinedClubsResponse,\n\tGetRevisionResult,\n\tGetSignInDataResult,\n\tGetThreadDetailsResult,\n\tGetUserNotificationsResult,\n\tInviteCodeDto,\n\tIssueInviteCodeCommand,\n\tJoinClubCommand,\n\tLeaveClubCommand,\n\tLockThreadCommand,\n\tMarkChapterAsReadCommand,\n\tMarkChapterAsUnreadCommand,\n\tQuickShelvesResult,\n\tQuoteDto,\n\tRatingApiDto,\n\tRemoveBookFromShelfCommand,\n\tRemoveBookFromShelfResult,\n\tReportContentCommand,\n\tRoleDto,\n\tShelfAddResult,\n\tShelfDto,\n\tShelfResult,\n\tSubscribeCommentsThreadCommand,\n\tTagDto,\n\tUnblockUserCommand,\n\tUnfollowUserCommand,\n\tUpdateCommentCommand,\n\tUpdateCommentResponse,\n\tUpdateFaqCommand,\n\tUpdateQuoteCommand,\n\tUpdateRoleCommand,\n\tUpdateRolesCommand,\n\tUpdateShelfCommand,\n\tUpdateTagCommand,\n\tVoteResult,\n} from './types-public';\nimport { typedFetch, get, post, put, patch, del, head } from './typed-fetch';\n\n\nexport const DeleteApiChaptersread = async (body: MarkChapterAsUnreadCommand, headers?: HeadersInit, options?: RequestInit) => await typedFetch<number[], MarkChapterAsUnreadCommand>(\"/api/chaptersread\",\n\tdel,\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const DeleteApiClubjoin = async (body: LeaveClubCommand, headers?: HeadersInit, options?: RequestInit) => await typedFetch<boolean|string, LeaveClubCommand>(\"/api/clubjoin\",\n\tdel,\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const DeleteApiComments = async (commentId: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<number, undefined>(`/api/comments/${commentId}`,\n\tdel,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const DeleteApiFaqs = async (id: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<number, undefined>(`/api/faqs?id=${id}`,\n\tdel,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const DeleteApiInviteCodes = async (codeId: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<number, undefined>(`/api/InviteCodes/${codeId}`,\n\tdel,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const DeleteApiNotifications = async (id: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<void, undefined>(`/api/notifications/${id}`,\n\tdel,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const DeleteApiQuotes = async (id: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<number, undefined>(`/api/quotes/${id}`,\n\tdel,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const DeleteApiRatings = async (ratingId: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<number, undefined>(`/api/ratings/${ratingId}`,\n\tdel,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const DeleteApiRoles = async (roleId: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<number, undefined>(`/api/roles?roleId=${roleId}`,\n\tdel,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const DeleteApiShelfStories = async (body: RemoveBookFromShelfCommand, headers?: HeadersInit, options?: RequestInit) => await typedFetch<RemoveBookFromShelfResult, RemoveBookFromShelfCommand>(\"/api/ShelfStories\",\n\tdel,\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const DeleteApiShelves = async (shelfId: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<number, undefined>(`/api/shelves/${shelfId}`,\n\tdel,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const DeleteApiSubscriptionsThread = async (threadId: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<boolean, undefined>(`/api/subscriptions/thread?threadId=${threadId}`,\n\tdel,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const DeleteApiTags = async (tagId: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<number, undefined>(`/api/tags?tagId=${tagId}`,\n\tdel,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const DeleteApiUsersBlock = async (body: UnblockUserCommand, headers?: HeadersInit, options?: RequestInit) => await typedFetch<boolean, UnblockUserCommand>(\"/api/users/block\",\n\tdel,\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const DeleteApiUsersFollow = async (body: UnfollowUserCommand, headers?: HeadersInit, options?: RequestInit) => await typedFetch<boolean, UnfollowUserCommand>(\"/api/users/follow\",\n\tdel,\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const DeleteApiVotes = async (body: DeleteVoteCommand, headers?: HeadersInit, options?: RequestInit) => await typedFetch<VoteResult, DeleteVoteCommand>(\"/api/votes\",\n\tdel,\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const GetAllQuotes = async (headers?: HeadersInit, options?: RequestInit) => await typedFetch<FullQuoteDto[], undefined>(\"/api/quotes\",\n\tget,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetApiChaptersread = async (id: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<number[], undefined>(`/api/chaptersread/${id}`,\n\tget,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetApiClubjoin = async (clubId: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<boolean, undefined>(`/api/clubjoin/${clubId}`,\n\tget,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetApiClubsStory = async (storyId: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<GetClubsWithStoryResult[], undefined>(`/api/clubs/story/${storyId}`,\n\tget,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetApiClubsUser = async (headers?: HeadersInit, options?: RequestInit) => await typedFetch<GetJoinedClubsResponse[], undefined>(\"/api/clubs/user\",\n\tget,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetApiComments = async (thread: number, page: number, highlight: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<{\n\telements: CommentDto[];\n\ttotal: number;\n\tperPage: number;\n\tpages: number;\n\tpage: number;\n}, undefined>(`/api/comments?thread=${thread}&page=${page}&highlight=${highlight}`,\n\tget,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetApiCommentsMd = async (commentId: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<string, undefined>(`/api/comments/${commentId}/md`,\n\tget,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetApiCommentsRevisions = async (commentId: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<GetRevisionResult[], undefined>(`/api/comments/${commentId}/revisions`,\n\tget,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetApiCommentsThread = async (threadId: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<GetThreadDetailsResult, undefined>(`/api/CommentsThread/${threadId}`,\n\tget,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetApiFaqs = async (headers?: HeadersInit, options?: RequestInit) => await typedFetch<FaqDto[], undefined>(\"/api/faqs\",\n\tget,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetApiFolders = async (clubId: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<GetFolderResult[], undefined>(`/api/folders?clubId=${clubId}`,\n\tget,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetApiInviteCodes = async (headers?: HeadersInit, options?: RequestInit) => await typedFetch<InviteCodeDto[], undefined>(\"/api/InviteCodes\",\n\tget,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetApiInviteCodesPaginated = async (page: number, perPage: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<InviteCodeDto[], undefined>(`/api/InviteCodes/paginated?page=${page}&perPage=${perPage}`,\n\tget,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetApiNotifications = async (headers?: HeadersInit, options?: RequestInit) => await typedFetch<GetUserNotificationsResult[], undefined>(\"/api/notifications\",\n\tget,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetApiNotificationsCount = async (headers?: HeadersInit, options?: RequestInit) => await typedFetch<number, undefined>(\"/api/notifications/count\",\n\tget,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetApiQuotesRandom = async (headers?: HeadersInit, options?: RequestInit) => await typedFetch<QuoteDto, undefined>(\"/api/quotes/random\",\n\tget,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetApiRatings = async (headers?: HeadersInit, options?: RequestInit) => await typedFetch<RatingApiDto[], undefined>(\"/api/ratings\",\n\tget,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetApiRoles = async (headers?: HeadersInit, options?: RequestInit) => await typedFetch<RoleDto[], undefined>(\"/api/roles\",\n\tget,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetApiShelfStories = async (storyId: number, page: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<ShelfResult[], undefined>(`/api/ShelfStories/${storyId}?page=${page}`,\n\tget,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetApiShelfStoriesQuick = async (storyId: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<QuickShelvesResult[], undefined>(`/api/ShelfStories/${storyId}/quick`,\n\tget,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetApiShelves = async (userName: string, page: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<ShelfDto[], undefined>(`/api/shelves/${userName}?page=${page}`,\n\tget,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetApiSignin = async (name: string, headers?: HeadersInit, options?: RequestInit) => await typedFetch<GetSignInDataResult, undefined>(`/api/signin?name=${name}`,\n\tget,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetApiSubscriptionsThread = async (threadId: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<boolean, undefined>(`/api/subscriptions/thread?threadId=${threadId}`,\n\tget,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetApiTags = async (page: number, perPage: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<TagDto[], undefined>(`/api/tags?page=${page}&perPage=${perPage}`,\n\tget,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetApiTagsAll = async (headers?: HeadersInit, options?: RequestInit) => await typedFetch<TagDto[], undefined>(\"/api/tags/all\",\n\tget,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetApiTagsSearch = async (searchString: string, headers?: HeadersInit, options?: RequestInit) => await typedFetch<TagDto[], undefined>(`/api/tags/search?searchString=${searchString}`,\n\tget,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetApiTagsStory = async (storyId: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<TagDto[], undefined>(`/api/tags/story/${storyId}`,\n\tget,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetApiTest = async (headers?: HeadersInit, options?: RequestInit) => await typedFetch<void, undefined>(\"/api/test\",\n\tget,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetApiUsersNames = async (name: string, headers?: HeadersInit, options?: RequestInit) => await typedFetch<string[]|string, undefined>(`/api/users/names?name=${name}`,\n\tget,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetApiVotes = async (storyId: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<VoteResult, undefined>(`/api/votes/${storyId}`,\n\tget,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetComment = async (commentId: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<CommentDto, undefined>(`/api/comments/${commentId}`,\n\tget,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetRatingById = async (id: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<RatingApiDto, undefined>(`/api/ratings/${id}`,\n\tget,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetRoleById = async (roleId: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<RoleDto, undefined>(`/api/roles/${roleId}`,\n\tget,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetShelf = async (shelfId: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<ShelfDto, undefined>(`/api/shelves/${shelfId}`,\n\tget,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetSingleFaq = async (faqId: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<FaqDto, undefined>(`/api/faqs/${faqId}`,\n\tget,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetSingleQuote = async (id: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<QuoteDto, undefined>(`/api/quotes/${id}`,\n\tget,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetSingleTag = async (tagId: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<TagDto, undefined>(`/api/tags/${tagId}`,\n\tget,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const PatchApiComments = async (body: UpdateCommentCommand, headers?: HeadersInit, options?: RequestInit) => await typedFetch<UpdateCommentResponse, UpdateCommentCommand>(\"/api/comments\",\n\tpatch,\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const PostApiChaptersread = async (body: MarkChapterAsReadCommand, headers?: HeadersInit, options?: RequestInit) => await typedFetch<number[], MarkChapterAsReadCommand>(\"/api/chaptersread\",\n\tpost,\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const PostApiClubjoin = async (body: JoinClubCommand, headers?: HeadersInit, options?: RequestInit) => await typedFetch<boolean, JoinClubCommand>(\"/api/clubjoin\",\n\tpost,\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const PostApiComments = async (body: CreateCommentCommand, headers?: HeadersInit, options?: RequestInit) => await typedFetch<void, CreateCommentCommand>(\"/api/comments\",\n\tpost,\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const PostApiCommentsThreadLock = async (body: LockThreadCommand, headers?: HeadersInit, options?: RequestInit) => await typedFetch<boolean, LockThreadCommand>(\"/api/CommentsThread/lock\",\n\tpost,\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const PostApiFaqs = async (body: CreateFaqCommand, headers?: HeadersInit, options?: RequestInit) => await typedFetch<FaqDto, CreateFaqCommand>(\"/api/faqs\",\n\tpost,\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const PostApiFoldersAddStory = async (body: AddStoryToFolderCommand, headers?: HeadersInit, options?: RequestInit) => await typedFetch<AddStoryToFolderResponse|string, AddStoryToFolderCommand>(\"/api/folders/AddStory\",\n\tpost,\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const PostApiInviteCodes = async (headers?: HeadersInit, options?: RequestInit) => await typedFetch<InviteCodeDto|string, IssueInviteCodeCommand>(\"/api/InviteCodes\",\n\tpost,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const PostApiInviteCodesNoLimit = async (headers?: HeadersInit, options?: RequestInit) => await typedFetch<InviteCodeDto, AdminIssueInviteCodeCommand>(\"/api/InviteCodes/no-limit\",\n\tpost,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const PostApiQuotes = async (body: CreateQuoteCommand, headers?: HeadersInit, options?: RequestInit) => await typedFetch<QuoteDto, CreateQuoteCommand>(\"/api/quotes\",\n\tpost,\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const PostApiQuotesJson = async (body: CreateQuotesFromJsonQuery, headers?: HeadersInit, options?: RequestInit) => await typedFetch<number, CreateQuotesFromJsonQuery>(\"/api/quotes/json\",\n\tpost,\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const PostApiRatings = async (headers?: HeadersInit, options?: RequestInit) => await typedFetch<RatingApiDto, undefined>(\"/api/ratings\",\n\tpost,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const PostApiReports = async (body: ReportContentCommand, headers?: HeadersInit, options?: RequestInit) => await typedFetch<number, ReportContentCommand>(\"/api/reports\",\n\tpost,\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const PostApiRoles = async (body: CreateRoleCommand, headers?: HeadersInit, options?: RequestInit) => await typedFetch<RoleDto|string, CreateRoleCommand>(\"/api/roles\",\n\tpost,\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const PostApiShelfStories = async (body: AddBookToShelfCommand, headers?: HeadersInit, options?: RequestInit) => await typedFetch<ShelfAddResult, AddBookToShelfCommand>(\"/api/ShelfStories\",\n\tpost,\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const PostApiShelves = async (body: CreateShelfCommand, headers?: HeadersInit, options?: RequestInit) => await typedFetch<ShelfDto, CreateShelfCommand>(\"/api/shelves\",\n\tpost,\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const PostApiSubscriptionsThread = async (body: SubscribeCommentsThreadCommand, headers?: HeadersInit, options?: RequestInit) => await typedFetch<boolean, SubscribeCommentsThreadCommand>(\"/api/subscriptions/thread\",\n\tpost,\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const PostApiTags = async (body: CreateTagCommand, headers?: HeadersInit, options?: RequestInit) => await typedFetch<TagDto|string, CreateTagCommand>(\"/api/tags\",\n\tpost,\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const PostApiUsersBlock = async (body: BlockUserCommand, headers?: HeadersInit, options?: RequestInit) => await typedFetch<boolean, BlockUserCommand>(\"/api/users/block\",\n\tpost,\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const PostApiUsersFollow = async (body: FollowUserCommand, headers?: HeadersInit, options?: RequestInit) => await typedFetch<boolean, FollowUserCommand>(\"/api/users/follow\",\n\tpost,\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const PostApiUsersRoles = async (body: UpdateRolesCommand, headers?: HeadersInit, options?: RequestInit) => await typedFetch<void, UpdateRolesCommand>(\"/api/users/roles\",\n\tpost,\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const PostApiVotes = async (body: CreateVoteCommand, headers?: HeadersInit, options?: RequestInit) => await typedFetch<VoteResult, CreateVoteCommand>(\"/api/votes\",\n\tpost,\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const PutApiFaqs = async (body: UpdateFaqCommand, headers?: HeadersInit, options?: RequestInit) => await typedFetch<void, UpdateFaqCommand>(\"/api/faqs\",\n\tput,\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const PutApiQuotes = async (body: UpdateQuoteCommand, headers?: HeadersInit, options?: RequestInit) => await typedFetch<void, UpdateQuoteCommand>(\"/api/quotes\",\n\tput,\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const PutApiRatings = async (headers?: HeadersInit, options?: RequestInit) => await typedFetch<RatingApiDto, undefined>(\"/api/ratings\",\n\tput,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const PutApiRoles = async (body: UpdateRoleCommand, headers?: HeadersInit, options?: RequestInit) => await typedFetch<void, UpdateRoleCommand>(\"/api/roles\",\n\tput,\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const PutApiShelves = async (body: UpdateShelfCommand, headers?: HeadersInit, options?: RequestInit) => await typedFetch<void, UpdateShelfCommand>(\"/api/shelves\",\n\tput,\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const PutApiTags = async (body: UpdateTagCommand, headers?: HeadersInit, options?: RequestInit) => await typedFetch<string, UpdateTagCommand>(\"/api/tags\",\n\tput,\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const UpdateLastActive = async (headers?: HeadersInit, options?: RequestInit) => await typedFetch<number, undefined>(\"/api/useractivity\",\n\thead,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n",
    "import { GetApiComments, GetApiCommentsThread, PostApiComments, PostApiCommentsThreadLock } from \"@g/paths-public\";\r\nimport type { CommentDto } from \"@g/types-public\";\r\n\r\n// @ts-ignore\r\nnew Vue({\r\n\tel: \"#comments-container\",\r\n\tdata: {\r\n\t\tbody: \"\",\r\n\t\tthread: null,\r\n\t\tcsrf: null,\r\n\t\ttype: null,\r\n\r\n\t\tminLength: 0,\r\n\t\tmaxLength: 0,\r\n\r\n\t\tcomments: [] as { val: CommentDto; key: number }[],\r\n\t\ttotal: 0,\r\n\r\n\t\t// Pagination\r\n\t\tpage: 1,\r\n\t\tperPage: 10,\r\n\r\n\t\t// Name of the OP\r\n\t\topName: null,\r\n\r\n\t\t// Auth status\r\n\t\tauthenticatedAs: false,\r\n\t\tcanLock: false,\r\n\r\n\t\t// Subscription status\r\n\t\tisSubscribed: false,\r\n\r\n\t\t// Lock status\r\n\t\tisLocked: false,\r\n\r\n\t\thighlight: null,\r\n\t\tcollapse: JSON.parse(window.localStorage.getItem(\"collapse-deleted\")),\r\n\r\n\t\tisReady: false,\r\n\t},\r\n\tmethods: {\r\n\t\t// Submit the comment, load comments again, clean textarea\r\n\t\tsubmit: async function (e: Event) {\r\n\t\t\te.preventDefault();\r\n\r\n\t\t\tif (this.body.length >= this.maxLength) return;\r\n\r\n\t\t\tconst res = await PostApiComments(\r\n\t\t\t\t{\r\n\t\t\t\t\tbody: this.body,\r\n\t\t\t\t\tthread: Number(this.thread),\r\n\t\t\t\t\tsource: this.type,\r\n\t\t\t\t},\r\n\t\t\t\t{ RequestVerificationToken: this.csrf },\r\n\t\t\t);\r\n\r\n\t\t\tif (!res.ok) return;\r\n\r\n\t\t\tthis.highlight = this.total + 1;\r\n\t\t\tthis.page = 1;\r\n\t\t\tawait this.load();\r\n\t\t\tthis.body = \"\";\r\n\t\t},\r\n\r\n\t\t// Load comments for the thread\r\n\t\tload: async function () {\r\n\t\t\tconst res = await GetApiComments(this.thread, this.page, this.highlight ?? -1);\r\n\t\t\tconst data = res.data;\r\n\r\n\t\t\tthis.total = data.total;\r\n\t\t\tthis.page = data.page ?? this.page;\r\n\t\t\tthis.authenticatedAs = res.headers.get(\"x-username\").toLowerCase();\r\n\r\n\t\t\tthis.comments = Object.entries(data.elements).map(([key, val]) => ({\r\n\t\t\t\tval,\r\n\t\t\t\tkey: data.total - this.page * this.perPage + (this.perPage - (Number.parseInt(key) + 1)),\r\n\t\t\t}));\r\n\r\n\t\t\tif (this.highlight) {\r\n\t\t\t\tthis.$nextTick(() => this.changeHighlight());\r\n\t\t\t} else {\r\n\t\t\t\tthis.navigateToPage();\r\n\t\t\t}\r\n\r\n\t\t\tif (this.isReady) return;\r\n\t\t\tthis.$nextTick(function () {\r\n\t\t\t\tthis.isReady = true;\r\n\t\t\t});\r\n\t\t},\r\n\r\n\t\t// Handle Enter key input\r\n\t\tenter: async function (e: KeyboardEvent) {\r\n\t\t\tif (e.ctrlKey) await this.submit(e);\r\n\t\t},\r\n\r\n\t\t// Navigate to the previous page\r\n\t\tprevPage: async function () {\r\n\t\t\tawait this.changePage(Math.max(1, this.page - 1));\r\n\t\t},\r\n\r\n\t\t// Navigate to the next page\r\n\t\tnextPage: async function () {\r\n\t\t\tawait this.changePage(Math.min(this.page + 1, Math.ceil(this.total / this.perPage)));\r\n\t\t},\r\n\r\n\t\t// Navigate to the selected page\r\n\t\tchangePage: async function (idx: number) {\r\n\t\t\tthis.page = idx;\r\n\t\t\tthis.navigateToPage();\r\n\t\t\tawait this.load();\r\n\t\t},\r\n\r\n\t\t// Highlights the selected comment and scrolls it into view\r\n\t\tchangeHighlight: function (idx: number | null = null, e: Event | null = null) {\r\n\t\t\tif (e) e.preventDefault();\r\n\t\t\tthis.highlight = idx ?? this.highlight;\r\n\t\t\tdocument.getElementById(`comment-${this.highlight}`).scrollIntoView({\r\n\t\t\t\tbehavior: \"smooth\",\r\n\t\t\t\tblock: \"center\",\r\n\t\t\t\tinline: \"nearest\",\r\n\t\t\t});\r\n\t\t\thistory.replaceState(undefined, undefined, `#comment-${this.highlight}`);\r\n\t\t},\r\n\r\n\t\t// Navigates to `this.page` page\r\n\t\tnavigateToPage: function () {\r\n\t\t\tconst fragment = this.page > 1 ? `#page-${this.page}` : window.location.href.split(\"#\")[0];\r\n\r\n\t\t\thistory.replaceState(null, null, fragment);\r\n\r\n\t\t\tif (this.highlight) this.highlight = null;\r\n\t\t},\r\n\r\n\t\t// Open the report modal\r\n\t\treport: function (id: number) {\r\n\t\t\tthis.$refs.reportModal.mutId = id;\r\n\t\t\tthis.$refs.reportModal.visible = true;\r\n\t\t},\r\n\r\n\t\t// Lock or unlock the thread\r\n\t\tlock: async function () {\r\n\t\t\tif (!this.canLock) return false;\r\n\t\t\tconst res = await PostApiCommentsThreadLock({ threadId: this.thread });\r\n\t\t\tthis.isLocked = res.ok && res.data;\r\n\t\t\treturn this.isLocked;\r\n\t\t},\r\n\t},\r\n\r\n\tcomputed: {\r\n\t\tcomms: function () {\r\n\t\t\t// Check collapse preference\r\n\t\t\tif (this.collapse !== true) return this.comments;\r\n\r\n\t\t\t// If `collapse-deleted` is true, collapse the deleted comments\r\n\t\t\tconst o = [];\r\n\t\t\tlet concat = 0;\r\n\r\n\t\t\tfor (const c of this.comments) {\r\n\t\t\t\tif (!c.val.deletedBy) {\r\n\t\t\t\t\tif (concat !== 0) {\r\n\t\t\t\t\t\to.push({ snip: `Removed ${concat} comments.` });\r\n\t\t\t\t\t}\r\n\t\t\t\t\tconcat = 0;\r\n\t\t\t\t\to.push(c);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tconcat += 1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn o;\r\n\t\t},\r\n\t},\r\n\r\n\tasync mounted() {\r\n\t\tconst containerRef = this.$refs.container;\r\n\t\tthis.csrf = containerRef.dataset.csrf;\r\n\t\tthis.thread = containerRef.dataset.id;\r\n\r\n\t\tconst fetchData = async () => {\r\n\t\t\tconst threadRes = await GetApiCommentsThread(this.thread);\r\n\t\t\tif (threadRes.ok) {\r\n\t\t\t\tthis.canLock = threadRes.headers.get(\"X-IsStaff\").toLowerCase() === \"true\";\r\n\r\n\t\t\t\tconst threadData = threadRes.data;\r\n\t\t\t\tthis.isLocked = threadData.isLocked;\r\n\t\t\t\tthis.perPage = threadData.perPage;\r\n\t\t\t\tthis.minLength = threadData.minCommentLength;\r\n\t\t\t\tthis.maxLength = threadData.maxCommentLength;\r\n\t\t\t\tthis.type = threadData.source;\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tconst load = async () => {\r\n\t\t\tawait this.load();\r\n\t\t};\r\n\r\n\t\tawait Promise.allSettled([fetchData(), load()]);\r\n\r\n\t\tconst hash = window.location.hash.split(\"-\");\r\n\t\tif (hash[0] === \"#page\" && hash[1]) {\r\n\t\t\tthis.page = Math.max(1, Number(hash[1] ?? 1));\r\n\t\t} else if (hash[0] === \"#comment\" && hash[1]) {\r\n\t\t\tthis.page = 1;\r\n\t\t\tthis.highlight = Number(hash[1]);\r\n\t\t} else {\r\n\t\t\tthis.page = 1;\r\n\t\t\thistory.replaceState(undefined, undefined, \"\");\r\n\t\t}\r\n\t},\r\n});\r\n"
  ],
  "mappings": "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",
  "debugId": "0DDA62BD0EA4487464756E2164756E21",
  "names": []
}