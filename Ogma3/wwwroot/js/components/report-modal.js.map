{
  "version": 3,
  "sources": ["..\\..\\FrontendCode\\typescript\\generated\\typed-fetch.ts", "..\\..\\FrontendCode\\typescript\\generated\\paths-public.ts", "..\\..\\FrontendCode\\typescript\\src\\components\\report-modal.js"],
  "sourcesContent": [
    "interface TypedResponse<T> {\n\treadonly ok: boolean;\n\treadonly status: number;\n\treadonly statusText: string;\n\treadonly headers: Headers;\n\treadonly data: T;\n}\n\ntype HttpMethod = \"GET\" | \"POST\" | \"PUT\" | \"PATCH\" | \"DELETE\" | \"HEAD\";\n\nexport const get: HttpMethod = \"GET\";\nexport const post: HttpMethod = \"POST\";\nexport const put: HttpMethod = \"PUT\";\nexport const patch: HttpMethod = \"PATCH\";\nexport const del: HttpMethod = \"DELETE\";\nexport const head: HttpMethod = \"HEAD\";\n\nexport async function typedFetch<TOut, TBody>(\n\turl: string,\n\tmethod: HttpMethod | (string & { ___?: never }),\n\tbody?: TBody,\n\theaders?: HeadersInit,\n\toptions?: RequestInit,\n): Promise<Readonly<TypedResponse<TOut>>> {\n\tconst res = await fetch(url, {\n\t\tmethod: method,\n\t\theaders: {\n\t\t\t\"content-type\": \"application/json\",\n\t\t\t...headers,\n\t\t},\n\t\tbody: body && JSON.stringify(body),\n\t\t...options,\n\t});\n\n\tconst contentType = res.headers.get(\"content-type\");\n\n\tconst data: TOut = contentType?.includes(\"application/json\")\n\t\t? await res.json()\n\t\t: await res.text();\n\n\treturn {\n\t\tok: res.ok,\n\t\tstatus: res.status,\n\t\tstatusText: res.statusText,\n\t\theaders: res.headers,\n\t\tdata: data,\n\t};\n}\n",
    "import type {\n\tAddBookToShelfCommand,\n\tAddStoryToFolderCommand,\n\tAddStoryToFolderResponse,\n\tAdminIssueInviteCodeCommand,\n\tBlockUserCommand,\n\tCommentDto,\n\tCreateCommentCommand,\n\tCreateFaqCommand,\n\tCreateQuoteCommand,\n\tCreateQuotesFromJsonQuery,\n\tCreateRoleCommand,\n\tCreateShelfCommand,\n\tCreateTagCommand,\n\tCreateVoteCommand,\n\tDeleteVoteCommand,\n\tFaqDto,\n\tFollowUserCommand,\n\tFullQuoteDto,\n\tGetClubsWithStoryResult,\n\tGetFolderResult,\n\tGetJoinedClubsResponse,\n\tGetRevisionResult,\n\tGetSignInDataResult,\n\tGetThreadDetailsResult,\n\tGetUserNotificationsResult,\n\tInviteCodeDto,\n\tIssueInviteCodeCommand,\n\tJoinClubCommand,\n\tLeaveClubCommand,\n\tLockThreadCommand,\n\tMarkChapterAsReadCommand,\n\tMarkChapterAsUnreadCommand,\n\tQuickShelvesResult,\n\tQuoteDto,\n\tRatingApiDto,\n\tRemoveBookFromShelfCommand,\n\tRemoveBookFromShelfResult,\n\tReportContentCommand,\n\tRoleDto,\n\tShelfAddResult,\n\tShelfDto,\n\tShelfResult,\n\tSubscribeCommentsThreadCommand,\n\tTagDto,\n\tUnblockUserCommand,\n\tUnfollowUserCommand,\n\tUpdateCommentCommand,\n\tUpdateCommentResponse,\n\tUpdateFaqCommand,\n\tUpdateQuoteCommand,\n\tUpdateRoleCommand,\n\tUpdateRolesCommand,\n\tUpdateShelfCommand,\n\tUpdateTagCommand,\n\tVoteResult,\n} from './types-public';\nimport { typedFetch, get, post, put, patch, del, head } from './typed-fetch';\n\n\nexport const DeleteApiChaptersread = async (body: MarkChapterAsUnreadCommand, headers?: HeadersInit, options?: RequestInit) => await typedFetch<number[], MarkChapterAsUnreadCommand>(\"/api/chaptersread\",\n\tdel,\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const DeleteApiClubjoin = async (body: LeaveClubCommand, headers?: HeadersInit, options?: RequestInit) => await typedFetch<boolean|string, LeaveClubCommand>(\"/api/clubjoin\",\n\tdel,\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const DeleteApiComments = async (commentId: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<number, undefined>(`/api/comments/${commentId}`,\n\tdel,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const DeleteApiFaqs = async (id: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<number, undefined>(`/api/faqs?id=${id}`,\n\tdel,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const DeleteApiInviteCodes = async (codeId: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<number, undefined>(`/api/InviteCodes/${codeId}`,\n\tdel,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const DeleteApiNotifications = async (id: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<void, undefined>(`/api/notifications/${id}`,\n\tdel,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const DeleteApiQuotes = async (id: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<number, undefined>(`/api/quotes/${id}`,\n\tdel,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const DeleteApiRatings = async (ratingId: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<number, undefined>(`/api/ratings/${ratingId}`,\n\tdel,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const DeleteApiRoles = async (roleId: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<number, undefined>(`/api/roles?roleId=${roleId}`,\n\tdel,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const DeleteApiShelfStories = async (body: RemoveBookFromShelfCommand, headers?: HeadersInit, options?: RequestInit) => await typedFetch<RemoveBookFromShelfResult, RemoveBookFromShelfCommand>(\"/api/ShelfStories\",\n\tdel,\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const DeleteApiShelves = async (shelfId: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<number, undefined>(`/api/shelves/${shelfId}`,\n\tdel,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const DeleteApiSubscriptionsThread = async (threadId: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<boolean, undefined>(`/api/subscriptions/thread?threadId=${threadId}`,\n\tdel,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const DeleteApiTags = async (tagId: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<number, undefined>(`/api/tags?tagId=${tagId}`,\n\tdel,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const DeleteApiUsersBlock = async (body: UnblockUserCommand, headers?: HeadersInit, options?: RequestInit) => await typedFetch<boolean, UnblockUserCommand>(\"/api/users/block\",\n\tdel,\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const DeleteApiUsersFollow = async (body: UnfollowUserCommand, headers?: HeadersInit, options?: RequestInit) => await typedFetch<boolean, UnfollowUserCommand>(\"/api/users/follow\",\n\tdel,\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const DeleteApiVotes = async (body: DeleteVoteCommand, headers?: HeadersInit, options?: RequestInit) => await typedFetch<VoteResult, DeleteVoteCommand>(\"/api/votes\",\n\tdel,\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const GetAllQuotes = async (headers?: HeadersInit, options?: RequestInit) => await typedFetch<FullQuoteDto[], undefined>(\"/api/quotes\",\n\tget,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetApiChaptersread = async (id: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<number[], undefined>(`/api/chaptersread/${id}`,\n\tget,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetApiClubjoin = async (clubId: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<boolean, undefined>(`/api/clubjoin/${clubId}`,\n\tget,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetApiClubsStory = async (storyId: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<GetClubsWithStoryResult[], undefined>(`/api/clubs/story/${storyId}`,\n\tget,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetApiClubsUser = async (headers?: HeadersInit, options?: RequestInit) => await typedFetch<GetJoinedClubsResponse[], undefined>(\"/api/clubs/user\",\n\tget,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetApiComments = async (thread: number, page: number, highlight: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<{\n\telements: CommentDto[];\n\ttotal: number;\n\tperPage: number;\n\tpages: number;\n\tpage: number;\n}, undefined>(`/api/comments?thread=${thread}&page=${page}&highlight=${highlight}`,\n\tget,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetApiCommentsMd = async (commentId: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<string, undefined>(`/api/comments/${commentId}/md`,\n\tget,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetApiCommentsRevisions = async (commentId: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<GetRevisionResult[], undefined>(`/api/comments/${commentId}/revisions`,\n\tget,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetApiCommentsThread = async (threadId: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<GetThreadDetailsResult, undefined>(`/api/CommentsThread/${threadId}`,\n\tget,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetApiFaqs = async (headers?: HeadersInit, options?: RequestInit) => await typedFetch<FaqDto[], undefined>(\"/api/faqs\",\n\tget,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetApiFolders = async (clubId: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<GetFolderResult[], undefined>(`/api/folders?clubId=${clubId}`,\n\tget,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetApiInviteCodes = async (headers?: HeadersInit, options?: RequestInit) => await typedFetch<InviteCodeDto[], undefined>(\"/api/InviteCodes\",\n\tget,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetApiInviteCodesPaginated = async (page: number, perPage: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<InviteCodeDto[], undefined>(`/api/InviteCodes/paginated?page=${page}&perPage=${perPage}`,\n\tget,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetApiNotifications = async (headers?: HeadersInit, options?: RequestInit) => await typedFetch<GetUserNotificationsResult[], undefined>(\"/api/notifications\",\n\tget,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetApiNotificationsCount = async (headers?: HeadersInit, options?: RequestInit) => await typedFetch<number, undefined>(\"/api/notifications/count\",\n\tget,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetApiQuotesRandom = async (headers?: HeadersInit, options?: RequestInit) => await typedFetch<QuoteDto, undefined>(\"/api/quotes/random\",\n\tget,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetApiRatings = async (headers?: HeadersInit, options?: RequestInit) => await typedFetch<RatingApiDto[], undefined>(\"/api/ratings\",\n\tget,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetApiRoles = async (headers?: HeadersInit, options?: RequestInit) => await typedFetch<RoleDto[], undefined>(\"/api/roles\",\n\tget,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetApiShelfStories = async (storyId: number, page: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<ShelfResult[], undefined>(`/api/ShelfStories/${storyId}?page=${page}`,\n\tget,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetApiShelfStoriesQuick = async (storyId: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<QuickShelvesResult[], undefined>(`/api/ShelfStories/${storyId}/quick`,\n\tget,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetApiShelves = async (userName: string, page: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<ShelfDto[], undefined>(`/api/shelves/${userName}?page=${page}`,\n\tget,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetApiSignin = async (name: string, headers?: HeadersInit, options?: RequestInit) => await typedFetch<GetSignInDataResult, undefined>(`/api/signin?name=${name}`,\n\tget,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetApiSubscriptionsThread = async (threadId: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<boolean, undefined>(`/api/subscriptions/thread?threadId=${threadId}`,\n\tget,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetApiTags = async (page: number, perPage: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<TagDto[], undefined>(`/api/tags?page=${page}&perPage=${perPage}`,\n\tget,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetApiTagsAll = async (headers?: HeadersInit, options?: RequestInit) => await typedFetch<TagDto[], undefined>(\"/api/tags/all\",\n\tget,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetApiTagsSearch = async (searchString: string, headers?: HeadersInit, options?: RequestInit) => await typedFetch<TagDto[], undefined>(`/api/tags/search?searchString=${searchString}`,\n\tget,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetApiTagsStory = async (storyId: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<TagDto[], undefined>(`/api/tags/story/${storyId}`,\n\tget,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetApiTest = async (headers?: HeadersInit, options?: RequestInit) => await typedFetch<void, undefined>(\"/api/test\",\n\tget,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetApiUsersNames = async (name: string, headers?: HeadersInit, options?: RequestInit) => await typedFetch<string[]|string, undefined>(`/api/users/names?name=${name}`,\n\tget,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetApiVotes = async (storyId: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<VoteResult, undefined>(`/api/votes/${storyId}`,\n\tget,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetComment = async (commentId: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<CommentDto, undefined>(`/api/comments/${commentId}`,\n\tget,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetRatingById = async (id: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<RatingApiDto, undefined>(`/api/ratings/${id}`,\n\tget,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetRoleById = async (roleId: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<RoleDto, undefined>(`/api/roles/${roleId}`,\n\tget,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetShelf = async (shelfId: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<ShelfDto, undefined>(`/api/shelves/${shelfId}`,\n\tget,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetSingleFaq = async (faqId: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<FaqDto, undefined>(`/api/faqs/${faqId}`,\n\tget,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetSingleQuote = async (id: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<QuoteDto, undefined>(`/api/quotes/${id}`,\n\tget,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetSingleTag = async (tagId: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<TagDto, undefined>(`/api/tags/${tagId}`,\n\tget,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const PatchApiComments = async (body: UpdateCommentCommand, headers?: HeadersInit, options?: RequestInit) => await typedFetch<UpdateCommentResponse, UpdateCommentCommand>(\"/api/comments\",\n\tpatch,\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const PostApiChaptersread = async (body: MarkChapterAsReadCommand, headers?: HeadersInit, options?: RequestInit) => await typedFetch<number[], MarkChapterAsReadCommand>(\"/api/chaptersread\",\n\tpost,\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const PostApiClubjoin = async (body: JoinClubCommand, headers?: HeadersInit, options?: RequestInit) => await typedFetch<boolean, JoinClubCommand>(\"/api/clubjoin\",\n\tpost,\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const PostApiComments = async (body: CreateCommentCommand, headers?: HeadersInit, options?: RequestInit) => await typedFetch<void, CreateCommentCommand>(\"/api/comments\",\n\tpost,\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const PostApiCommentsThreadLock = async (body: LockThreadCommand, headers?: HeadersInit, options?: RequestInit) => await typedFetch<boolean, LockThreadCommand>(\"/api/CommentsThread/lock\",\n\tpost,\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const PostApiFaqs = async (body: CreateFaqCommand, headers?: HeadersInit, options?: RequestInit) => await typedFetch<FaqDto, CreateFaqCommand>(\"/api/faqs\",\n\tpost,\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const PostApiFoldersAddStory = async (body: AddStoryToFolderCommand, headers?: HeadersInit, options?: RequestInit) => await typedFetch<AddStoryToFolderResponse|string, AddStoryToFolderCommand>(\"/api/folders/AddStory\",\n\tpost,\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const PostApiInviteCodes = async (headers?: HeadersInit, options?: RequestInit) => await typedFetch<InviteCodeDto|string, IssueInviteCodeCommand>(\"/api/InviteCodes\",\n\tpost,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const PostApiInviteCodesNoLimit = async (headers?: HeadersInit, options?: RequestInit) => await typedFetch<InviteCodeDto, AdminIssueInviteCodeCommand>(\"/api/InviteCodes/no-limit\",\n\tpost,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const PostApiQuotes = async (body: CreateQuoteCommand, headers?: HeadersInit, options?: RequestInit) => await typedFetch<QuoteDto, CreateQuoteCommand>(\"/api/quotes\",\n\tpost,\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const PostApiQuotesJson = async (body: CreateQuotesFromJsonQuery, headers?: HeadersInit, options?: RequestInit) => await typedFetch<number, CreateQuotesFromJsonQuery>(\"/api/quotes/json\",\n\tpost,\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const PostApiRatings = async (headers?: HeadersInit, options?: RequestInit) => await typedFetch<RatingApiDto, undefined>(\"/api/ratings\",\n\tpost,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const PostApiReports = async (body: ReportContentCommand, headers?: HeadersInit, options?: RequestInit) => await typedFetch<number, ReportContentCommand>(\"/api/reports\",\n\tpost,\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const PostApiRoles = async (body: CreateRoleCommand, headers?: HeadersInit, options?: RequestInit) => await typedFetch<RoleDto|string, CreateRoleCommand>(\"/api/roles\",\n\tpost,\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const PostApiShelfStories = async (body: AddBookToShelfCommand, headers?: HeadersInit, options?: RequestInit) => await typedFetch<ShelfAddResult, AddBookToShelfCommand>(\"/api/ShelfStories\",\n\tpost,\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const PostApiShelves = async (body: CreateShelfCommand, headers?: HeadersInit, options?: RequestInit) => await typedFetch<ShelfDto, CreateShelfCommand>(\"/api/shelves\",\n\tpost,\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const PostApiSubscriptionsThread = async (body: SubscribeCommentsThreadCommand, headers?: HeadersInit, options?: RequestInit) => await typedFetch<boolean, SubscribeCommentsThreadCommand>(\"/api/subscriptions/thread\",\n\tpost,\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const PostApiTags = async (body: CreateTagCommand, headers?: HeadersInit, options?: RequestInit) => await typedFetch<TagDto|string, CreateTagCommand>(\"/api/tags\",\n\tpost,\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const PostApiUsersBlock = async (body: BlockUserCommand, headers?: HeadersInit, options?: RequestInit) => await typedFetch<boolean, BlockUserCommand>(\"/api/users/block\",\n\tpost,\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const PostApiUsersFollow = async (body: FollowUserCommand, headers?: HeadersInit, options?: RequestInit) => await typedFetch<boolean, FollowUserCommand>(\"/api/users/follow\",\n\tpost,\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const PostApiUsersRoles = async (body: UpdateRolesCommand, headers?: HeadersInit, options?: RequestInit) => await typedFetch<void, UpdateRolesCommand>(\"/api/users/roles\",\n\tpost,\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const PostApiVotes = async (body: CreateVoteCommand, headers?: HeadersInit, options?: RequestInit) => await typedFetch<VoteResult, CreateVoteCommand>(\"/api/votes\",\n\tpost,\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const PutApiFaqs = async (body: UpdateFaqCommand, headers?: HeadersInit, options?: RequestInit) => await typedFetch<void, UpdateFaqCommand>(\"/api/faqs\",\n\tput,\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const PutApiQuotes = async (body: UpdateQuoteCommand, headers?: HeadersInit, options?: RequestInit) => await typedFetch<void, UpdateQuoteCommand>(\"/api/quotes\",\n\tput,\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const PutApiRatings = async (headers?: HeadersInit, options?: RequestInit) => await typedFetch<RatingApiDto, undefined>(\"/api/ratings\",\n\tput,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const PutApiRoles = async (body: UpdateRoleCommand, headers?: HeadersInit, options?: RequestInit) => await typedFetch<void, UpdateRoleCommand>(\"/api/roles\",\n\tput,\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const PutApiShelves = async (body: UpdateShelfCommand, headers?: HeadersInit, options?: RequestInit) => await typedFetch<void, UpdateShelfCommand>(\"/api/shelves\",\n\tput,\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const PutApiTags = async (body: UpdateTagCommand, headers?: HeadersInit, options?: RequestInit) => await typedFetch<string, UpdateTagCommand>(\"/api/tags\",\n\tput,\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const UpdateLastActive = async (headers?: HeadersInit, options?: RequestInit) => await typedFetch<number, undefined>(\"/api/useractivity\",\n\thead,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n",
    "import { PostApiReports as report } from \"../../generated/paths-public\";\r\n\r\nVue.component(\"vue-report-modal\", {\r\n\tprops: {\r\n\t\tcsrf: {\r\n\t\t\ttype: String,\r\n\t\t\trequired: true,\r\n\t\t},\r\n\t\titemType: {\r\n\t\t\ttype: String,\r\n\t\t\trequired: true,\r\n\t\t},\r\n\t\titemId: {\r\n\t\t\ttype: Number,\r\n\t\t\trequired: true,\r\n\t\t},\r\n\t},\r\n\tdata: function () {\r\n\t\treturn {\r\n\t\t\tvisible: false,\r\n\t\t\treason: \"\",\r\n\t\t\tmessage: null,\r\n\t\t\tbtnClass: \"\",\r\n\t\t\tmutId: this.itemId,\r\n\t\t};\r\n\t},\r\n\tmethods: {\r\n\t\thide: function () {\r\n\t\t\tthis.reason = \"\";\r\n\t\t\tthis.visible = false;\r\n\t\t\tthis.$refs.text.clear();\r\n\t\t},\r\n\t\tsend: async function () {\r\n\t\t\tif (!this.$refs.text.validate) return;\r\n\r\n\t\t\tconst res = await report(\r\n\t\t\t\t{\r\n\t\t\t\t\titemId: this.mutId,\r\n\t\t\t\t\treason: this.reason,\r\n\t\t\t\t\titemType: this.itemType,\r\n\t\t\t\t},\r\n\t\t\t\t{ RequestVerificationToken: this.csrf },\r\n\t\t\t);\r\n\r\n\t\t\tif (res.ok) {\r\n\t\t\t\tthis.message = \"Report delivered!\";\r\n\t\t\t\tthis.btnClass = \"green\";\r\n\t\t\t} else {\r\n\t\t\t\tthis.message = \"An error has occurred.\";\r\n\t\t\t\tthis.btnClass = \"red\";\r\n\t\t\t}\r\n\t\t},\r\n\t},\r\n\r\n\ttemplate: `\r\n\t\t<div class=\"report-modal my-modal\" v-if=\"visible\" @click.self=\"hide\" v-cloak>\r\n\t\t<div class=\"content\">\r\n\r\n\t\t\t<div class=\"header\">\r\n\t\t\t\t<span>Report content</span>\r\n\t\t\t</div>\r\n\r\n\t\t\t<form class=\"form\">\r\n\t\t\t\t<textarea-counter ref=\"text\"\r\n\t\t\t\t\t\t\t\t  label=\"Reason\"\r\n\t\t\t\t\t\t\t\t  desc=\"Why do you want to report this content?\"\r\n\t\t\t\t\t\t\t\t  validate-msg=\"The {0} must be between {2} and {1} characters\"\r\n\t\t\t\t\t\t\t\t  :min=\"30\" :max=\"500\"\r\n\t\t\t\t\t\t\t\t  v-model=\"reason\">\r\n\t\t\t\t</textarea-counter>\r\n\t\t\t</form>\r\n\r\n\t\t\t<br>\r\n\r\n\t\t\t<button class=\"btn\" :class=\"btnClass\" v-on:click=\"send\">\r\n\t\t\t\t{{ message ?? 'Send report' }}\r\n\t\t\t</button>\r\n\r\n\t\t</div>\r\n\t\t</div>\r\n\t`,\r\n});\r\n"
  ],
  "mappings": "AAWO,IAAM,EAAmB,OAMhC,eAAsB,CAAuB,CAC5C,EACA,EACA,EACA,EACA,EACyC,CACzC,IAAM,EAAM,MAAM,MAAM,EAAK,CAC5B,OAAQ,EACR,QAAS,CACR,eAAgB,sBACb,CACJ,EACA,KAAM,GAAQ,KAAK,UAAU,CAAI,KAC9B,CACJ,CAAC,EAIK,EAFc,EAAI,QAAQ,IAAI,cAAc,GAElB,SAAS,kBAAkB,EACxD,MAAM,EAAI,KAAK,EACf,MAAM,EAAI,KAAK,EAElB,MAAO,CACN,GAAI,EAAI,GACR,OAAQ,EAAI,OACZ,WAAY,EAAI,WAChB,QAAS,EAAI,QACb,KAAM,CACP,EC4hBM,IAAM,EAAiB,MAAO,EAA4B,EAAuB,IAA0B,MAAM,EAAyC,eAChK,EACA,EACA,EACA,CACD,EC7kBA,IAAI,UAAU,mBAAoB,CACjC,MAAO,CACN,KAAM,CACL,KAAM,OACN,SAAU,EACX,EACA,SAAU,CACT,KAAM,OACN,SAAU,EACX,EACA,OAAQ,CACP,KAAM,OACN,SAAU,EACX,CACD,EACA,KAAM,QAAS,EAAG,CACjB,MAAO,CACN,QAAS,GACT,OAAQ,GACR,QAAS,KACT,SAAU,GACV,MAAO,KAAK,MACb,GAED,QAAS,CACR,KAAM,QAAS,EAAG,CACjB,KAAK,OAAS,GACd,KAAK,QAAU,GACf,KAAK,MAAM,KAAK,MAAM,GAEvB,KAAM,cAAe,EAAG,CACvB,IAAK,KAAK,MAAM,KAAK,SAAU,OAW/B,IATY,MAAM,EACjB,CACC,OAAQ,KAAK,MACb,OAAQ,KAAK,OACb,SAAU,KAAK,QAChB,EACA,CAAE,yBAA0B,KAAK,IAAK,CACvC,GAEQ,GACP,KAAK,QAAU,oBACf,KAAK,SAAW,QAEhB,UAAK,QAAU,yBACf,KAAK,SAAW,MAGnB,EAEA,SAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA2BX,CAAC",
  "debugId": "33899C1907000A2764756E2164756E21",
  "names": []
}