{
  "version": 3,
  "sources": ["..\\..\\FrontendCode\\typescript\\generated\\typed-fetch.ts", "..\\..\\FrontendCode\\typescript\\generated\\paths-public.ts", "..\\..\\FrontendCode\\typescript\\src\\components\\tag-search-select-component.ts"],
  "sourcesContent": [
    "interface TypedResponse<T> {\n\treadonly ok: boolean;\n\treadonly status: number;\n\treadonly statusText: string;\n\treadonly headers: Headers;\n\treadonly data: T;\n}\n\nexport async function typedFetch<TOut>(\n\turl: string,\n\tmethod: \"GET\" | \"POST\" | \"PUT\" | \"PATCH\" | \"DELETE\" | \"HEAD\" | string,\n\tbody?: object,\n\theaders?: HeadersInit,\n\toptions?: RequestInit,\n): Promise<Readonly<TypedResponse<TOut>>> {\n\tconst res = await fetch(url, {\n\t\tmethod: method,\n\t\theaders: {\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t...headers,\n\t\t},\n\t\tbody: body ? JSON.stringify(body) : null,\n\t\t...options,\n\t});\n\n\tconst contentType = res.headers.get(\"content-type\");\n\n\tlet data: TOut;\n\tif (contentType?.includes(\"application/json\")) {\n\t\tdata = await res.json();\n\t} else {\n\t\tdata = (await res.text()) as TOut;\n\t}\n\n\treturn {\n\t\tok: res.ok,\n\t\tstatus: res.status,\n\t\tstatusText: res.statusText,\n\t\theaders: res.headers,\n\t\tdata: data as TOut,\n\t};\n}\n",
    "import type {\n\tAddBookToShelfCommand,\n\tAddStoryToFolderCommand,\n\tAddStoryToFolderResponse,\n\tAdminIssueInviteCodeCommand,\n\tBlockUserCommand,\n\tCommentDto,\n\tCreateCommentCommand,\n\tCreateFaqCommand,\n\tCreateQuoteCommand,\n\tCreateQuotesFromJsonQuery,\n\tCreateRoleCommand,\n\tCreateShelfCommand,\n\tCreateTagCommand,\n\tCreateVoteCommand,\n\tDeleteVoteCommand,\n\tFaqDto,\n\tFollowUserCommand,\n\tFullQuoteDto,\n\tGetClubsWithStoryResult,\n\tGetFolderResult,\n\tGetJoinedClubsResponse,\n\tGetRevisionResult,\n\tGetSignInDataResult,\n\tGetThreadDetailsResult,\n\tGetUserNotificationsResult,\n\tInviteCodeDto,\n\tIssueInviteCodeCommand,\n\tJoinClubCommand,\n\tLeaveClubCommand,\n\tLockThreadCommand,\n\tMarkChapterAsReadCommand,\n\tMarkChapterAsUnreadCommand,\n\tQuickShelvesResult,\n\tQuoteDto,\n\tRatingApiDto,\n\tRemoveBookFromShelfCommand,\n\tRemoveBookFromShelfResult,\n\tReportContentCommand,\n\tRoleDto,\n\tShelfAddResult,\n\tShelfDto,\n\tShelfResult,\n\tSubscribeCommentsThreadCommand,\n\tTagDto,\n\tUnblockUserCommand,\n\tUnfollowUserCommand,\n\tUpdateCommentCommand,\n\tUpdateCommentResponse,\n\tUpdateFaqCommand,\n\tUpdateQuoteCommand,\n\tUpdateRoleCommand,\n\tUpdateRolesCommand,\n\tUpdateShelfCommand,\n\tUpdateTagCommand,\n\tVoteResult,\n} from './types-public';\nimport { typedFetch } from './typed-fetch';\n\n\nexport const DeleteApiChaptersread = async (body: MarkChapterAsUnreadCommand, headers?: HeadersInit, options?: RequestInit) => await typedFetch<number[]>(\"/api/chaptersread\",\n\t\"DELETE\",\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const DeleteApiClubjoin = async (body: LeaveClubCommand, headers?: HeadersInit, options?: RequestInit) => await typedFetch<boolean|string>(\"/api/clubjoin\",\n\t\"DELETE\",\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const DeleteApiComments = async (commentId: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<number>(`/api/comments/${commentId}`,\n\t\"DELETE\",\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const DeleteApiFaqs = async (id: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<number>(`/api/faqs?id=${id}`,\n\t\"DELETE\",\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const DeleteApiInviteCodes = async (codeId: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<number>(`/api/InviteCodes/${codeId}`,\n\t\"DELETE\",\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const DeleteApiNotifications = async (id: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<void>(`/api/notifications/${id}`,\n\t\"DELETE\",\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const DeleteApiQuotes = async (id: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<number>(`/api/quotes/${id}`,\n\t\"DELETE\",\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const DeleteApiRatings = async (ratingId: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<number>(`/api/ratings/${ratingId}`,\n\t\"DELETE\",\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const DeleteApiRoles = async (roleId: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<number>(`/api/roles?roleId=${roleId}`,\n\t\"DELETE\",\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const DeleteApiShelfStories = async (body: RemoveBookFromShelfCommand, headers?: HeadersInit, options?: RequestInit) => await typedFetch<RemoveBookFromShelfResult>(\"/api/ShelfStories\",\n\t\"DELETE\",\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const DeleteApiShelves = async (shelfId: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<number>(`/api/shelves/${shelfId}`,\n\t\"DELETE\",\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const DeleteApiSubscriptionsThread = async (threadId: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<boolean>(`/api/subscriptions/thread?threadId=${threadId}`,\n\t\"DELETE\",\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const DeleteApiTags = async (tagId: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<number>(`/api/tags?tagId=${tagId}`,\n\t\"DELETE\",\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const DeleteApiUsersBlock = async (body: UnblockUserCommand, headers?: HeadersInit, options?: RequestInit) => await typedFetch<boolean>(\"/api/users/block\",\n\t\"DELETE\",\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const DeleteApiUsersFollow = async (body: UnfollowUserCommand, headers?: HeadersInit, options?: RequestInit) => await typedFetch<boolean>(\"/api/users/follow\",\n\t\"DELETE\",\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const DeleteApiVotes = async (body: DeleteVoteCommand, headers?: HeadersInit, options?: RequestInit) => await typedFetch<VoteResult>(\"/api/votes\",\n\t\"DELETE\",\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const GetAllQuotes = async (headers?: HeadersInit, options?: RequestInit) => await typedFetch<FullQuoteDto[]>(\"/api/quotes\",\n\t\"GET\",\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetApiChaptersread = async (id: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<number[]>(`/api/chaptersread/${id}`,\n\t\"GET\",\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetApiClubjoin = async (clubId: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<boolean>(`/api/clubjoin/${clubId}`,\n\t\"GET\",\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetApiClubsStory = async (storyId: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<GetClubsWithStoryResult[]>(`/api/clubs/story/${storyId}`,\n\t\"GET\",\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetApiClubsUser = async (headers?: HeadersInit, options?: RequestInit) => await typedFetch<GetJoinedClubsResponse[]>(\"/api/clubs/user\",\n\t\"GET\",\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetApiComments = async (thread: number, page: number, highlight: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<{\n\telements: CommentDto[];\n\ttotal: number;\n\tperPage: number;\n\tpages: number;\n\tpage: number;\n}>(`/api/comments?thread=${thread}&page=${page}&highlight=${highlight}`,\n\t\"GET\",\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetApiCommentsMd = async (commentId: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<string>(`/api/comments/${commentId}/md`,\n\t\"GET\",\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetApiCommentsRevisions = async (commentId: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<GetRevisionResult[]>(`/api/comments/${commentId}/revisions`,\n\t\"GET\",\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetApiCommentsThread = async (threadId: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<GetThreadDetailsResult>(`/api/CommentsThread/${threadId}`,\n\t\"GET\",\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetApiFaqs = async (headers?: HeadersInit, options?: RequestInit) => await typedFetch<FaqDto[]>(\"/api/faqs\",\n\t\"GET\",\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetApiFolders = async (clubId: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<GetFolderResult[]>(`/api/folders?clubId=${clubId}`,\n\t\"GET\",\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetApiInviteCodes = async (headers?: HeadersInit, options?: RequestInit) => await typedFetch<InviteCodeDto[]>(\"/api/InviteCodes\",\n\t\"GET\",\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetApiInviteCodesPaginated = async (page: number, perPage: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<InviteCodeDto[]>(`/api/InviteCodes/paginated?page=${page}&perPage=${perPage}`,\n\t\"GET\",\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetApiNotifications = async (headers?: HeadersInit, options?: RequestInit) => await typedFetch<GetUserNotificationsResult[]>(\"/api/notifications\",\n\t\"GET\",\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetApiNotificationsCount = async (headers?: HeadersInit, options?: RequestInit) => await typedFetch<number>(\"/api/notifications/count\",\n\t\"GET\",\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetApiQuotesRandom = async (headers?: HeadersInit, options?: RequestInit) => await typedFetch<QuoteDto>(\"/api/quotes/random\",\n\t\"GET\",\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetApiRatings = async (headers?: HeadersInit, options?: RequestInit) => await typedFetch<RatingApiDto[]>(\"/api/ratings\",\n\t\"GET\",\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetApiRoles = async (headers?: HeadersInit, options?: RequestInit) => await typedFetch<RoleDto[]>(\"/api/roles\",\n\t\"GET\",\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetApiShelfStories = async (storyId: number, page: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<ShelfResult[]>(`/api/ShelfStories/${storyId}?page=${page}`,\n\t\"GET\",\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetApiShelfStoriesQuick = async (storyId: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<QuickShelvesResult[]>(`/api/ShelfStories/${storyId}/quick`,\n\t\"GET\",\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetApiShelves = async (userName: string, page: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<ShelfDto[]>(`/api/shelves/${userName}?page=${page}`,\n\t\"GET\",\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetApiSignin = async (name: string, headers?: HeadersInit, options?: RequestInit) => await typedFetch<GetSignInDataResult>(`/api/signin?name=${name}`,\n\t\"GET\",\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetApiSubscriptionsThread = async (threadId: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<boolean>(`/api/subscriptions/thread?threadId=${threadId}`,\n\t\"GET\",\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetApiTags = async (page: number, perPage: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<TagDto[]>(`/api/tags?page=${page}&perPage=${perPage}`,\n\t\"GET\",\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetApiTagsAll = async (headers?: HeadersInit, options?: RequestInit) => await typedFetch<TagDto[]>(\"/api/tags/all\",\n\t\"GET\",\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetApiTagsSearch = async (searchString: string, headers?: HeadersInit, options?: RequestInit) => await typedFetch<TagDto[]>(`/api/tags/search?searchString=${searchString}`,\n\t\"GET\",\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetApiTagsStory = async (storyId: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<TagDto[]>(`/api/tags/story/${storyId}`,\n\t\"GET\",\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetApiTest = async (headers?: HeadersInit, options?: RequestInit) => await typedFetch<void>(\"/api/test\",\n\t\"GET\",\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetApiUsersNames = async (name: string, headers?: HeadersInit, options?: RequestInit) => await typedFetch<string[]|string>(`/api/users/names?name=${name}`,\n\t\"GET\",\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetApiVotes = async (storyId: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<VoteResult>(`/api/votes/${storyId}`,\n\t\"GET\",\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetComment = async (commentId: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<CommentDto>(`/api/comments/${commentId}`,\n\t\"GET\",\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetRatingById = async (id: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<RatingApiDto>(`/api/ratings/${id}`,\n\t\"GET\",\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetRoleById = async (roleId: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<RoleDto>(`/api/roles/${roleId}`,\n\t\"GET\",\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetShelf = async (shelfId: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<ShelfDto>(`/api/shelves/${shelfId}`,\n\t\"GET\",\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetSingleFaq = async (faqId: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<FaqDto>(`/api/faqs/${faqId}`,\n\t\"GET\",\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetSingleQuote = async (id: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<QuoteDto>(`/api/quotes/${id}`,\n\t\"GET\",\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetSingleTag = async (tagId: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<TagDto>(`/api/tags/${tagId}`,\n\t\"GET\",\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const PatchApiComments = async (body: UpdateCommentCommand, headers?: HeadersInit, options?: RequestInit) => await typedFetch<UpdateCommentResponse>(\"/api/comments\",\n\t\"PATCH\",\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const PostApiChaptersread = async (body: MarkChapterAsReadCommand, headers?: HeadersInit, options?: RequestInit) => await typedFetch<number[]>(\"/api/chaptersread\",\n\t\"POST\",\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const PostApiClubjoin = async (body: JoinClubCommand, headers?: HeadersInit, options?: RequestInit) => await typedFetch<boolean>(\"/api/clubjoin\",\n\t\"POST\",\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const PostApiComments = async (body: CreateCommentCommand, headers?: HeadersInit, options?: RequestInit) => await typedFetch<void>(\"/api/comments\",\n\t\"POST\",\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const PostApiCommentsThreadLock = async (body: LockThreadCommand, headers?: HeadersInit, options?: RequestInit) => await typedFetch<boolean>(\"/api/CommentsThread/lock\",\n\t\"POST\",\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const PostApiFaqs = async (body: CreateFaqCommand, headers?: HeadersInit, options?: RequestInit) => await typedFetch<FaqDto>(\"/api/faqs\",\n\t\"POST\",\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const PostApiFoldersAddStory = async (body: AddStoryToFolderCommand, headers?: HeadersInit, options?: RequestInit) => await typedFetch<AddStoryToFolderResponse|string>(\"/api/folders/AddStory\",\n\t\"POST\",\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const PostApiInviteCodes = async (headers?: HeadersInit, options?: RequestInit) => await typedFetch<InviteCodeDto|string>(\"/api/InviteCodes\",\n\t\"POST\",\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const PostApiInviteCodesNoLimit = async (headers?: HeadersInit, options?: RequestInit) => await typedFetch<InviteCodeDto>(\"/api/InviteCodes/no-limit\",\n\t\"POST\",\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const PostApiQuotes = async (body: CreateQuoteCommand, headers?: HeadersInit, options?: RequestInit) => await typedFetch<QuoteDto>(\"/api/quotes\",\n\t\"POST\",\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const PostApiQuotesJson = async (body: CreateQuotesFromJsonQuery, headers?: HeadersInit, options?: RequestInit) => await typedFetch<number>(\"/api/quotes/json\",\n\t\"POST\",\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const PostApiRatings = async (headers?: HeadersInit, options?: RequestInit) => await typedFetch<RatingApiDto>(\"/api/ratings\",\n\t\"POST\",\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const PostApiReports = async (body: ReportContentCommand, headers?: HeadersInit, options?: RequestInit) => await typedFetch<number>(\"/api/reports\",\n\t\"POST\",\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const PostApiRoles = async (body: CreateRoleCommand, headers?: HeadersInit, options?: RequestInit) => await typedFetch<RoleDto|string>(\"/api/roles\",\n\t\"POST\",\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const PostApiShelfStories = async (body: AddBookToShelfCommand, headers?: HeadersInit, options?: RequestInit) => await typedFetch<ShelfAddResult>(\"/api/ShelfStories\",\n\t\"POST\",\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const PostApiShelves = async (body: CreateShelfCommand, headers?: HeadersInit, options?: RequestInit) => await typedFetch<ShelfDto>(\"/api/shelves\",\n\t\"POST\",\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const PostApiSubscriptionsThread = async (body: SubscribeCommentsThreadCommand, headers?: HeadersInit, options?: RequestInit) => await typedFetch<boolean>(\"/api/subscriptions/thread\",\n\t\"POST\",\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const PostApiTags = async (body: CreateTagCommand, headers?: HeadersInit, options?: RequestInit) => await typedFetch<TagDto|string>(\"/api/tags\",\n\t\"POST\",\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const PostApiUsersBlock = async (body: BlockUserCommand, headers?: HeadersInit, options?: RequestInit) => await typedFetch<boolean>(\"/api/users/block\",\n\t\"POST\",\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const PostApiUsersFollow = async (body: FollowUserCommand, headers?: HeadersInit, options?: RequestInit) => await typedFetch<boolean>(\"/api/users/follow\",\n\t\"POST\",\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const PostApiUsersRoles = async (body: UpdateRolesCommand, headers?: HeadersInit, options?: RequestInit) => await typedFetch<void>(\"/api/users/roles\",\n\t\"POST\",\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const PostApiVotes = async (body: CreateVoteCommand, headers?: HeadersInit, options?: RequestInit) => await typedFetch<VoteResult>(\"/api/votes\",\n\t\"POST\",\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const PutApiFaqs = async (body: UpdateFaqCommand, headers?: HeadersInit, options?: RequestInit) => await typedFetch<void>(\"/api/faqs\",\n\t\"PUT\",\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const PutApiQuotes = async (body: UpdateQuoteCommand, headers?: HeadersInit, options?: RequestInit) => await typedFetch<void>(\"/api/quotes\",\n\t\"PUT\",\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const PutApiRatings = async (headers?: HeadersInit, options?: RequestInit) => await typedFetch<RatingApiDto>(\"/api/ratings\",\n\t\"PUT\",\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const PutApiRoles = async (body: UpdateRoleCommand, headers?: HeadersInit, options?: RequestInit) => await typedFetch<void>(\"/api/roles\",\n\t\"PUT\",\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const PutApiShelves = async (body: UpdateShelfCommand, headers?: HeadersInit, options?: RequestInit) => await typedFetch<void>(\"/api/shelves\",\n\t\"PUT\",\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const PutApiTags = async (body: UpdateTagCommand, headers?: HeadersInit, options?: RequestInit) => await typedFetch<string>(\"/api/tags\",\n\t\"PUT\",\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const UpdateLastActive = async (headers?: HeadersInit, options?: RequestInit) => await typedFetch<number>(\"/api/useractivity\",\n\t\"HEAD\",\n\tundefined,\n\theaders,\n\toptions,\n);\n\n",
    "import { GetApiTagsAll, GetApiTagsStory } from \"@g/paths-public\";\r\nimport type { TagDto } from \"@g/types-public\";\r\n\r\n// @ts-ignore\r\nVue.component(\"tag-search-select\", {\r\n\tprops: {\r\n\t\tmin: {\r\n\t\t\ttype: Number,\r\n\t\t\tdefault: 0,\r\n\t\t},\r\n\t\tlabel: {\r\n\t\t\ttype: String,\r\n\t\t\trequired: true,\r\n\t\t},\r\n\t\tdesc: {\r\n\t\t\ttype: String,\r\n\t\t\trequired: false,\r\n\t\t\tdefault: null,\r\n\t\t},\r\n\t\tvalidateMsg: {\r\n\t\t\ttype: String,\r\n\t\t\tdefault: null,\r\n\t\t},\r\n\t\tstoryId: {\r\n\t\t\ttype: Number,\r\n\t\t\tdefault: null,\r\n\t\t},\r\n\t\tpreselected: {\r\n\t\t\ttype: Array,\r\n\t\t\tdefault: null,\r\n\t\t},\r\n\t\tinline: {\r\n\t\t\ttype: Boolean,\r\n\t\t\tdefault: false,\r\n\t\t},\r\n\t\tdisableWhenEmpty: {\r\n\t\t\ttype: Boolean,\r\n\t\t\tdefault: false,\r\n\t\t},\r\n\t\thideLabels: {\r\n\t\t\ttype: Boolean,\r\n\t\t\tdefault: false,\r\n\t\t},\r\n\t},\r\n\tdata: function () {\r\n\t\treturn {\r\n\t\t\tname: this.label.replace(/\\s+/g, \"\").toLowerCase(),\r\n\t\t\tloading: true,\r\n\r\n\t\t\t// Tag search\r\n\t\t\toptions: [] as TagDto[],\r\n\t\t\tselected: [] as TagDto[],\r\n\t\t\tsearch: \"\",\r\n\t\t\thighlighted: null,\r\n\t\t\tfocused: false,\r\n\r\n\t\t\tdisable: false,\r\n\t\t};\r\n\t},\r\n\tcomputed: {\r\n\t\tvalidate: function () {\r\n\t\t\treturn this.selected.length >= this.min;\r\n\t\t},\r\n\t\tvalidationString: function () {\r\n\t\t\treturn this.validateMsg.replace(\"{0}\", `${this.min}`);\r\n\t\t},\r\n\t\tfiltered() {\r\n\t\t\treturn this.options.filter((x) => {\r\n\t\t\t\tconst inName = x.name.toLowerCase().includes(this.search.toLowerCase());\r\n\t\t\t\tconst inNamespace = x.namespace?.toLowerCase().includes(this.search.toLowerCase()) ?? false;\r\n\r\n\t\t\t\treturn (inName || inNamespace) && !this.selected.some((i) => i.id === x.id) && this.search.length > 0;\r\n\t\t\t});\r\n\t\t},\r\n\t},\r\n\tmethods: {\r\n\t\tpushUnique: <T>(arr: T[], el: T) => {\r\n\t\t\tif (arr.includes(el)) return;\r\n\t\t\tarr.push(el);\r\n\t\t},\r\n\r\n\t\thandleInputKeys: function (e: KeyboardEvent) {\r\n\t\t\tswitch (e.key) {\r\n\t\t\t\tcase \"Backspace\":\r\n\t\t\t\t\tif (this.search.length <= 0) {\r\n\t\t\t\t\t\tthis.selected.pop();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"ArrowUp\":\r\n\t\t\t\t\tif (this.highlighted !== null) e.preventDefault();\r\n\t\t\t\t\tif (this.highlighted > 0) {\r\n\t\t\t\t\t\tthis.highlighted--;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthis.highlighted = null;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"ArrowDown\":\r\n\t\t\t\t\tif (this.highlighted !== null) e.preventDefault();\r\n\t\t\t\t\tif (this.highlighted === null) {\r\n\t\t\t\t\t\tthis.highlighted = 0;\r\n\t\t\t\t\t} else if (this.highlighted < this.filtered.length - 1) {\r\n\t\t\t\t\t\tthis.highlighted++;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \" \":\r\n\t\t\t\tcase \"Enter\":\r\n\t\t\t\t\tif (this.highlighted !== null) {\r\n\t\t\t\t\t\te.preventDefault();\r\n\t\t\t\t\t\tthis.highlighted = 0;\r\n\t\t\t\t\t\tthis.pushUnique(this.selected, JSON.parse(JSON.stringify(this.filtered[this.highlighted])));\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t},\r\n\t\tcheckDisabled: function () {\r\n\t\t\tthis.disable = this.selected.length <= 0;\r\n\t\t\treturn this.disable;\r\n\t\t},\r\n\t\tonClose: function () {\r\n\t\t\tthis.focused = false;\r\n\t\t},\r\n\t},\r\n\tasync created() {\r\n\t\tconst res = await GetApiTagsAll();\r\n\t\tthis.options = res.data;\r\n\t\tthis.loading = false;\r\n\r\n\t\tif (this.storyId) {\r\n\t\t\tconst res = await GetApiTagsStory(this.storyId);\r\n\t\t\tthis.selected = res.data;\r\n\t\t\tfor (const sel of this.selected) {\r\n\t\t\t\tthis.options.find((e) => e.id === sel.id).hidden = true;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this.preselected) {\r\n\t\t\tthis.selected = this.options.filter((o) => this.preselected.indexOf(o.id) !== -1);\r\n\t\t}\r\n\t},\r\n\ttemplate: `\r\n        <div class=\"tag-search-select\"\r\n             v-on:focusin=\"focused = true\">\r\n        <select class=\"output\"\r\n                :name=\"name\"\r\n                multiple=\"multiple\"\r\n                :id=\"name\"\r\n                :disabled=\"disable\">\r\n            <option v-for=\"s in selected\" :value=\"s.id\" selected>{{ s.name }}</option>\r\n        </select>\r\n\r\n        <div class=\"o-form-group tag-search\"\r\n             :class=\"inline ? 'inline' : null\"\r\n             :style=\"{ marginTop: hideLabels ? 0 : null }\"\r\n             v-closable=\"{\r\n                    exclude: ['search'],\r\n                    handler: 'onClose'\r\n                 }\">\r\n            <template v-if=\"!hideLabels\">\r\n                <label :for=\"name\">{{ label.replace(/([A-Z])/g, \" $1\") }}</label>\r\n                <p class=\"desc\" v-if=\"desc && !inline\">{{ desc }}</p>\r\n            </template>\r\n\r\n            <div class=\"searchbar\" ref=\"search\">\r\n                <div class=\"tags\">\r\n\r\n                    <div class=\"tag\" v-for=\"s in selected\">\r\n                        <div class=\"bg\" v-bind:style=\"{background: s.namespaceColor}\"></div>\r\n                        <span class=\"name\">\r\n                        {{ s.namespaceName ? s.namespaceName + ':' : '' }}{{ s.name }}\r\n            \t\t\t\t<o-icon icon=\"lucide:x\" class=\"material-icons-outlined\" v-on:click=\"selected.remove(s)\" ></o-icon>\r\n                      </span>\r\n                    </div>\r\n\r\n                    <input type=\"text\"\r\n                           class=\"search\"\r\n                           v-model=\"search\"\r\n                           v-on:keydown=\"handleInputKeys\"\r\n                           placeholder=\"Search...\">\r\n                </div>\r\n\r\n                <ol v-if=\"!loading && focused\" class=\"search-results\">\r\n                    <li v-for=\"(o, idx) in filtered\"\r\n                        :style=\"{background: o.rgba}\"\r\n                        :class=\"highlighted === idx ? 'hl' : null\"\r\n                        v-on:click=\"selected.pushUnique(o)\">\r\n                        <span class=\"name\">{{ o.namespace ? o.namespace + ':' : '' }}{{ o.name }}</span>\r\n                    </li>\r\n                </ol>\r\n            </div>\r\n\r\n        </div>\r\n\r\n        <span v-if=\"!validate && validateMsg\">{{ validationString }}</span>\r\n        </div>\r\n    `,\r\n});\r\n"
  ],
  "mappings": "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",
  "debugId": "D82589D6D4EBC76E64756E2164756E21",
  "names": []
}