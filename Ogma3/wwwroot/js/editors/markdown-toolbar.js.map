{
  "version": 3,
  "sources": ["..\\..\\FrontendCode\\typescript\\src-helpers\\dom.ts", "..\\..\\FrontendCode\\typescript\\src\\editors\\markdown-toolbar.ts"],
  "sourcesContent": [
    "const parser = new DOMParser();\r\n\r\nexport const parseDom = (html: string): HTMLElement => {\r\n\treturn parser.parseFromString(html, \"text/html\").body.firstElementChild as HTMLElement;\r\n};\r\n\r\n/**\r\n * Finds the first following sibling element matching a CSS selector.\r\n * Searches forward only from the starting element.\r\n *\r\n * @param el The starting element.\r\n * @param selector The CSS selector to match siblings against.\r\n * @returns The first matching following sibling, or null if none is found.\r\n */\r\nexport const findNextSibling = (el: Element, selector: string): Element | null => {\r\n\tif (!el) return null; // Handle cases where the starting element doesn't exist\r\n\r\n\tlet currentSibling = el.nextElementSibling; // Start with the immediate next sibling\r\n\r\n\t// Loop through all following siblings\r\n\twhile (currentSibling) {\r\n\t\t// Check if the current sibling matches the selector\r\n\t\tif (currentSibling.matches(selector)) {\r\n\t\t\t// Found the matching sibling\r\n\t\t\treturn currentSibling;\r\n\t\t}\r\n\t\t// Move to the next sibling\r\n\t\tcurrentSibling = currentSibling.nextElementSibling;\r\n\t}\r\n\r\n\t// No matching sibling found after the starting element\r\n\treturn null;\r\n};\r\n",
    "import { parseDom } from \"@h/dom\";\r\nimport { minifyHtml } from \"@h/minify.macro\" with { type: \"macro\" };\r\n\r\nenum Action {\r\n\tbold = \"bold\",\r\n\titalic = \"italic\",\r\n\tstrikethrough = \"strikethrough\",\r\n\tspoiler = \"spoiler\",\r\n\tlink = \"link\",\r\n}\r\n\r\ninterface PrefixSuffix {\r\n\tprefix: string;\r\n\tsuffix: string;\r\n}\r\n\r\nconst tpl = minifyHtml(`\r\n\t<nav class=\"button-group toolbar\">\r\n\t  <button type=\"button\" class=\"btn\" data-action=\"${Action.bold}\" title=\"${Action.bold}\">\r\n\t\t<o-icon icon=\"lucide:bold\" class=\"material-icons-outlined\"></o-icon>\r\n\t  </button>\r\n\t  <button type=\"button\" class=\"btn\" data-action=\"${Action.italic}\" title=\"${Action.italic}\">\r\n\t\t<o-icon icon=\"lucide:italic\" class=\"material-icons-outlined\" ></o-icon>\r\n\t  </button>\r\n\t  <button type=\"button\" class=\"btn\" data-action=\"${Action.strikethrough}\" title=\"${Action.strikethrough}\">\r\n\t\t<o-icon icon=\"lucide:strikethrough\" class=\"material-icons-outlined\" ></o-icon>\r\n\t  </button>\r\n\t  <button type=\"button\" class=\"btn\" data-action=\"${Action.spoiler}\" title=\"${Action.spoiler}\">\r\n\t\t<o-icon icon=\"lucide:eye-closed\" class=\"material-icons-outlined\" ></o-icon>\r\n\t  </button>\r\n\t  <button type=\"button\" class=\"btn\" data-action=\"${Action.link}\" title=\"${Action.link}\">\r\n\t\t<o-icon icon=\"lucide:link\" class=\"material-icons-outlined\" ></o-icon>\r\n\t  </button>\r\n\t</nav>`);\r\n\r\nconst map: Record<Action, PrefixSuffix> = {\r\n\t[Action.bold]: { prefix: \"**\", suffix: \"**\" },\r\n\t[Action.italic]: { prefix: \"*\", suffix: \"*\" },\r\n\t[Action.strikethrough]: { prefix: \"~\", suffix: \"~\" },\r\n\t[Action.spoiler]: { prefix: \"||\", suffix: \"||\" },\r\n\t[Action.link]: { prefix: \"[\", suffix: \"]()\" },\r\n};\r\n\r\nconst areas = [...document.querySelectorAll(\"[data-md=true]\")] as (HTMLTextAreaElement | HTMLInputElement)[];\r\n\r\nfor (const area of areas) {\r\n\tconst vDom = parseDom(tpl);\r\n\r\n\tfor (const btn of [...vDom.querySelectorAll(\"button.btn[data-action]\")] as HTMLElement[]) {\r\n\t\tconst action: Action = btn.dataset.action as Action;\r\n\r\n\t\tbtn.addEventListener(\"click\", () => {\r\n\t\t\tconst { prefix, suffix } = map[action];\r\n\t\t\tconst start = area.selectionStart;\r\n\t\t\tconst end = area.selectionEnd;\r\n\r\n\t\t\tconst text = area.value.substring(start, end);\r\n\r\n\t\t\tarea.setRangeText(`${prefix}${text}${suffix}`, start, end, \"preserve\");\r\n\t\t\tarea.selectionStart = area.selectionEnd = end + prefix.length;\r\n\t\t\tarea.focus();\r\n\t\t});\r\n\t}\r\n\r\n\tarea.before(vDom);\r\n}\r\n"
  ],
  "mappings": "AAAA,IAAM,EAAS,IAAI,UAEN,EAAW,CAAC,IAA8B,CACtD,OAAO,EAAO,gBAAgB,EAAM,WAAW,EAAE,KAAK,mBCgCvD,IAAM,EAAoC,EACxC,QAAc,CAAE,OAAQ,KAAM,OAAQ,IAAK,GAC3C,UAAgB,CAAE,OAAQ,IAAK,OAAQ,GAAI,GAC3C,iBAAuB,CAAE,OAAQ,IAAK,OAAQ,GAAI,GAClD,WAAiB,CAAE,OAAQ,KAAM,OAAQ,IAAK,GAC9C,QAAc,CAAE,OAAQ,IAAK,OAAQ,KAAM,CAC7C,EAEM,EAAQ,CAAC,GAAG,SAAS,iBAAiB,gBAAgB,CAAC,EAE7D,QAAW,KAAQ,EAAO,CACzB,IAAM,EAAO,EA9BF,kyBA8Bc,EAEzB,QAAW,IAAO,CAAC,GAAG,EAAK,iBAAiB,yBAAyB,CAAC,EAAoB,CACzF,IAAM,EAAiB,EAAI,QAAQ,OAEnC,EAAI,iBAAiB,QAAS,IAAM,CACnC,IAAQ,SAAQ,UAAW,EAAI,GACzB,EAAQ,EAAK,eACb,EAAM,EAAK,aAEX,EAAO,EAAK,MAAM,UAAU,EAAO,CAAG,EAE5C,EAAK,aAAa,GAAG,IAAS,IAAO,IAAU,EAAO,EAAK,UAAU,EACrE,EAAK,eAAiB,EAAK,aAAe,EAAM,EAAO,OACvD,EAAK,MAAM,EACX,EAGF,EAAK,OAAO,CAAI",
  "debugId": "D30AF9C5CBC882B764756E2164756E21",
  "names": []
}