{
  "version": 3,
  "sources": ["..\\..\\FrontendCode\\typescript\\generated\\typed-fetch.ts", "..\\..\\FrontendCode\\typescript\\generated\\paths-public.ts", "..\\..\\FrontendCode\\node_modules\\@angius\\tinytime\\dist\\tinytime.js", "..\\..\\FrontendCode\\typescript\\src-helpers\\tinytime-templates.ts", "..\\..\\FrontendCode\\typescript\\src\\notifications.ts"],
  "sourcesContent": [
    "interface TypedResponse<T> {\n\treadonly ok: boolean;\n\treadonly status: number;\n\treadonly statusText: string;\n\treadonly headers: Headers;\n\treadonly data: T;\n}\n\ntype HttpMethod = \"GET\" | \"POST\" | \"PUT\" | \"PATCH\" | \"DELETE\" | \"HEAD\";\n\nexport const get: HttpMethod = \"GET\";\nexport const post: HttpMethod = \"POST\";\nexport const put: HttpMethod = \"PUT\";\nexport const patch: HttpMethod = \"PATCH\";\nexport const del: HttpMethod = \"DELETE\";\nexport const head: HttpMethod = \"HEAD\";\n\nexport async function typedFetch<TOut, TBody>(\n\turl: string,\n\tmethod: HttpMethod | (string & { ___?: never }),\n\tbody?: TBody,\n\theaders?: HeadersInit,\n\toptions?: RequestInit,\n): Promise<Readonly<TypedResponse<TOut>>> {\n\tconst res = await fetch(url, {\n\t\tmethod: method,\n\t\theaders: {\n\t\t\t\"content-type\": \"application/json\",\n\t\t\t...headers,\n\t\t},\n\t\tbody: body && JSON.stringify(body),\n\t\t...options,\n\t});\n\n\tconst contentType = res.headers.get(\"content-type\");\n\n\tconst data: TOut = contentType?.includes(\"application/json\")\n\t\t? await res.json()\n\t\t: await res.text();\n\n\treturn {\n\t\tok: res.ok,\n\t\tstatus: res.status,\n\t\tstatusText: res.statusText,\n\t\theaders: res.headers,\n\t\tdata: data,\n\t};\n}\n",
    "import type {\n\tAddBookToShelfCommand,\n\tAddStoryToFolderCommand,\n\tAddStoryToFolderResponse,\n\tAdminIssueInviteCodeCommand,\n\tBlockUserCommand,\n\tCommentDto,\n\tCreateCommentCommand,\n\tCreateFaqCommand,\n\tCreateQuoteCommand,\n\tCreateQuotesFromJsonQuery,\n\tCreateRoleCommand,\n\tCreateShelfCommand,\n\tCreateTagCommand,\n\tCreateVoteCommand,\n\tDeleteVoteCommand,\n\tFaqDto,\n\tFollowUserCommand,\n\tFullQuoteDto,\n\tGetClubsWithStoryResult,\n\tGetFolderResult,\n\tGetJoinedClubsResponse,\n\tGetRevisionResult,\n\tGetSignInDataResult,\n\tGetThreadDetailsResult,\n\tGetUserNotificationsResult,\n\tInviteCodeDto,\n\tIssueInviteCodeCommand,\n\tJoinClubCommand,\n\tLeaveClubCommand,\n\tLockThreadCommand,\n\tMarkChapterAsReadCommand,\n\tMarkChapterAsUnreadCommand,\n\tQuickShelvesResult,\n\tQuoteDto,\n\tRatingApiDto,\n\tRemoveBookFromShelfCommand,\n\tRemoveBookFromShelfResult,\n\tReportContentCommand,\n\tRoleDto,\n\tShelfAddResult,\n\tShelfDto,\n\tShelfResult,\n\tSubscribeCommentsThreadCommand,\n\tTagDto,\n\tUnblockUserCommand,\n\tUnfollowUserCommand,\n\tUpdateCommentCommand,\n\tUpdateCommentResponse,\n\tUpdateFaqCommand,\n\tUpdateQuoteCommand,\n\tUpdateRoleCommand,\n\tUpdateRolesCommand,\n\tUpdateShelfCommand,\n\tUpdateTagCommand,\n\tVoteResult,\n} from './types-public';\nimport { typedFetch, get, post, put, patch, del, head } from './typed-fetch';\n\n\nexport const DeleteApiChaptersread = async (body: MarkChapterAsUnreadCommand, headers?: HeadersInit, options?: RequestInit) => await typedFetch<number[], MarkChapterAsUnreadCommand>(\"/api/chaptersread\",\n\tdel,\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const DeleteApiClubjoin = async (body: LeaveClubCommand, headers?: HeadersInit, options?: RequestInit) => await typedFetch<boolean|string, LeaveClubCommand>(\"/api/clubjoin\",\n\tdel,\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const DeleteApiComments = async (commentId: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<number, undefined>(`/api/comments/${commentId}`,\n\tdel,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const DeleteApiFaqs = async (id: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<number, undefined>(`/api/faqs?id=${id}`,\n\tdel,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const DeleteApiInviteCodes = async (codeId: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<number, undefined>(`/api/InviteCodes/${codeId}`,\n\tdel,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const DeleteApiNotifications = async (id: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<void, undefined>(`/api/notifications/${id}`,\n\tdel,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const DeleteApiQuotes = async (id: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<number, undefined>(`/api/quotes/${id}`,\n\tdel,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const DeleteApiRatings = async (ratingId: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<number, undefined>(`/api/ratings/${ratingId}`,\n\tdel,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const DeleteApiRoles = async (roleId: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<number, undefined>(`/api/roles?roleId=${roleId}`,\n\tdel,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const DeleteApiShelfStories = async (body: RemoveBookFromShelfCommand, headers?: HeadersInit, options?: RequestInit) => await typedFetch<RemoveBookFromShelfResult, RemoveBookFromShelfCommand>(\"/api/ShelfStories\",\n\tdel,\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const DeleteApiShelves = async (shelfId: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<number, undefined>(`/api/shelves/${shelfId}`,\n\tdel,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const DeleteApiSubscriptionsThread = async (threadId: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<boolean, undefined>(`/api/subscriptions/thread?threadId=${threadId}`,\n\tdel,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const DeleteApiTags = async (tagId: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<number, undefined>(`/api/tags?tagId=${tagId}`,\n\tdel,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const DeleteApiUsersBlock = async (body: UnblockUserCommand, headers?: HeadersInit, options?: RequestInit) => await typedFetch<boolean, UnblockUserCommand>(\"/api/users/block\",\n\tdel,\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const DeleteApiUsersFollow = async (body: UnfollowUserCommand, headers?: HeadersInit, options?: RequestInit) => await typedFetch<boolean, UnfollowUserCommand>(\"/api/users/follow\",\n\tdel,\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const DeleteApiVotes = async (body: DeleteVoteCommand, headers?: HeadersInit, options?: RequestInit) => await typedFetch<VoteResult, DeleteVoteCommand>(\"/api/votes\",\n\tdel,\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const GetAllQuotes = async (headers?: HeadersInit, options?: RequestInit) => await typedFetch<FullQuoteDto[], undefined>(\"/api/quotes\",\n\tget,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetApiChaptersread = async (id: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<number[], undefined>(`/api/chaptersread/${id}`,\n\tget,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetApiClubjoin = async (clubId: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<boolean, undefined>(`/api/clubjoin/${clubId}`,\n\tget,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetApiClubsStory = async (storyId: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<GetClubsWithStoryResult[], undefined>(`/api/clubs/story/${storyId}`,\n\tget,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetApiClubsUser = async (headers?: HeadersInit, options?: RequestInit) => await typedFetch<GetJoinedClubsResponse[], undefined>(\"/api/clubs/user\",\n\tget,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetApiComments = async (thread: number, page: number, highlight: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<{\n\telements: CommentDto[];\n\ttotal: number;\n\tperPage: number;\n\tpages: number;\n\tpage: number;\n}, undefined>(`/api/comments?thread=${thread}&page=${page}&highlight=${highlight}`,\n\tget,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetApiCommentsMd = async (commentId: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<string, undefined>(`/api/comments/${commentId}/md`,\n\tget,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetApiCommentsRevisions = async (commentId: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<GetRevisionResult[], undefined>(`/api/comments/${commentId}/revisions`,\n\tget,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetApiCommentsThread = async (threadId: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<GetThreadDetailsResult, undefined>(`/api/CommentsThread/${threadId}`,\n\tget,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetApiFaqs = async (headers?: HeadersInit, options?: RequestInit) => await typedFetch<FaqDto[], undefined>(\"/api/faqs\",\n\tget,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetApiFolders = async (clubId: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<GetFolderResult[], undefined>(`/api/folders?clubId=${clubId}`,\n\tget,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetApiInviteCodes = async (headers?: HeadersInit, options?: RequestInit) => await typedFetch<InviteCodeDto[], undefined>(\"/api/InviteCodes\",\n\tget,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetApiInviteCodesPaginated = async (page: number, perPage: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<InviteCodeDto[], undefined>(`/api/InviteCodes/paginated?page=${page}&perPage=${perPage}`,\n\tget,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetApiNotifications = async (headers?: HeadersInit, options?: RequestInit) => await typedFetch<GetUserNotificationsResult[], undefined>(\"/api/notifications\",\n\tget,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetApiNotificationsCount = async (headers?: HeadersInit, options?: RequestInit) => await typedFetch<number, undefined>(\"/api/notifications/count\",\n\tget,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetApiQuotesRandom = async (headers?: HeadersInit, options?: RequestInit) => await typedFetch<QuoteDto, undefined>(\"/api/quotes/random\",\n\tget,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetApiRatings = async (headers?: HeadersInit, options?: RequestInit) => await typedFetch<RatingApiDto[], undefined>(\"/api/ratings\",\n\tget,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetApiRoles = async (headers?: HeadersInit, options?: RequestInit) => await typedFetch<RoleDto[], undefined>(\"/api/roles\",\n\tget,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetApiShelfStories = async (storyId: number, page: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<ShelfResult[], undefined>(`/api/ShelfStories/${storyId}?page=${page}`,\n\tget,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetApiShelfStoriesQuick = async (storyId: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<QuickShelvesResult[], undefined>(`/api/ShelfStories/${storyId}/quick`,\n\tget,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetApiShelves = async (userName: string, page: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<ShelfDto[], undefined>(`/api/shelves/${userName}?page=${page}`,\n\tget,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetApiSignin = async (name: string, headers?: HeadersInit, options?: RequestInit) => await typedFetch<GetSignInDataResult, undefined>(`/api/signin?name=${name}`,\n\tget,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetApiSubscriptionsThread = async (threadId: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<boolean, undefined>(`/api/subscriptions/thread?threadId=${threadId}`,\n\tget,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetApiTags = async (page: number, perPage: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<TagDto[], undefined>(`/api/tags?page=${page}&perPage=${perPage}`,\n\tget,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetApiTagsAll = async (headers?: HeadersInit, options?: RequestInit) => await typedFetch<TagDto[], undefined>(\"/api/tags/all\",\n\tget,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetApiTagsSearch = async (searchString: string, headers?: HeadersInit, options?: RequestInit) => await typedFetch<TagDto[], undefined>(`/api/tags/search?searchString=${searchString}`,\n\tget,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetApiTagsStory = async (storyId: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<TagDto[], undefined>(`/api/tags/story/${storyId}`,\n\tget,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetApiTest = async (headers?: HeadersInit, options?: RequestInit) => await typedFetch<void, undefined>(\"/api/test\",\n\tget,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetApiUsersNames = async (name: string, headers?: HeadersInit, options?: RequestInit) => await typedFetch<string[]|string, undefined>(`/api/users/names?name=${name}`,\n\tget,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetApiVotes = async (storyId: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<VoteResult, undefined>(`/api/votes/${storyId}`,\n\tget,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetComment = async (commentId: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<CommentDto, undefined>(`/api/comments/${commentId}`,\n\tget,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetRatingById = async (id: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<RatingApiDto, undefined>(`/api/ratings/${id}`,\n\tget,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetRoleById = async (roleId: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<RoleDto, undefined>(`/api/roles/${roleId}`,\n\tget,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetShelf = async (shelfId: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<ShelfDto, undefined>(`/api/shelves/${shelfId}`,\n\tget,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetSingleFaq = async (faqId: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<FaqDto, undefined>(`/api/faqs/${faqId}`,\n\tget,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetSingleQuote = async (id: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<QuoteDto, undefined>(`/api/quotes/${id}`,\n\tget,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const GetSingleTag = async (tagId: number, headers?: HeadersInit, options?: RequestInit) => await typedFetch<TagDto, undefined>(`/api/tags/${tagId}`,\n\tget,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const PatchApiComments = async (body: UpdateCommentCommand, headers?: HeadersInit, options?: RequestInit) => await typedFetch<UpdateCommentResponse, UpdateCommentCommand>(\"/api/comments\",\n\tpatch,\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const PostApiChaptersread = async (body: MarkChapterAsReadCommand, headers?: HeadersInit, options?: RequestInit) => await typedFetch<number[], MarkChapterAsReadCommand>(\"/api/chaptersread\",\n\tpost,\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const PostApiClubjoin = async (body: JoinClubCommand, headers?: HeadersInit, options?: RequestInit) => await typedFetch<boolean, JoinClubCommand>(\"/api/clubjoin\",\n\tpost,\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const PostApiComments = async (body: CreateCommentCommand, headers?: HeadersInit, options?: RequestInit) => await typedFetch<void, CreateCommentCommand>(\"/api/comments\",\n\tpost,\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const PostApiCommentsThreadLock = async (body: LockThreadCommand, headers?: HeadersInit, options?: RequestInit) => await typedFetch<boolean, LockThreadCommand>(\"/api/CommentsThread/lock\",\n\tpost,\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const PostApiFaqs = async (body: CreateFaqCommand, headers?: HeadersInit, options?: RequestInit) => await typedFetch<FaqDto, CreateFaqCommand>(\"/api/faqs\",\n\tpost,\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const PostApiFoldersAddStory = async (body: AddStoryToFolderCommand, headers?: HeadersInit, options?: RequestInit) => await typedFetch<AddStoryToFolderResponse|string, AddStoryToFolderCommand>(\"/api/folders/AddStory\",\n\tpost,\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const PostApiInviteCodes = async (headers?: HeadersInit, options?: RequestInit) => await typedFetch<InviteCodeDto|string, IssueInviteCodeCommand>(\"/api/InviteCodes\",\n\tpost,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const PostApiInviteCodesNoLimit = async (headers?: HeadersInit, options?: RequestInit) => await typedFetch<InviteCodeDto, AdminIssueInviteCodeCommand>(\"/api/InviteCodes/no-limit\",\n\tpost,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const PostApiQuotes = async (body: CreateQuoteCommand, headers?: HeadersInit, options?: RequestInit) => await typedFetch<QuoteDto, CreateQuoteCommand>(\"/api/quotes\",\n\tpost,\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const PostApiQuotesJson = async (body: CreateQuotesFromJsonQuery, headers?: HeadersInit, options?: RequestInit) => await typedFetch<number, CreateQuotesFromJsonQuery>(\"/api/quotes/json\",\n\tpost,\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const PostApiRatings = async (headers?: HeadersInit, options?: RequestInit) => await typedFetch<RatingApiDto, undefined>(\"/api/ratings\",\n\tpost,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const PostApiReports = async (body: ReportContentCommand, headers?: HeadersInit, options?: RequestInit) => await typedFetch<number, ReportContentCommand>(\"/api/reports\",\n\tpost,\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const PostApiRoles = async (body: CreateRoleCommand, headers?: HeadersInit, options?: RequestInit) => await typedFetch<RoleDto|string, CreateRoleCommand>(\"/api/roles\",\n\tpost,\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const PostApiShelfStories = async (body: AddBookToShelfCommand, headers?: HeadersInit, options?: RequestInit) => await typedFetch<ShelfAddResult, AddBookToShelfCommand>(\"/api/ShelfStories\",\n\tpost,\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const PostApiShelves = async (body: CreateShelfCommand, headers?: HeadersInit, options?: RequestInit) => await typedFetch<ShelfDto, CreateShelfCommand>(\"/api/shelves\",\n\tpost,\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const PostApiSubscriptionsThread = async (body: SubscribeCommentsThreadCommand, headers?: HeadersInit, options?: RequestInit) => await typedFetch<boolean, SubscribeCommentsThreadCommand>(\"/api/subscriptions/thread\",\n\tpost,\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const PostApiTags = async (body: CreateTagCommand, headers?: HeadersInit, options?: RequestInit) => await typedFetch<TagDto|string, CreateTagCommand>(\"/api/tags\",\n\tpost,\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const PostApiUsersBlock = async (body: BlockUserCommand, headers?: HeadersInit, options?: RequestInit) => await typedFetch<boolean, BlockUserCommand>(\"/api/users/block\",\n\tpost,\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const PostApiUsersFollow = async (body: FollowUserCommand, headers?: HeadersInit, options?: RequestInit) => await typedFetch<boolean, FollowUserCommand>(\"/api/users/follow\",\n\tpost,\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const PostApiUsersRoles = async (body: UpdateRolesCommand, headers?: HeadersInit, options?: RequestInit) => await typedFetch<void, UpdateRolesCommand>(\"/api/users/roles\",\n\tpost,\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const PostApiVotes = async (body: CreateVoteCommand, headers?: HeadersInit, options?: RequestInit) => await typedFetch<VoteResult, CreateVoteCommand>(\"/api/votes\",\n\tpost,\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const PutApiFaqs = async (body: UpdateFaqCommand, headers?: HeadersInit, options?: RequestInit) => await typedFetch<void, UpdateFaqCommand>(\"/api/faqs\",\n\tput,\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const PutApiQuotes = async (body: UpdateQuoteCommand, headers?: HeadersInit, options?: RequestInit) => await typedFetch<void, UpdateQuoteCommand>(\"/api/quotes\",\n\tput,\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const PutApiRatings = async (headers?: HeadersInit, options?: RequestInit) => await typedFetch<RatingApiDto, undefined>(\"/api/ratings\",\n\tput,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n\nexport const PutApiRoles = async (body: UpdateRoleCommand, headers?: HeadersInit, options?: RequestInit) => await typedFetch<void, UpdateRoleCommand>(\"/api/roles\",\n\tput,\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const PutApiShelves = async (body: UpdateShelfCommand, headers?: HeadersInit, options?: RequestInit) => await typedFetch<void, UpdateShelfCommand>(\"/api/shelves\",\n\tput,\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const PutApiTags = async (body: UpdateTagCommand, headers?: HeadersInit, options?: RequestInit) => await typedFetch<string, UpdateTagCommand>(\"/api/tags\",\n\tput,\n\tbody,\n\theaders,\n\toptions,\n);\n\n\nexport const UpdateLastActive = async (headers?: HeadersInit, options?: RequestInit) => await typedFetch<number, undefined>(\"/api/useractivity\",\n\thead,\n\tundefined,\n\theaders,\n\toptions,\n);\n\n",
    "// src/subs.ts\nvar SubToTypeIdentifierMap = {\n  MMMM: 1 /* FullMonth */,\n  MM: 2 /* PartialMonth */,\n  Mo: 12 /* NumberMonth */,\n  YYYY: 3 /* FullYear */,\n  YY: 4 /* PartialYear */,\n  dddd: 5 /* DayOfTheWeek */,\n  DD: 11 /* DayOfTheMonth */,\n  Do: 10 /* Day */,\n  h: 6 /* Hour */,\n  H: 13 /* Hour24 */,\n  mm: 7 /* Minutes */,\n  ss: 8 /* Seconds */,\n  a: 9 /* PostOrAnteMeridiem */\n};\n\n// src/compiler.ts\nvar months = [\n  \"January\",\n  \"February\",\n  \"March\",\n  \"April\",\n  \"May\",\n  \"June\",\n  \"July\",\n  \"August\",\n  \"September\",\n  \"October\",\n  \"November\",\n  \"December\"\n];\nvar days = [\n  \"Sunday\",\n  \"Monday\",\n  \"Tuesday\",\n  \"Wednesday\",\n  \"Thursday\",\n  \"Friday\",\n  \"Saturday\"\n];\nfunction padWithZeros(int) {\n  return int < 10 ? `0${int}` : `${int}`;\n}\nfunction suffix(int) {\n  const s = [\"th\", \"st\", \"nd\", \"rd\"];\n  const v = int % 100;\n  const suf = s[(v - 20) % 10] || s[v] || s[0];\n  return `${int}${suf}`;\n}\nfunction compiler(tokens, date, options) {\n  const month = date.getMonth();\n  const year = date.getFullYear();\n  const hours = date.getHours();\n  const seconds = date.getSeconds();\n  const minutes = date.getMinutes();\n  const day = date.getDate();\n  let compiled = \"\";\n  let index = 0;\n  while (index < tokens.length) {\n    const token = tokens[index];\n    const tokenHandlers = {\n      [0 /* UserText */]: () => {\n        compiled += token[1];\n      },\n      [10 /* Day */]: () => {\n        compiled += suffix(day);\n      },\n      [2 /* PartialMonth */]: () => {\n        compiled += months[month]?.slice(0, 3);\n      },\n      [1 /* FullMonth */]: () => {\n        compiled += months[month];\n      },\n      [12 /* NumberMonth */]: () => {\n        const next = month + 1;\n        compiled += options.padMonth ? padWithZeros(next) : `${next}`;\n      },\n      [3 /* FullYear */]: () => {\n        compiled += year;\n      },\n      [4 /* PartialYear */]: () => {\n        compiled += `${year % 100}`;\n      },\n      [5 /* DayOfTheWeek */]: () => {\n        compiled += days[date.getDay()];\n      },\n      [11 /* DayOfTheMonth */]: () => {\n        compiled += options.padDays ? padWithZeros(day) : day;\n      },\n      [6 /* Hour */]: () => {\n        const hour = hours % 12 || 12;\n        compiled += options.padHours ? padWithZeros(hour) : hour;\n      },\n      [13 /* Hour24 */]: () => {\n        compiled += options.padHours ? padWithZeros(hours) : hours;\n      },\n      [7 /* Minutes */]: () => {\n        compiled += padWithZeros(minutes);\n      },\n      [8 /* Seconds */]: () => {\n        compiled += padWithZeros(seconds);\n      },\n      [9 /* PostOrAnteMeridiem */]: () => {\n        compiled += hours >= 12 ? \"PM\" : \"AM\";\n      }\n    };\n    tokenHandlers[token[0]]();\n    index++;\n  }\n  return compiled;\n}\n\n// src/parser.ts\nfunction parser(template) {\n  const tokens = [];\n  let position = 0;\n  let text = \"\";\n  while (position < template.length) {\n    let char = template[position++];\n    if (char === \"{\") {\n      if (text) {\n        tokens.push([0 /* UserText */, text]);\n      }\n      text = \"\";\n      let sub = \"\";\n      char = template[position++];\n      while (char !== \"}\") {\n        sub += char;\n        char = template[position++];\n      }\n      const identifier = SubToTypeIdentifierMap[sub];\n      if (!identifier) {\n        throw new Error(`Unknown substitution: ${sub}`);\n      }\n      tokens.push([identifier]);\n    } else {\n      text += char;\n    }\n  }\n  if (text) {\n    tokens.push([0 /* UserText */, text]);\n  }\n  return tokens;\n}\n\n// src/tinytime.ts\nvar tinytime = (template, options = {}) => {\n  const templateAST = parser(template);\n  return {\n    render(date) {\n      return compiler(templateAST, date, options);\n    }\n  };\n};\nexport {\n  tinytime\n};\n",
    "import { tinytime } from \"@angius/tinytime\";\r\n\r\nconst opts = { padDays: true, padMonth: true, padHours: true };\r\n\r\nexport const iso8601 = tinytime(\"{YYYY}-{MM}-{DD} {H}:{mm}:{ss}\", opts);\r\nexport const EU = tinytime(\"{DD}.{MM}.{YYYY} {H}:{mm}\", opts);\r\nexport const long = tinytime(\"{Do} {MMMM} {YYYY}, {H}:{mm}\", opts);\r\n",
    "import { DeleteApiNotifications as deleteNotification, GetApiNotifications as getNotifications } from \"@g/paths-public\";\r\nimport type { GetUserNotificationsResult } from \"@g/types-public\";\r\nimport { long } from \"@h/tinytime-templates\";\r\n\r\n// @ts-ignore\r\nnew Vue({\r\n\tel: \"#notifications\",\r\n\tdata: {\r\n\t\tnotifications: [] as GetUserNotificationsResult[],\r\n\t\tcsrf: null,\r\n\t},\r\n\tmethods: {\r\n\t\tload: async function () {\r\n\t\t\tconst data = await getNotifications();\r\n\r\n\t\t\tif (!data.ok) return;\r\n\r\n\t\t\tthis.notifications = data.data;\r\n\t\t},\r\n\r\n\t\tdeleteNotif: async function (id: number) {\r\n\t\t\tconst res = await deleteNotification(id, {\r\n\t\t\t\tRequestVerificationToken: this.csrf,\r\n\t\t\t});\r\n\r\n\t\t\tif (!res.ok) return;\r\n\r\n\t\t\tawait this.load();\r\n\t\t},\r\n\r\n\t\tparseTime: (dt: string) => long.render(new Date(dt)),\r\n\t},\r\n\r\n\tasync mounted() {\r\n\t\tawait this.load();\r\n\t\tthis.csrf = (document.querySelector(\"input[name=__RequestVerificationToken]\") as HTMLInputElement).value;\r\n\t},\r\n});\r\n"
  ],
  "mappings": "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",
  "debugId": "7C71688A4854FEBA64756E2164756E21",
  "names": []
}