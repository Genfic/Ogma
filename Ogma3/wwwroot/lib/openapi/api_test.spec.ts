/**
 * My Title
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as api from "./api"
import { Configuration } from "./configuration"

const config: Configuration = {}

describe("ChaptersReadApi", () => {
  let instance: api.ChaptersReadApi
  beforeEach(function() {
    instance = new api.ChaptersReadApi(config)
  });

  test("chaptersReadDeleteChaptersRead", () => {
    const body: api.ChaptersReadsMarkChapterAsUnreadCommand = undefined
    return expect(instance.chaptersReadDeleteChaptersRead(body, {})).resolves.toBe(null)
  })
  test("chaptersReadGetChaptersRead", () => {
    const story: number = 789
    return expect(instance.chaptersReadGetChaptersRead(story, {})).resolves.toBe(null)
  })
  test("chaptersReadPostChaptersRead", () => {
    const body: api.ChaptersReadsMarkChapterAsReadCommand = undefined
    return expect(instance.chaptersReadPostChaptersRead(body, {})).resolves.toBe(null)
  })
})

describe("ClubJoinApi", () => {
  let instance: api.ClubJoinApi
  beforeEach(function() {
    instance = new api.ClubJoinApi(config)
  });

  test("clubJoinCheckMembershipStatus", () => {
    const club: number = 789
    return expect(instance.clubJoinCheckMembershipStatus(club, {})).resolves.toBe(null)
  })
  test("clubJoinJoinClub", () => {
    const body: api.ClubJoinJoinClubCommand = undefined
    return expect(instance.clubJoinJoinClub(body, {})).resolves.toBe(null)
  })
  test("clubJoinLeaveClub", () => {
    const body: api.ClubJoinLeaveClubCommand = undefined
    return expect(instance.clubJoinLeaveClub(body, {})).resolves.toBe(null)
  })
})

describe("ClubsApi", () => {
  let instance: api.ClubsApi
  beforeEach(function() {
    instance = new api.ClubsApi(config)
  });

  test("clubsGetClubsWithStory", () => {
    const id: number = 789
    return expect(instance.clubsGetClubsWithStory(id, {})).resolves.toBe(null)
  })
  test("clubsGetUserClubs", () => {
    return expect(instance.clubsGetUserClubs({})).resolves.toBe(null)
  })
  test("clubsPing", () => {
    return expect(instance.clubsPing({})).resolves.toBe(null)
  })
})

describe("CommentsApi", () => {
  let instance: api.CommentsApi
  beforeEach(function() {
    instance = new api.CommentsApi(config)
  });

  test("commentsDeleteComment", () => {
    const id: number = 789
    return expect(instance.commentsDeleteComment(id, {})).resolves.toBe(null)
  })
  test("commentsGetComment", () => {
    const id: number = 789
    return expect(instance.commentsGetComment(id, {})).resolves.toBe(null)
  })
  test("commentsGetComments", () => {
    const thread: number = 789
    const page: number = 56
    const highlight: number = 789
    return expect(instance.commentsGetComments(thread, page, highlight, {})).resolves.toBe(null)
  })
  test("commentsGetMarkdown", () => {
    const id: number = 789
    return expect(instance.commentsGetMarkdown(id, {})).resolves.toBe(null)
  })
  test("commentsGetRevisions", () => {
    const id: number = 789
    return expect(instance.commentsGetRevisions(id, {})).resolves.toBe(null)
  })
  test("commentsPostComment", () => {
    const body: api.ApiCommentsControllerPostData = undefined
    return expect(instance.commentsPostComment(body, {})).resolves.toBe(null)
  })
  test("commentsPutComment", () => {
    const body: api.ApiCommentsControllerPatchData = undefined
    return expect(instance.commentsPutComment(body, {})).resolves.toBe(null)
  })
})

describe("CommentsThreadApi", () => {
  let instance: api.CommentsThreadApi
  beforeEach(function() {
    instance = new api.CommentsThreadApi(config)
  });

  test("commentsThreadGetLockStatus", () => {
    const id: number = 789
    return expect(instance.commentsThreadGetLockStatus(id, {})).resolves.toBe(null)
  })
  test("commentsThreadGetPermissions", () => {
    const id: number = 789
    return expect(instance.commentsThreadGetPermissions(id, {})).resolves.toBe(null)
  })
  test("commentsThreadLockThread", () => {
    const body: api.ApiCommentsThreadControllerPostData = undefined
    return expect(instance.commentsThreadLockThread(body, {})).resolves.toBe(null)
  })
  test("commentsThreadPing", () => {
    return expect(instance.commentsThreadPing({})).resolves.toBe(null)
  })
})

describe("ContentBlockApi", () => {
  let instance: api.ContentBlockApi
  beforeEach(function() {
    instance = new api.ContentBlockApi(config)
  });

  test("contentBlockBlockBlogpost", () => {
    const body: api.CommandOfBlogpost = undefined
    return expect(instance.contentBlockBlockBlogpost(body, {})).resolves.toBe(null)
  })
  test("contentBlockBlockChapter", () => {
    const body: api.CommandOfChapter = undefined
    return expect(instance.contentBlockBlockChapter(body, {})).resolves.toBe(null)
  })
  test("contentBlockBlockStory", () => {
    const body: api.CommandOfStory = undefined
    return expect(instance.contentBlockBlockStory(body, {})).resolves.toBe(null)
  })
  test("contentBlockPing", () => {
    return expect(instance.contentBlockPing({})).resolves.toBe(null)
  })
})

describe("ErrorApi", () => {
  let instance: api.ErrorApi
  beforeEach(function() {
    instance = new api.ErrorApi(config)
  });

  test("errorOnGet", () => {
    const code: number = 56
    return expect(instance.errorOnGet(code, {})).resolves.toBe(null)
  })
})

describe("FaqsApi", () => {
  let instance: api.FaqsApi
  beforeEach(function() {
    instance = new api.FaqsApi(config)
  });

  test("faqsDeleteFaq", () => {
    const id: number = 789
    return expect(instance.faqsDeleteFaq(id, {})).resolves.toBe(null)
  })
  test("faqsGetFaq", () => {
    const id: number = 789
    return expect(instance.faqsGetFaq(id, {})).resolves.toBe(null)
  })
  test("faqsGetFaqs", () => {
    return expect(instance.faqsGetFaqs({})).resolves.toBe(null)
  })
  test("faqsPostFaq", () => {
    const body: api.FaqsCreateFaqCommand = undefined
    return expect(instance.faqsPostFaq(body, {})).resolves.toBe(null)
  })
  test("faqsPutFaq", () => {
    const body: api.FaqsUpdateFaqCommand = undefined
    return expect(instance.faqsPutFaq(body, {})).resolves.toBe(null)
  })
})

describe("FoldersApi", () => {
  let instance: api.FoldersApi
  beforeEach(function() {
    instance = new api.FoldersApi(config)
  });

  test("foldersAddStory", () => {
    const body: api.FoldersAddStoryToFolderCommand = undefined
    return expect(instance.foldersAddStory(body, {})).resolves.toBe(null)
  })
  test("foldersGetFoldersOfClub", () => {
    const id: number = 789
    return expect(instance.foldersGetFoldersOfClub(id, {})).resolves.toBe(null)
  })
  test("foldersPing", () => {
    return expect(instance.foldersPing({})).resolves.toBe(null)
  })
})

describe("InviteCodesApi", () => {
  let instance: api.InviteCodesApi
  beforeEach(function() {
    instance = new api.InviteCodesApi(config)
  });

  test("inviteCodesDeleteInviteCode", () => {
    const id: number = 789
    return expect(instance.inviteCodesDeleteInviteCode(id, {})).resolves.toBe(null)
  })
  test("inviteCodesGetInviteCodes", () => {
    return expect(instance.inviteCodesGetInviteCodes({})).resolves.toBe(null)
  })
  test("inviteCodesGetPaginatedInviteCodes", () => {
    const page: number = 56
    const perPage: number = 56
    return expect(instance.inviteCodesGetPaginatedInviteCodes(page, perPage, {})).resolves.toBe(null)
  })
  test("inviteCodesPostInviteCode", () => {
    return expect(instance.inviteCodesPostInviteCode({})).resolves.toBe(null)
  })
  test("inviteCodesPostInviteCodeNoLimit", () => {
    return expect(instance.inviteCodesPostInviteCodeNoLimit({})).resolves.toBe(null)
  })
})

describe("NotificationsApi", () => {
  let instance: api.NotificationsApi
  beforeEach(function() {
    instance = new api.NotificationsApi(config)
  });

  test("notificationsCountUserNotifications", () => {
    return expect(instance.notificationsCountUserNotifications({})).resolves.toBe(null)
  })
  test("notificationsDelete", () => {
    const id: number = 789
    return expect(instance.notificationsDelete(id, {})).resolves.toBe(null)
  })
  test("notificationsGetUserNotifications", () => {
    return expect(instance.notificationsGetUserNotifications({})).resolves.toBe(null)
  })
})

describe("QuotesApi", () => {
  let instance: api.QuotesApi
  beforeEach(function() {
    instance = new api.QuotesApi(config)
  });

  test("quotesDeleteQuote", () => {
    const body: api.QuotesDeleteQuoteCommand = undefined
    return expect(instance.quotesDeleteQuote(body, {})).resolves.toBe(null)
  })
  test("quotesGetQuote", () => {
    const id: number = 789
    return expect(instance.quotesGetQuote(id, {})).resolves.toBe(null)
  })
  test("quotesGetQuotes", () => {
    return expect(instance.quotesGetQuotes({})).resolves.toBe(null)
  })
  test("quotesGetRandomQuote", () => {
    return expect(instance.quotesGetRandomQuote({})).resolves.toBe(null)
  })
  test("quotesPostJson", () => {
    return expect(instance.quotesPostJson({})).resolves.toBe(null)
  })
  test("quotesPostQuote", () => {
    const body: api.QuotesCreateQuoteCommand = undefined
    return expect(instance.quotesPostQuote(body, {})).resolves.toBe(null)
  })
  test("quotesPutQuote", () => {
    const body: api.QuotesUpdateQuoteCommand = undefined
    return expect(instance.quotesPutQuote(body, {})).resolves.toBe(null)
  })
})

describe("RatingsApi", () => {
  let instance: api.RatingsApi
  beforeEach(function() {
    instance = new api.RatingsApi(config)
  });

  test("ratingsDeleteRating", () => {
    const id: number = 789
    return expect(instance.ratingsDeleteRating(id, {})).resolves.toBe(null)
  })
  test("ratingsGetRating", () => {
    const id: number = 789
    return expect(instance.ratingsGetRating(id, {})).resolves.toBe(null)
  })
  test("ratingsGetRatings", () => {
    return expect(instance.ratingsGetRatings({})).resolves.toBe(null)
  })
  test("ratingsPostRating", () => {
    const name: string = "name_example"
    const description: string = "description_example"
    const blacklistedByDefault: boolean = true
    const order: number = 56
    const icon: Blob = "icon_example"
    return expect(instance.ratingsPostRating(name, description, blacklistedByDefault, order, icon, {})).resolves.toBe(null)
  })
  test("ratingsPutRating", () => {
    const id: number = 789
    const name: string = "name_example"
    const description: string = "description_example"
    const blacklistedByDefault: boolean = true
    const order: number = 56
    const icon: Blob = "icon_example"
    return expect(instance.ratingsPutRating(id, name, description, blacklistedByDefault, order, icon, {})).resolves.toBe(null)
  })
})

describe("ReportsApi", () => {
  let instance: api.ReportsApi
  beforeEach(function() {
    instance = new api.ReportsApi(config)
  });

  test("reportsPing", () => {
    return expect(instance.reportsPing({})).resolves.toBe(null)
  })
  test("reportsPostReports", () => {
    const body: api.ReportsReportContentCommand = undefined
    return expect(instance.reportsPostReports(body, {})).resolves.toBe(null)
  })
})

describe("RolesApi", () => {
  let instance: api.RolesApi
  beforeEach(function() {
    instance = new api.RolesApi(config)
  });

  test("rolesDeleteRole", () => {
    const id: number = 789
    return expect(instance.rolesDeleteRole(id, {})).resolves.toBe(null)
  })
  test("rolesGetRole", () => {
    const id: number = 789
    return expect(instance.rolesGetRole(id, {})).resolves.toBe(null)
  })
  test("rolesGetRoles", () => {
    return expect(instance.rolesGetRoles({})).resolves.toBe(null)
  })
  test("rolesPostRole", () => {
    const body: api.RolesCreateRoleCommand = undefined
    return expect(instance.rolesPostRole(body, {})).resolves.toBe(null)
  })
  test("rolesPutRole", () => {
    const body: api.RolesUpdateRoleCommand = undefined
    return expect(instance.rolesPutRole(body, {})).resolves.toBe(null)
  })
})

describe("RssApi", () => {
  let instance: api.RssApi
  beforeEach(function() {
    instance = new api.RssApi(config)
  });

  test("rssGetBlogposts", () => {
    return expect(instance.rssGetBlogposts({})).resolves.toBe(null)
  })
  test("rssGetStories", () => {
    return expect(instance.rssGetStories({})).resolves.toBe(null)
  })
  test("rssStories", () => {
    return expect(instance.rssStories({})).resolves.toBe(null)
  })
})

describe("ShelfStoriesApi", () => {
  let instance: api.ShelfStoriesApi
  beforeEach(function() {
    instance = new api.ShelfStoriesApi(config)
  });

  test("shelfStoriesAddToShelf", () => {
    const shelfId: number = 789
    const storyId: number = 789
    return expect(instance.shelfStoriesAddToShelf(shelfId, storyId, {})).resolves.toBe(null)
  })
  test("shelfStoriesGetUserQuickShelves", () => {
    const storyId: number = 789
    return expect(instance.shelfStoriesGetUserQuickShelves(storyId, {})).resolves.toBe(null)
  })
  test("shelfStoriesGetUserShelvesPaginated", () => {
    const storyId: number = 789
    const page: number = 56
    return expect(instance.shelfStoriesGetUserShelvesPaginated(storyId, page, {})).resolves.toBe(null)
  })
  test("shelfStoriesPing", () => {
    return expect(instance.shelfStoriesPing({})).resolves.toBe(null)
  })
  test("shelfStoriesRemoveFromShelf", () => {
    const shelfId: number = 789
    const storyId: number = 789
    return expect(instance.shelfStoriesRemoveFromShelf(shelfId, storyId, {})).resolves.toBe(null)
  })
})

describe("ShelvesApi", () => {
  let instance: api.ShelvesApi
  beforeEach(function() {
    instance = new api.ShelvesApi(config)
  });

  test("shelvesDeleteShelf", () => {
    const id: number = 789
    return expect(instance.shelvesDeleteShelf(id, {})).resolves.toBe(null)
  })
  test("shelvesGetShelf", () => {
    const id: number = 789
    return expect(instance.shelvesGetShelf(id, {})).resolves.toBe(null)
  })
  test("shelvesGetUserShelves", () => {
    const name: string = "name_example"
    const page: number = 56
    return expect(instance.shelvesGetUserShelves(name, page, {})).resolves.toBe(null)
  })
  test("shelvesPostShelf", () => {
    const body: api.ShelvesCreateShelfCommand = undefined
    return expect(instance.shelvesPostShelf(body, {})).resolves.toBe(null)
  })
  test("shelvesPutShelf", () => {
    const body: api.ShelvesUpdateShelfCommand = undefined
    return expect(instance.shelvesPutShelf(body, {})).resolves.toBe(null)
  })
})

describe("SignInApi", () => {
  let instance: api.SignInApi
  beforeEach(function() {
    instance = new api.SignInApi(config)
  });

  test("signInGetSignIn", () => {
    const name: string = "name_example"
    return expect(instance.signInGetSignIn(name, {})).resolves.toBe(null)
  })
})

describe("SubscriptionsApi", () => {
  let instance: api.SubscriptionsApi
  beforeEach(function() {
    instance = new api.SubscriptionsApi(config)
  });

  test("subscriptionsIsSubscribedToThread", () => {
    const threadId: number = 789
    return expect(instance.subscriptionsIsSubscribedToThread(threadId, {})).resolves.toBe(null)
  })
  test("subscriptionsPing", () => {
    return expect(instance.subscriptionsPing({})).resolves.toBe(null)
  })
  test("subscriptionsSubscribeThread", () => {
    const body: api.SubscriptionsSubscribeCommentsThreadCommand = undefined
    return expect(instance.subscriptionsSubscribeThread(body, {})).resolves.toBe(null)
  })
  test("subscriptionsUnsubscribeThread", () => {
    const body: api.SubscriptionsUnsubscribeCommentsThreadCommand = undefined
    return expect(instance.subscriptionsUnsubscribeThread(body, {})).resolves.toBe(null)
  })
})

describe("TagsApi", () => {
  let instance: api.TagsApi
  beforeEach(function() {
    instance = new api.TagsApi(config)
  });

  test("tagsDeleteTag", () => {
    const id: number = 789
    return expect(instance.tagsDeleteTag(id, {})).resolves.toBe(null)
  })
  test("tagsGetAll", () => {
    return expect(instance.tagsGetAll({})).resolves.toBe(null)
  })
  test("tagsGetStoryTags", () => {
    const id: number = 789
    return expect(instance.tagsGetStoryTags(id, {})).resolves.toBe(null)
  })
  test("tagsGetTag", () => {
    const id: number = 789
    return expect(instance.tagsGetTag(id, {})).resolves.toBe(null)
  })
  test("tagsGetTags", () => {
    const page: number = 56
    const perPage: number = 56
    return expect(instance.tagsGetTags(page, perPage, {})).resolves.toBe(null)
  })
  test("tagsPostTag", () => {
    const body: api.TagsCreateTagCommand = undefined
    return expect(instance.tagsPostTag(body, {})).resolves.toBe(null)
  })
  test("tagsPutTag", () => {
    const body: api.TagsUpdateTagCommand = undefined
    return expect(instance.tagsPutTag(body, {})).resolves.toBe(null)
  })
})

describe("UserActivityApi", () => {
  let instance: api.UserActivityApi
  beforeEach(function() {
    instance = new api.UserActivityApi(config)
  });

  test("userActivityPing", () => {
    return expect(instance.userActivityPing({})).resolves.toBe(null)
  })
  test("userActivityUpdateLastActive", () => {
    return expect(instance.userActivityUpdateLastActive({})).resolves.toBe(null)
  })
})

describe("UsersApi", () => {
  let instance: api.UsersApi
  beforeEach(function() {
    instance = new api.UsersApi(config)
  });

  test("usersBanUser", () => {
    const body: api.BanData = undefined
    return expect(instance.usersBanUser(body, {})).resolves.toBe(null)
  })
  test("usersBlockUser", () => {
    const body: api.BlockPostData = undefined
    return expect(instance.usersBlockUser(body, {})).resolves.toBe(null)
  })
  test("usersFollowUser", () => {
    const body: api.BlockPostData = undefined
    return expect(instance.usersFollowUser(body, {})).resolves.toBe(null)
  })
  test("usersManageRoles", () => {
    const body: api.RoleData = undefined
    return expect(instance.usersManageRoles(body, {})).resolves.toBe(null)
  })
  test("usersMuteUser", () => {
    const body: api.BanData = undefined
    return expect(instance.usersMuteUser(body, {})).resolves.toBe(null)
  })
  test("usersPing", () => {
    return expect(instance.usersPing({})).resolves.toBe(null)
  })
})

describe("VotesApi", () => {
  let instance: api.VotesApi
  beforeEach(function() {
    instance = new api.VotesApi(config)
  });

  test("votesDeleteVote", () => {
    const body: api.VotesDeleteVoteCommand = undefined
    return expect(instance.votesDeleteVote(body, {})).resolves.toBe(null)
  })
  test("votesGetVotes", () => {
    const storyId: number = 789
    return expect(instance.votesGetVotes(storyId, {})).resolves.toBe(null)
  })
  test("votesPostVote", () => {
    const body: api.VotesCreateVoteCommand = undefined
    return expect(instance.votesPostVote(body, {})).resolves.toBe(null)
  })
})

