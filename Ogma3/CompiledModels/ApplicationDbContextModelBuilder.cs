// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Migrations;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace CompiledModels
{
    public partial class ApplicationDbContextModel
    {
        partial void Initialize()
        {
            var identityRoleClaim = IdentityRoleClaimEntityType.Create(this);
            var identityUserClaim = IdentityUserClaimEntityType.Create(this);
            var identityUserLogin = IdentityUserLoginEntityType.Create(this);
            var identityUserToken = IdentityUserTokenEntityType.Create(this);
            var blacklistedRating = BlacklistedRatingEntityType.Create(this);
            var blacklistedTag = BlacklistedTagEntityType.Create(this);
            var contentBlock = ContentBlockEntityType.Create(this);
            var blogpost = BlogpostEntityType.Create(this);
            var chapter = ChapterEntityType.Create(this);
            var chaptersRead = ChaptersReadEntityType.Create(this);
            var clubModeratorAction = ClubModeratorActionEntityType.Create(this);
            var clubThread = ClubThreadEntityType.Create(this);
            var club = ClubEntityType.Create(this);
            var clubMember = ClubMemberEntityType.Create(this);
            var comment = CommentEntityType.Create(this);
            var commentRevision = CommentRevisionEntityType.Create(this);
            var commentsThread = CommentsThreadEntityType.Create(this);
            var commentsThreadSubscriber = CommentsThreadSubscriberEntityType.Create(this);
            var document = DocumentEntityType.Create(this);
            var faq = FaqEntityType.Create(this);
            var folder = FolderEntityType.Create(this);
            var folderStory = FolderStoryEntityType.Create(this);
            var icon = IconEntityType.Create(this);
            var infraction = InfractionEntityType.Create(this);
            var inviteCode = InviteCodeEntityType.Create(this);
            var moderatorAction = ModeratorActionEntityType.Create(this);
            var notification = NotificationEntityType.Create(this);
            var notificationRecipients = NotificationRecipientsEntityType.Create(this);
            var quote = QuoteEntityType.Create(this);
            var rating = RatingEntityType.Create(this);
            var report = ReportEntityType.Create(this);
            var ogmaRole = OgmaRoleEntityType.Create(this);
            var shelf = ShelfEntityType.Create(this);
            var shelfStory = ShelfStoryEntityType.Create(this);
            var credit = CreditEntityType.Create(this);
            var story = StoryEntityType.Create(this);
            var storyTag = StoryTagEntityType.Create(this);
            var tag = TagEntityType.Create(this);
            var ogmaUser = OgmaUserEntityType.Create(this);
            var userBlock = UserBlockEntityType.Create(this);
            var userFollow = UserFollowEntityType.Create(this);
            var userRole = UserRoleEntityType.Create(this);
            var vote = VoteEntityType.Create(this);

            IdentityRoleClaimEntityType.CreateForeignKey1(identityRoleClaim, ogmaRole);
            IdentityUserClaimEntityType.CreateForeignKey1(identityUserClaim, ogmaUser);
            IdentityUserLoginEntityType.CreateForeignKey1(identityUserLogin, ogmaUser);
            IdentityUserTokenEntityType.CreateForeignKey1(identityUserToken, ogmaUser);
            BlacklistedRatingEntityType.CreateForeignKey1(blacklistedRating, rating);
            BlacklistedRatingEntityType.CreateForeignKey2(blacklistedRating, ogmaUser);
            BlacklistedTagEntityType.CreateForeignKey1(blacklistedTag, tag);
            BlacklistedTagEntityType.CreateForeignKey2(blacklistedTag, ogmaUser);
            ContentBlockEntityType.CreateForeignKey1(contentBlock, ogmaUser);
            BlogpostEntityType.CreateForeignKey1(blogpost, chapter);
            BlogpostEntityType.CreateForeignKey2(blogpost, story);
            BlogpostEntityType.CreateForeignKey3(blogpost, ogmaUser);
            BlogpostEntityType.CreateForeignKey4(blogpost, contentBlock);
            ChapterEntityType.CreateForeignKey1(chapter, contentBlock);
            ChapterEntityType.CreateForeignKey2(chapter, story);
            ChaptersReadEntityType.CreateForeignKey1(chaptersRead, story);
            ChaptersReadEntityType.CreateForeignKey2(chaptersRead, ogmaUser);
            ClubModeratorActionEntityType.CreateForeignKey1(clubModeratorAction, club);
            ClubModeratorActionEntityType.CreateForeignKey2(clubModeratorAction, ogmaUser);
            ClubThreadEntityType.CreateForeignKey1(clubThread, ogmaUser);
            ClubThreadEntityType.CreateForeignKey2(clubThread, club);
            ClubMemberEntityType.CreateForeignKey1(clubMember, club);
            ClubMemberEntityType.CreateForeignKey2(clubMember, ogmaUser);
            CommentEntityType.CreateForeignKey1(comment, ogmaUser);
            CommentEntityType.CreateForeignKey2(comment, commentsThread);
            CommentEntityType.CreateForeignKey3(comment, ogmaUser);
            CommentRevisionEntityType.CreateForeignKey1(commentRevision, comment);
            CommentsThreadEntityType.CreateForeignKey1(commentsThread, blogpost);
            CommentsThreadEntityType.CreateForeignKey2(commentsThread, chapter);
            CommentsThreadEntityType.CreateForeignKey3(commentsThread, clubThread);
            CommentsThreadEntityType.CreateForeignKey4(commentsThread, ogmaUser);
            CommentsThreadSubscriberEntityType.CreateForeignKey1(commentsThreadSubscriber, commentsThread);
            CommentsThreadSubscriberEntityType.CreateForeignKey2(commentsThreadSubscriber, ogmaUser);
            FolderEntityType.CreateForeignKey1(folder, club);
            FolderEntityType.CreateForeignKey2(folder, folder);
            FolderStoryEntityType.CreateForeignKey1(folderStory, ogmaUser);
            FolderStoryEntityType.CreateForeignKey2(folderStory, folder);
            FolderStoryEntityType.CreateForeignKey3(folderStory, story);
            InfractionEntityType.CreateForeignKey1(infraction, ogmaUser);
            InfractionEntityType.CreateForeignKey2(infraction, ogmaUser);
            InfractionEntityType.CreateForeignKey3(infraction, ogmaUser);
            InviteCodeEntityType.CreateForeignKey1(inviteCode, ogmaUser);
            InviteCodeEntityType.CreateForeignKey2(inviteCode, ogmaUser);
            ModeratorActionEntityType.CreateForeignKey1(moderatorAction, ogmaUser);
            NotificationRecipientsEntityType.CreateForeignKey1(notificationRecipients, notification);
            NotificationRecipientsEntityType.CreateForeignKey2(notificationRecipients, ogmaUser);
            ReportEntityType.CreateForeignKey1(report, blogpost);
            ReportEntityType.CreateForeignKey2(report, chapter);
            ReportEntityType.CreateForeignKey3(report, club);
            ReportEntityType.CreateForeignKey4(report, comment);
            ReportEntityType.CreateForeignKey5(report, ogmaUser);
            ReportEntityType.CreateForeignKey6(report, story);
            ReportEntityType.CreateForeignKey7(report, ogmaUser);
            ShelfEntityType.CreateForeignKey1(shelf, icon);
            ShelfEntityType.CreateForeignKey2(shelf, ogmaUser);
            ShelfStoryEntityType.CreateForeignKey1(shelfStory, shelf);
            ShelfStoryEntityType.CreateForeignKey2(shelfStory, story);
            CreditEntityType.CreateForeignKey1(credit, story);
            StoryEntityType.CreateForeignKey1(story, ogmaUser);
            StoryEntityType.CreateForeignKey2(story, contentBlock);
            StoryEntityType.CreateForeignKey3(story, rating);
            StoryTagEntityType.CreateForeignKey1(storyTag, story);
            StoryTagEntityType.CreateForeignKey2(storyTag, tag);
            UserBlockEntityType.CreateForeignKey1(userBlock, ogmaUser);
            UserBlockEntityType.CreateForeignKey2(userBlock, ogmaUser);
            UserFollowEntityType.CreateForeignKey1(userFollow, ogmaUser);
            UserFollowEntityType.CreateForeignKey2(userFollow, ogmaUser);
            UserRoleEntityType.CreateForeignKey1(userRole, ogmaRole);
            UserRoleEntityType.CreateForeignKey2(userRole, ogmaUser);
            VoteEntityType.CreateForeignKey1(vote, story);
            VoteEntityType.CreateForeignKey2(vote, ogmaUser);

            CommentsThreadEntityType.CreateSkipNavigation1(commentsThread, ogmaUser, commentsThreadSubscriber);
            FolderEntityType.CreateSkipNavigation1(folder, story, folderStory);
            NotificationEntityType.CreateSkipNavigation1(notification, ogmaUser, notificationRecipients);
            OgmaRoleEntityType.CreateSkipNavigation1(ogmaRole, ogmaUser, userRole);
            ShelfEntityType.CreateSkipNavigation1(shelf, story, shelfStory);
            StoryEntityType.CreateSkipNavigation1(story, folder, folderStory);
            StoryEntityType.CreateSkipNavigation2(story, shelf, shelfStory);
            StoryEntityType.CreateSkipNavigation3(story, tag, storyTag);
            TagEntityType.CreateSkipNavigation1(tag, story, storyTag);
            OgmaUserEntityType.CreateSkipNavigation1(ogmaUser, ogmaUser, userBlock);
            OgmaUserEntityType.CreateSkipNavigation2(ogmaUser, ogmaUser, userBlock);
            OgmaUserEntityType.CreateSkipNavigation3(ogmaUser, ogmaUser, userFollow);
            OgmaUserEntityType.CreateSkipNavigation4(ogmaUser, ogmaUser, userFollow);
            OgmaUserEntityType.CreateSkipNavigation5(ogmaUser, notification, notificationRecipients);
            OgmaUserEntityType.CreateSkipNavigation6(ogmaUser, ogmaRole, userRole);
            OgmaUserEntityType.CreateSkipNavigation7(ogmaUser, commentsThread, commentsThreadSubscriber);

            IdentityRoleClaimEntityType.CreateAnnotations(identityRoleClaim);
            IdentityUserClaimEntityType.CreateAnnotations(identityUserClaim);
            IdentityUserLoginEntityType.CreateAnnotations(identityUserLogin);
            IdentityUserTokenEntityType.CreateAnnotations(identityUserToken);
            BlacklistedRatingEntityType.CreateAnnotations(blacklistedRating);
            BlacklistedTagEntityType.CreateAnnotations(blacklistedTag);
            ContentBlockEntityType.CreateAnnotations(contentBlock);
            BlogpostEntityType.CreateAnnotations(blogpost);
            ChapterEntityType.CreateAnnotations(chapter);
            ChaptersReadEntityType.CreateAnnotations(chaptersRead);
            ClubModeratorActionEntityType.CreateAnnotations(clubModeratorAction);
            ClubThreadEntityType.CreateAnnotations(clubThread);
            ClubEntityType.CreateAnnotations(club);
            ClubMemberEntityType.CreateAnnotations(clubMember);
            CommentEntityType.CreateAnnotations(comment);
            CommentRevisionEntityType.CreateAnnotations(commentRevision);
            CommentsThreadEntityType.CreateAnnotations(commentsThread);
            CommentsThreadSubscriberEntityType.CreateAnnotations(commentsThreadSubscriber);
            DocumentEntityType.CreateAnnotations(document);
            FaqEntityType.CreateAnnotations(faq);
            FolderEntityType.CreateAnnotations(folder);
            FolderStoryEntityType.CreateAnnotations(folderStory);
            IconEntityType.CreateAnnotations(icon);
            InfractionEntityType.CreateAnnotations(infraction);
            InviteCodeEntityType.CreateAnnotations(inviteCode);
            ModeratorActionEntityType.CreateAnnotations(moderatorAction);
            NotificationEntityType.CreateAnnotations(notification);
            NotificationRecipientsEntityType.CreateAnnotations(notificationRecipients);
            QuoteEntityType.CreateAnnotations(quote);
            RatingEntityType.CreateAnnotations(rating);
            ReportEntityType.CreateAnnotations(report);
            OgmaRoleEntityType.CreateAnnotations(ogmaRole);
            ShelfEntityType.CreateAnnotations(shelf);
            ShelfStoryEntityType.CreateAnnotations(shelfStory);
            CreditEntityType.CreateAnnotations(credit);
            StoryEntityType.CreateAnnotations(story);
            StoryTagEntityType.CreateAnnotations(storyTag);
            TagEntityType.CreateAnnotations(tag);
            OgmaUserEntityType.CreateAnnotations(ogmaUser);
            UserBlockEntityType.CreateAnnotations(userBlock);
            UserFollowEntityType.CreateAnnotations(userFollow);
            UserRoleEntityType.CreateAnnotations(userRole);
            VoteEntityType.CreateAnnotations(vote);

            AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            AddAnnotation("ProductVersion", "8.0.8");
            AddAnnotation("Relational:MaxIdentifierLength", 63);
            AddRuntimeAnnotation("Relational:RelationalModel", CreateRelationalModel());
        }

        private IRelationalModel CreateRelationalModel()
        {
            var relationalModel = new RelationalModel(this);

            var identityRoleClaim = FindEntityType("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>")!;

            var defaultTableMappings = new List<TableMappingBase<ColumnMappingBase>>();
            identityRoleClaim.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings);
            var microsoftAspNetCoreIdentityIdentityRoleClaimlongTableBase = new TableBase("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", null, relationalModel);
            var claimTypeColumnBase = new ColumnBase<ColumnMappingBase>("ClaimType", "text", microsoftAspNetCoreIdentityIdentityRoleClaimlongTableBase)
            {
                IsNullable = true
            };
            microsoftAspNetCoreIdentityIdentityRoleClaimlongTableBase.Columns.Add("ClaimType", claimTypeColumnBase);
            var claimValueColumnBase = new ColumnBase<ColumnMappingBase>("ClaimValue", "text", microsoftAspNetCoreIdentityIdentityRoleClaimlongTableBase)
            {
                IsNullable = true
            };
            microsoftAspNetCoreIdentityIdentityRoleClaimlongTableBase.Columns.Add("ClaimValue", claimValueColumnBase);
            var idColumnBase = new ColumnBase<ColumnMappingBase>("Id", "integer", microsoftAspNetCoreIdentityIdentityRoleClaimlongTableBase);
            microsoftAspNetCoreIdentityIdentityRoleClaimlongTableBase.Columns.Add("Id", idColumnBase);
            var roleIdColumnBase = new ColumnBase<ColumnMappingBase>("RoleId", "bigint", microsoftAspNetCoreIdentityIdentityRoleClaimlongTableBase);
            microsoftAspNetCoreIdentityIdentityRoleClaimlongTableBase.Columns.Add("RoleId", roleIdColumnBase);
            relationalModel.DefaultTables.Add("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", microsoftAspNetCoreIdentityIdentityRoleClaimlongTableBase);
            var microsoftAspNetCoreIdentityIdentityRoleClaimlongMappingBase = new TableMappingBase<ColumnMappingBase>(identityRoleClaim, microsoftAspNetCoreIdentityIdentityRoleClaimlongTableBase, true);
            microsoftAspNetCoreIdentityIdentityRoleClaimlongTableBase.AddTypeMapping(microsoftAspNetCoreIdentityIdentityRoleClaimlongMappingBase, false);
            defaultTableMappings.Add(microsoftAspNetCoreIdentityIdentityRoleClaimlongMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase, identityRoleClaim.FindProperty("Id")!, microsoftAspNetCoreIdentityIdentityRoleClaimlongMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)claimTypeColumnBase, identityRoleClaim.FindProperty("ClaimType")!, microsoftAspNetCoreIdentityIdentityRoleClaimlongMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)claimValueColumnBase, identityRoleClaim.FindProperty("ClaimValue")!, microsoftAspNetCoreIdentityIdentityRoleClaimlongMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)roleIdColumnBase, identityRoleClaim.FindProperty("RoleId")!, microsoftAspNetCoreIdentityIdentityRoleClaimlongMappingBase);

            var tableMappings = new List<TableMapping>();
            identityRoleClaim.SetRuntimeAnnotation("Relational:TableMappings", tableMappings);
            var aspNetRoleClaimsTable = new Table("AspNetRoleClaims", null, relationalModel);
            var idColumn = new Column("Id", "integer", aspNetRoleClaimsTable);
            aspNetRoleClaimsTable.Columns.Add("Id", idColumn);
            idColumn.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            var claimTypeColumn = new Column("ClaimType", "text", aspNetRoleClaimsTable)
            {
                IsNullable = true
            };
            aspNetRoleClaimsTable.Columns.Add("ClaimType", claimTypeColumn);
            var claimValueColumn = new Column("ClaimValue", "text", aspNetRoleClaimsTable)
            {
                IsNullable = true
            };
            aspNetRoleClaimsTable.Columns.Add("ClaimValue", claimValueColumn);
            var roleIdColumn = new Column("RoleId", "bigint", aspNetRoleClaimsTable);
            aspNetRoleClaimsTable.Columns.Add("RoleId", roleIdColumn);
            var pK_AspNetRoleClaims = new UniqueConstraint("PK_AspNetRoleClaims", aspNetRoleClaimsTable, new[] { idColumn });
            aspNetRoleClaimsTable.PrimaryKey = pK_AspNetRoleClaims;
            var pK_AspNetRoleClaimsUc = RelationalModel.GetKey(this,
                "Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>",
                new[] { "Id" });
            pK_AspNetRoleClaims.MappedKeys.Add(pK_AspNetRoleClaimsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_AspNetRoleClaimsUc).Add(pK_AspNetRoleClaims);
            aspNetRoleClaimsTable.UniqueConstraints.Add("PK_AspNetRoleClaims", pK_AspNetRoleClaims);
            var iX_AspNetRoleClaims_RoleId = new TableIndex(
            "IX_AspNetRoleClaims_RoleId", aspNetRoleClaimsTable, new[] { roleIdColumn }, false);
            var iX_AspNetRoleClaims_RoleIdIx = RelationalModel.GetIndex(this,
                "Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>",
                new[] { "RoleId" });
            iX_AspNetRoleClaims_RoleId.MappedIndexes.Add(iX_AspNetRoleClaims_RoleIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_AspNetRoleClaims_RoleIdIx).Add(iX_AspNetRoleClaims_RoleId);
            aspNetRoleClaimsTable.Indexes.Add("IX_AspNetRoleClaims_RoleId", iX_AspNetRoleClaims_RoleId);
            relationalModel.Tables.Add(("AspNetRoleClaims", null), aspNetRoleClaimsTable);
            var aspNetRoleClaimsTableMapping = new TableMapping(identityRoleClaim, aspNetRoleClaimsTable, true);
            aspNetRoleClaimsTable.AddTypeMapping(aspNetRoleClaimsTableMapping, false);
            tableMappings.Add(aspNetRoleClaimsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn, identityRoleClaim.FindProperty("Id")!, aspNetRoleClaimsTableMapping);
            RelationalModel.CreateColumnMapping(claimTypeColumn, identityRoleClaim.FindProperty("ClaimType")!, aspNetRoleClaimsTableMapping);
            RelationalModel.CreateColumnMapping(claimValueColumn, identityRoleClaim.FindProperty("ClaimValue")!, aspNetRoleClaimsTableMapping);
            RelationalModel.CreateColumnMapping(roleIdColumn, identityRoleClaim.FindProperty("RoleId")!, aspNetRoleClaimsTableMapping);

            var identityUserClaim = FindEntityType("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>")!;

            var defaultTableMappings0 = new List<TableMappingBase<ColumnMappingBase>>();
            identityUserClaim.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings0);
            var microsoftAspNetCoreIdentityIdentityUserClaimlongTableBase = new TableBase("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", null, relationalModel);
            var claimTypeColumnBase0 = new ColumnBase<ColumnMappingBase>("ClaimType", "text", microsoftAspNetCoreIdentityIdentityUserClaimlongTableBase)
            {
                IsNullable = true
            };
            microsoftAspNetCoreIdentityIdentityUserClaimlongTableBase.Columns.Add("ClaimType", claimTypeColumnBase0);
            var claimValueColumnBase0 = new ColumnBase<ColumnMappingBase>("ClaimValue", "text", microsoftAspNetCoreIdentityIdentityUserClaimlongTableBase)
            {
                IsNullable = true
            };
            microsoftAspNetCoreIdentityIdentityUserClaimlongTableBase.Columns.Add("ClaimValue", claimValueColumnBase0);
            var idColumnBase0 = new ColumnBase<ColumnMappingBase>("Id", "integer", microsoftAspNetCoreIdentityIdentityUserClaimlongTableBase);
            microsoftAspNetCoreIdentityIdentityUserClaimlongTableBase.Columns.Add("Id", idColumnBase0);
            var userIdColumnBase = new ColumnBase<ColumnMappingBase>("UserId", "bigint", microsoftAspNetCoreIdentityIdentityUserClaimlongTableBase);
            microsoftAspNetCoreIdentityIdentityUserClaimlongTableBase.Columns.Add("UserId", userIdColumnBase);
            relationalModel.DefaultTables.Add("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", microsoftAspNetCoreIdentityIdentityUserClaimlongTableBase);
            var microsoftAspNetCoreIdentityIdentityUserClaimlongMappingBase = new TableMappingBase<ColumnMappingBase>(identityUserClaim, microsoftAspNetCoreIdentityIdentityUserClaimlongTableBase, true);
            microsoftAspNetCoreIdentityIdentityUserClaimlongTableBase.AddTypeMapping(microsoftAspNetCoreIdentityIdentityUserClaimlongMappingBase, false);
            defaultTableMappings0.Add(microsoftAspNetCoreIdentityIdentityUserClaimlongMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase0, identityUserClaim.FindProperty("Id")!, microsoftAspNetCoreIdentityIdentityUserClaimlongMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)claimTypeColumnBase0, identityUserClaim.FindProperty("ClaimType")!, microsoftAspNetCoreIdentityIdentityUserClaimlongMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)claimValueColumnBase0, identityUserClaim.FindProperty("ClaimValue")!, microsoftAspNetCoreIdentityIdentityUserClaimlongMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)userIdColumnBase, identityUserClaim.FindProperty("UserId")!, microsoftAspNetCoreIdentityIdentityUserClaimlongMappingBase);

            var tableMappings0 = new List<TableMapping>();
            identityUserClaim.SetRuntimeAnnotation("Relational:TableMappings", tableMappings0);
            var aspNetUserClaimsTable = new Table("AspNetUserClaims", null, relationalModel);
            var idColumn0 = new Column("Id", "integer", aspNetUserClaimsTable);
            aspNetUserClaimsTable.Columns.Add("Id", idColumn0);
            idColumn0.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            var claimTypeColumn0 = new Column("ClaimType", "text", aspNetUserClaimsTable)
            {
                IsNullable = true
            };
            aspNetUserClaimsTable.Columns.Add("ClaimType", claimTypeColumn0);
            var claimValueColumn0 = new Column("ClaimValue", "text", aspNetUserClaimsTable)
            {
                IsNullable = true
            };
            aspNetUserClaimsTable.Columns.Add("ClaimValue", claimValueColumn0);
            var userIdColumn = new Column("UserId", "bigint", aspNetUserClaimsTable);
            aspNetUserClaimsTable.Columns.Add("UserId", userIdColumn);
            var pK_AspNetUserClaims = new UniqueConstraint("PK_AspNetUserClaims", aspNetUserClaimsTable, new[] { idColumn0 });
            aspNetUserClaimsTable.PrimaryKey = pK_AspNetUserClaims;
            var pK_AspNetUserClaimsUc = RelationalModel.GetKey(this,
                "Microsoft.AspNetCore.Identity.IdentityUserClaim<long>",
                new[] { "Id" });
            pK_AspNetUserClaims.MappedKeys.Add(pK_AspNetUserClaimsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_AspNetUserClaimsUc).Add(pK_AspNetUserClaims);
            aspNetUserClaimsTable.UniqueConstraints.Add("PK_AspNetUserClaims", pK_AspNetUserClaims);
            var iX_AspNetUserClaims_UserId = new TableIndex(
            "IX_AspNetUserClaims_UserId", aspNetUserClaimsTable, new[] { userIdColumn }, false);
            var iX_AspNetUserClaims_UserIdIx = RelationalModel.GetIndex(this,
                "Microsoft.AspNetCore.Identity.IdentityUserClaim<long>",
                new[] { "UserId" });
            iX_AspNetUserClaims_UserId.MappedIndexes.Add(iX_AspNetUserClaims_UserIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_AspNetUserClaims_UserIdIx).Add(iX_AspNetUserClaims_UserId);
            aspNetUserClaimsTable.Indexes.Add("IX_AspNetUserClaims_UserId", iX_AspNetUserClaims_UserId);
            relationalModel.Tables.Add(("AspNetUserClaims", null), aspNetUserClaimsTable);
            var aspNetUserClaimsTableMapping = new TableMapping(identityUserClaim, aspNetUserClaimsTable, true);
            aspNetUserClaimsTable.AddTypeMapping(aspNetUserClaimsTableMapping, false);
            tableMappings0.Add(aspNetUserClaimsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn0, identityUserClaim.FindProperty("Id")!, aspNetUserClaimsTableMapping);
            RelationalModel.CreateColumnMapping(claimTypeColumn0, identityUserClaim.FindProperty("ClaimType")!, aspNetUserClaimsTableMapping);
            RelationalModel.CreateColumnMapping(claimValueColumn0, identityUserClaim.FindProperty("ClaimValue")!, aspNetUserClaimsTableMapping);
            RelationalModel.CreateColumnMapping(userIdColumn, identityUserClaim.FindProperty("UserId")!, aspNetUserClaimsTableMapping);

            var identityUserLogin = FindEntityType("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>")!;

            var defaultTableMappings1 = new List<TableMappingBase<ColumnMappingBase>>();
            identityUserLogin.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings1);
            var microsoftAspNetCoreIdentityIdentityUserLoginlongTableBase = new TableBase("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", null, relationalModel);
            var loginProviderColumnBase = new ColumnBase<ColumnMappingBase>("LoginProvider", "text", microsoftAspNetCoreIdentityIdentityUserLoginlongTableBase);
            microsoftAspNetCoreIdentityIdentityUserLoginlongTableBase.Columns.Add("LoginProvider", loginProviderColumnBase);
            var providerDisplayNameColumnBase = new ColumnBase<ColumnMappingBase>("ProviderDisplayName", "text", microsoftAspNetCoreIdentityIdentityUserLoginlongTableBase)
            {
                IsNullable = true
            };
            microsoftAspNetCoreIdentityIdentityUserLoginlongTableBase.Columns.Add("ProviderDisplayName", providerDisplayNameColumnBase);
            var providerKeyColumnBase = new ColumnBase<ColumnMappingBase>("ProviderKey", "text", microsoftAspNetCoreIdentityIdentityUserLoginlongTableBase);
            microsoftAspNetCoreIdentityIdentityUserLoginlongTableBase.Columns.Add("ProviderKey", providerKeyColumnBase);
            var userIdColumnBase0 = new ColumnBase<ColumnMappingBase>("UserId", "bigint", microsoftAspNetCoreIdentityIdentityUserLoginlongTableBase);
            microsoftAspNetCoreIdentityIdentityUserLoginlongTableBase.Columns.Add("UserId", userIdColumnBase0);
            relationalModel.DefaultTables.Add("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", microsoftAspNetCoreIdentityIdentityUserLoginlongTableBase);
            var microsoftAspNetCoreIdentityIdentityUserLoginlongMappingBase = new TableMappingBase<ColumnMappingBase>(identityUserLogin, microsoftAspNetCoreIdentityIdentityUserLoginlongTableBase, true);
            microsoftAspNetCoreIdentityIdentityUserLoginlongTableBase.AddTypeMapping(microsoftAspNetCoreIdentityIdentityUserLoginlongMappingBase, false);
            defaultTableMappings1.Add(microsoftAspNetCoreIdentityIdentityUserLoginlongMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)loginProviderColumnBase, identityUserLogin.FindProperty("LoginProvider")!, microsoftAspNetCoreIdentityIdentityUserLoginlongMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)providerKeyColumnBase, identityUserLogin.FindProperty("ProviderKey")!, microsoftAspNetCoreIdentityIdentityUserLoginlongMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)providerDisplayNameColumnBase, identityUserLogin.FindProperty("ProviderDisplayName")!, microsoftAspNetCoreIdentityIdentityUserLoginlongMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)userIdColumnBase0, identityUserLogin.FindProperty("UserId")!, microsoftAspNetCoreIdentityIdentityUserLoginlongMappingBase);

            var tableMappings1 = new List<TableMapping>();
            identityUserLogin.SetRuntimeAnnotation("Relational:TableMappings", tableMappings1);
            var aspNetUserLoginsTable = new Table("AspNetUserLogins", null, relationalModel);
            var loginProviderColumn = new Column("LoginProvider", "text", aspNetUserLoginsTable);
            aspNetUserLoginsTable.Columns.Add("LoginProvider", loginProviderColumn);
            var providerKeyColumn = new Column("ProviderKey", "text", aspNetUserLoginsTable);
            aspNetUserLoginsTable.Columns.Add("ProviderKey", providerKeyColumn);
            var providerDisplayNameColumn = new Column("ProviderDisplayName", "text", aspNetUserLoginsTable)
            {
                IsNullable = true
            };
            aspNetUserLoginsTable.Columns.Add("ProviderDisplayName", providerDisplayNameColumn);
            var userIdColumn0 = new Column("UserId", "bigint", aspNetUserLoginsTable);
            aspNetUserLoginsTable.Columns.Add("UserId", userIdColumn0);
            var pK_AspNetUserLogins = new UniqueConstraint("PK_AspNetUserLogins", aspNetUserLoginsTable, new[] { loginProviderColumn, providerKeyColumn });
            aspNetUserLoginsTable.PrimaryKey = pK_AspNetUserLogins;
            var pK_AspNetUserLoginsUc = RelationalModel.GetKey(this,
                "Microsoft.AspNetCore.Identity.IdentityUserLogin<long>",
                new[] { "LoginProvider", "ProviderKey" });
            pK_AspNetUserLogins.MappedKeys.Add(pK_AspNetUserLoginsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_AspNetUserLoginsUc).Add(pK_AspNetUserLogins);
            aspNetUserLoginsTable.UniqueConstraints.Add("PK_AspNetUserLogins", pK_AspNetUserLogins);
            var iX_AspNetUserLogins_UserId = new TableIndex(
            "IX_AspNetUserLogins_UserId", aspNetUserLoginsTable, new[] { userIdColumn0 }, false);
            var iX_AspNetUserLogins_UserIdIx = RelationalModel.GetIndex(this,
                "Microsoft.AspNetCore.Identity.IdentityUserLogin<long>",
                new[] { "UserId" });
            iX_AspNetUserLogins_UserId.MappedIndexes.Add(iX_AspNetUserLogins_UserIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_AspNetUserLogins_UserIdIx).Add(iX_AspNetUserLogins_UserId);
            aspNetUserLoginsTable.Indexes.Add("IX_AspNetUserLogins_UserId", iX_AspNetUserLogins_UserId);
            relationalModel.Tables.Add(("AspNetUserLogins", null), aspNetUserLoginsTable);
            var aspNetUserLoginsTableMapping = new TableMapping(identityUserLogin, aspNetUserLoginsTable, true);
            aspNetUserLoginsTable.AddTypeMapping(aspNetUserLoginsTableMapping, false);
            tableMappings1.Add(aspNetUserLoginsTableMapping);
            RelationalModel.CreateColumnMapping(loginProviderColumn, identityUserLogin.FindProperty("LoginProvider")!, aspNetUserLoginsTableMapping);
            RelationalModel.CreateColumnMapping(providerKeyColumn, identityUserLogin.FindProperty("ProviderKey")!, aspNetUserLoginsTableMapping);
            RelationalModel.CreateColumnMapping(providerDisplayNameColumn, identityUserLogin.FindProperty("ProviderDisplayName")!, aspNetUserLoginsTableMapping);
            RelationalModel.CreateColumnMapping(userIdColumn0, identityUserLogin.FindProperty("UserId")!, aspNetUserLoginsTableMapping);

            var identityUserToken = FindEntityType("Microsoft.AspNetCore.Identity.IdentityUserToken<long>")!;

            var defaultTableMappings2 = new List<TableMappingBase<ColumnMappingBase>>();
            identityUserToken.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings2);
            var microsoftAspNetCoreIdentityIdentityUserTokenlongTableBase = new TableBase("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", null, relationalModel);
            var loginProviderColumnBase0 = new ColumnBase<ColumnMappingBase>("LoginProvider", "text", microsoftAspNetCoreIdentityIdentityUserTokenlongTableBase);
            microsoftAspNetCoreIdentityIdentityUserTokenlongTableBase.Columns.Add("LoginProvider", loginProviderColumnBase0);
            var nameColumnBase = new ColumnBase<ColumnMappingBase>("Name", "text", microsoftAspNetCoreIdentityIdentityUserTokenlongTableBase);
            microsoftAspNetCoreIdentityIdentityUserTokenlongTableBase.Columns.Add("Name", nameColumnBase);
            var userIdColumnBase1 = new ColumnBase<ColumnMappingBase>("UserId", "bigint", microsoftAspNetCoreIdentityIdentityUserTokenlongTableBase);
            microsoftAspNetCoreIdentityIdentityUserTokenlongTableBase.Columns.Add("UserId", userIdColumnBase1);
            var valueColumnBase = new ColumnBase<ColumnMappingBase>("Value", "text", microsoftAspNetCoreIdentityIdentityUserTokenlongTableBase)
            {
                IsNullable = true
            };
            microsoftAspNetCoreIdentityIdentityUserTokenlongTableBase.Columns.Add("Value", valueColumnBase);
            relationalModel.DefaultTables.Add("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", microsoftAspNetCoreIdentityIdentityUserTokenlongTableBase);
            var microsoftAspNetCoreIdentityIdentityUserTokenlongMappingBase = new TableMappingBase<ColumnMappingBase>(identityUserToken, microsoftAspNetCoreIdentityIdentityUserTokenlongTableBase, true);
            microsoftAspNetCoreIdentityIdentityUserTokenlongTableBase.AddTypeMapping(microsoftAspNetCoreIdentityIdentityUserTokenlongMappingBase, false);
            defaultTableMappings2.Add(microsoftAspNetCoreIdentityIdentityUserTokenlongMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)loginProviderColumnBase0, identityUserToken.FindProperty("LoginProvider")!, microsoftAspNetCoreIdentityIdentityUserTokenlongMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase, identityUserToken.FindProperty("Name")!, microsoftAspNetCoreIdentityIdentityUserTokenlongMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)userIdColumnBase1, identityUserToken.FindProperty("UserId")!, microsoftAspNetCoreIdentityIdentityUserTokenlongMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)valueColumnBase, identityUserToken.FindProperty("Value")!, microsoftAspNetCoreIdentityIdentityUserTokenlongMappingBase);

            var tableMappings2 = new List<TableMapping>();
            identityUserToken.SetRuntimeAnnotation("Relational:TableMappings", tableMappings2);
            var aspNetUserTokensTable = new Table("AspNetUserTokens", null, relationalModel);
            var userIdColumn1 = new Column("UserId", "bigint", aspNetUserTokensTable);
            aspNetUserTokensTable.Columns.Add("UserId", userIdColumn1);
            var loginProviderColumn0 = new Column("LoginProvider", "text", aspNetUserTokensTable);
            aspNetUserTokensTable.Columns.Add("LoginProvider", loginProviderColumn0);
            var nameColumn = new Column("Name", "text", aspNetUserTokensTable);
            aspNetUserTokensTable.Columns.Add("Name", nameColumn);
            var valueColumn = new Column("Value", "text", aspNetUserTokensTable)
            {
                IsNullable = true
            };
            aspNetUserTokensTable.Columns.Add("Value", valueColumn);
            var pK_AspNetUserTokens = new UniqueConstraint("PK_AspNetUserTokens", aspNetUserTokensTable, new[] { userIdColumn1, loginProviderColumn0, nameColumn });
            aspNetUserTokensTable.PrimaryKey = pK_AspNetUserTokens;
            var pK_AspNetUserTokensUc = RelationalModel.GetKey(this,
                "Microsoft.AspNetCore.Identity.IdentityUserToken<long>",
                new[] { "UserId", "LoginProvider", "Name" });
            pK_AspNetUserTokens.MappedKeys.Add(pK_AspNetUserTokensUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_AspNetUserTokensUc).Add(pK_AspNetUserTokens);
            aspNetUserTokensTable.UniqueConstraints.Add("PK_AspNetUserTokens", pK_AspNetUserTokens);
            relationalModel.Tables.Add(("AspNetUserTokens", null), aspNetUserTokensTable);
            var aspNetUserTokensTableMapping = new TableMapping(identityUserToken, aspNetUserTokensTable, true);
            aspNetUserTokensTable.AddTypeMapping(aspNetUserTokensTableMapping, false);
            tableMappings2.Add(aspNetUserTokensTableMapping);
            RelationalModel.CreateColumnMapping(loginProviderColumn0, identityUserToken.FindProperty("LoginProvider")!, aspNetUserTokensTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn, identityUserToken.FindProperty("Name")!, aspNetUserTokensTableMapping);
            RelationalModel.CreateColumnMapping(userIdColumn1, identityUserToken.FindProperty("UserId")!, aspNetUserTokensTableMapping);
            RelationalModel.CreateColumnMapping(valueColumn, identityUserToken.FindProperty("Value")!, aspNetUserTokensTableMapping);

            var blacklistedRating = FindEntityType("Ogma3.Data.Blacklists.BlacklistedRating")!;

            var defaultTableMappings3 = new List<TableMappingBase<ColumnMappingBase>>();
            blacklistedRating.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings3);
            var ogma3DataBlacklistsBlacklistedRatingTableBase = new TableBase("Ogma3.Data.Blacklists.BlacklistedRating", null, relationalModel);
            var ratingIdColumnBase = new ColumnBase<ColumnMappingBase>("RatingId", "bigint", ogma3DataBlacklistsBlacklistedRatingTableBase);
            ogma3DataBlacklistsBlacklistedRatingTableBase.Columns.Add("RatingId", ratingIdColumnBase);
            var userIdColumnBase2 = new ColumnBase<ColumnMappingBase>("UserId", "bigint", ogma3DataBlacklistsBlacklistedRatingTableBase);
            ogma3DataBlacklistsBlacklistedRatingTableBase.Columns.Add("UserId", userIdColumnBase2);
            relationalModel.DefaultTables.Add("Ogma3.Data.Blacklists.BlacklistedRating", ogma3DataBlacklistsBlacklistedRatingTableBase);
            var ogma3DataBlacklistsBlacklistedRatingMappingBase = new TableMappingBase<ColumnMappingBase>(blacklistedRating, ogma3DataBlacklistsBlacklistedRatingTableBase, true);
            ogma3DataBlacklistsBlacklistedRatingTableBase.AddTypeMapping(ogma3DataBlacklistsBlacklistedRatingMappingBase, false);
            defaultTableMappings3.Add(ogma3DataBlacklistsBlacklistedRatingMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)ratingIdColumnBase, blacklistedRating.FindProperty("RatingId")!, ogma3DataBlacklistsBlacklistedRatingMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)userIdColumnBase2, blacklistedRating.FindProperty("UserId")!, ogma3DataBlacklistsBlacklistedRatingMappingBase);

            var tableMappings3 = new List<TableMapping>();
            blacklistedRating.SetRuntimeAnnotation("Relational:TableMappings", tableMappings3);
            var blacklistedRatingsTable = new Table("BlacklistedRatings", null, relationalModel);
            var userIdColumn2 = new Column("UserId", "bigint", blacklistedRatingsTable);
            blacklistedRatingsTable.Columns.Add("UserId", userIdColumn2);
            var ratingIdColumn = new Column("RatingId", "bigint", blacklistedRatingsTable);
            blacklistedRatingsTable.Columns.Add("RatingId", ratingIdColumn);
            var pK_BlacklistedRatings = new UniqueConstraint("PK_BlacklistedRatings", blacklistedRatingsTable, new[] { userIdColumn2, ratingIdColumn });
            blacklistedRatingsTable.PrimaryKey = pK_BlacklistedRatings;
            var pK_BlacklistedRatingsUc = RelationalModel.GetKey(this,
                "Ogma3.Data.Blacklists.BlacklistedRating",
                new[] { "UserId", "RatingId" });
            pK_BlacklistedRatings.MappedKeys.Add(pK_BlacklistedRatingsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_BlacklistedRatingsUc).Add(pK_BlacklistedRatings);
            blacklistedRatingsTable.UniqueConstraints.Add("PK_BlacklistedRatings", pK_BlacklistedRatings);
            var iX_BlacklistedRatings_RatingId = new TableIndex(
            "IX_BlacklistedRatings_RatingId", blacklistedRatingsTable, new[] { ratingIdColumn }, false);
            var iX_BlacklistedRatings_RatingIdIx = RelationalModel.GetIndex(this,
                "Ogma3.Data.Blacklists.BlacklistedRating",
                new[] { "RatingId" });
            iX_BlacklistedRatings_RatingId.MappedIndexes.Add(iX_BlacklistedRatings_RatingIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_BlacklistedRatings_RatingIdIx).Add(iX_BlacklistedRatings_RatingId);
            blacklistedRatingsTable.Indexes.Add("IX_BlacklistedRatings_RatingId", iX_BlacklistedRatings_RatingId);
            relationalModel.Tables.Add(("BlacklistedRatings", null), blacklistedRatingsTable);
            var blacklistedRatingsTableMapping = new TableMapping(blacklistedRating, blacklistedRatingsTable, true);
            blacklistedRatingsTable.AddTypeMapping(blacklistedRatingsTableMapping, false);
            tableMappings3.Add(blacklistedRatingsTableMapping);
            RelationalModel.CreateColumnMapping(ratingIdColumn, blacklistedRating.FindProperty("RatingId")!, blacklistedRatingsTableMapping);
            RelationalModel.CreateColumnMapping(userIdColumn2, blacklistedRating.FindProperty("UserId")!, blacklistedRatingsTableMapping);

            var blacklistedTag = FindEntityType("Ogma3.Data.Blacklists.BlacklistedTag")!;

            var defaultTableMappings4 = new List<TableMappingBase<ColumnMappingBase>>();
            blacklistedTag.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings4);
            var ogma3DataBlacklistsBlacklistedTagTableBase = new TableBase("Ogma3.Data.Blacklists.BlacklistedTag", null, relationalModel);
            var tagIdColumnBase = new ColumnBase<ColumnMappingBase>("TagId", "bigint", ogma3DataBlacklistsBlacklistedTagTableBase);
            ogma3DataBlacklistsBlacklistedTagTableBase.Columns.Add("TagId", tagIdColumnBase);
            var userIdColumnBase3 = new ColumnBase<ColumnMappingBase>("UserId", "bigint", ogma3DataBlacklistsBlacklistedTagTableBase);
            ogma3DataBlacklistsBlacklistedTagTableBase.Columns.Add("UserId", userIdColumnBase3);
            relationalModel.DefaultTables.Add("Ogma3.Data.Blacklists.BlacklistedTag", ogma3DataBlacklistsBlacklistedTagTableBase);
            var ogma3DataBlacklistsBlacklistedTagMappingBase = new TableMappingBase<ColumnMappingBase>(blacklistedTag, ogma3DataBlacklistsBlacklistedTagTableBase, true);
            ogma3DataBlacklistsBlacklistedTagTableBase.AddTypeMapping(ogma3DataBlacklistsBlacklistedTagMappingBase, false);
            defaultTableMappings4.Add(ogma3DataBlacklistsBlacklistedTagMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)tagIdColumnBase, blacklistedTag.FindProperty("TagId")!, ogma3DataBlacklistsBlacklistedTagMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)userIdColumnBase3, blacklistedTag.FindProperty("UserId")!, ogma3DataBlacklistsBlacklistedTagMappingBase);

            var tableMappings4 = new List<TableMapping>();
            blacklistedTag.SetRuntimeAnnotation("Relational:TableMappings", tableMappings4);
            var blacklistedTagsTable = new Table("BlacklistedTags", null, relationalModel);
            var userIdColumn3 = new Column("UserId", "bigint", blacklistedTagsTable);
            blacklistedTagsTable.Columns.Add("UserId", userIdColumn3);
            var tagIdColumn = new Column("TagId", "bigint", blacklistedTagsTable);
            blacklistedTagsTable.Columns.Add("TagId", tagIdColumn);
            var pK_BlacklistedTags = new UniqueConstraint("PK_BlacklistedTags", blacklistedTagsTable, new[] { userIdColumn3, tagIdColumn });
            blacklistedTagsTable.PrimaryKey = pK_BlacklistedTags;
            var pK_BlacklistedTagsUc = RelationalModel.GetKey(this,
                "Ogma3.Data.Blacklists.BlacklistedTag",
                new[] { "UserId", "TagId" });
            pK_BlacklistedTags.MappedKeys.Add(pK_BlacklistedTagsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_BlacklistedTagsUc).Add(pK_BlacklistedTags);
            blacklistedTagsTable.UniqueConstraints.Add("PK_BlacklistedTags", pK_BlacklistedTags);
            var iX_BlacklistedTags_TagId = new TableIndex(
            "IX_BlacklistedTags_TagId", blacklistedTagsTable, new[] { tagIdColumn }, false);
            var iX_BlacklistedTags_TagIdIx = RelationalModel.GetIndex(this,
                "Ogma3.Data.Blacklists.BlacklistedTag",
                new[] { "TagId" });
            iX_BlacklistedTags_TagId.MappedIndexes.Add(iX_BlacklistedTags_TagIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_BlacklistedTags_TagIdIx).Add(iX_BlacklistedTags_TagId);
            blacklistedTagsTable.Indexes.Add("IX_BlacklistedTags_TagId", iX_BlacklistedTags_TagId);
            relationalModel.Tables.Add(("BlacklistedTags", null), blacklistedTagsTable);
            var blacklistedTagsTableMapping = new TableMapping(blacklistedTag, blacklistedTagsTable, true);
            blacklistedTagsTable.AddTypeMapping(blacklistedTagsTableMapping, false);
            tableMappings4.Add(blacklistedTagsTableMapping);
            RelationalModel.CreateColumnMapping(tagIdColumn, blacklistedTag.FindProperty("TagId")!, blacklistedTagsTableMapping);
            RelationalModel.CreateColumnMapping(userIdColumn3, blacklistedTag.FindProperty("UserId")!, blacklistedTagsTableMapping);

            var contentBlock = FindEntityType("Ogma3.Data.Blacklists.ContentBlock")!;

            var defaultTableMappings5 = new List<TableMappingBase<ColumnMappingBase>>();
            contentBlock.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings5);
            var ogma3DataBlacklistsContentBlockTableBase = new TableBase("Ogma3.Data.Blacklists.ContentBlock", null, relationalModel);
            var dateTimeColumnBase = new ColumnBase<ColumnMappingBase>("DateTime", "timestamp with time zone", ogma3DataBlacklistsContentBlockTableBase);
            ogma3DataBlacklistsContentBlockTableBase.Columns.Add("DateTime", dateTimeColumnBase);
            var idColumnBase1 = new ColumnBase<ColumnMappingBase>("Id", "bigint", ogma3DataBlacklistsContentBlockTableBase);
            ogma3DataBlacklistsContentBlockTableBase.Columns.Add("Id", idColumnBase1);
            var issuerIdColumnBase = new ColumnBase<ColumnMappingBase>("IssuerId", "bigint", ogma3DataBlacklistsContentBlockTableBase);
            ogma3DataBlacklistsContentBlockTableBase.Columns.Add("IssuerId", issuerIdColumnBase);
            var reasonColumnBase = new ColumnBase<ColumnMappingBase>("Reason", "text", ogma3DataBlacklistsContentBlockTableBase);
            ogma3DataBlacklistsContentBlockTableBase.Columns.Add("Reason", reasonColumnBase);
            var typeColumnBase = new ColumnBase<ColumnMappingBase>("Type", "text", ogma3DataBlacklistsContentBlockTableBase);
            ogma3DataBlacklistsContentBlockTableBase.Columns.Add("Type", typeColumnBase);
            relationalModel.DefaultTables.Add("Ogma3.Data.Blacklists.ContentBlock", ogma3DataBlacklistsContentBlockTableBase);
            var ogma3DataBlacklistsContentBlockMappingBase = new TableMappingBase<ColumnMappingBase>(contentBlock, ogma3DataBlacklistsContentBlockTableBase, true);
            ogma3DataBlacklistsContentBlockTableBase.AddTypeMapping(ogma3DataBlacklistsContentBlockMappingBase, false);
            defaultTableMappings5.Add(ogma3DataBlacklistsContentBlockMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase1, contentBlock.FindProperty("Id")!, ogma3DataBlacklistsContentBlockMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)dateTimeColumnBase, contentBlock.FindProperty("DateTime")!, ogma3DataBlacklistsContentBlockMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)issuerIdColumnBase, contentBlock.FindProperty("IssuerId")!, ogma3DataBlacklistsContentBlockMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)reasonColumnBase, contentBlock.FindProperty("Reason")!, ogma3DataBlacklistsContentBlockMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)typeColumnBase, contentBlock.FindProperty("Type")!, ogma3DataBlacklistsContentBlockMappingBase);

            var tableMappings5 = new List<TableMapping>();
            contentBlock.SetRuntimeAnnotation("Relational:TableMappings", tableMappings5);
            var contentBlocksTable = new Table("ContentBlocks", null, relationalModel);
            var idColumn1 = new Column("Id", "bigint", contentBlocksTable);
            contentBlocksTable.Columns.Add("Id", idColumn1);
            idColumn1.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            var dateTimeColumn = new Column("DateTime", "timestamp with time zone", contentBlocksTable);
            contentBlocksTable.Columns.Add("DateTime", dateTimeColumn);
            var issuerIdColumn = new Column("IssuerId", "bigint", contentBlocksTable);
            contentBlocksTable.Columns.Add("IssuerId", issuerIdColumn);
            var reasonColumn = new Column("Reason", "text", contentBlocksTable);
            contentBlocksTable.Columns.Add("Reason", reasonColumn);
            var typeColumn = new Column("Type", "text", contentBlocksTable);
            contentBlocksTable.Columns.Add("Type", typeColumn);
            var pK_ContentBlocks = new UniqueConstraint("PK_ContentBlocks", contentBlocksTable, new[] { idColumn1 });
            contentBlocksTable.PrimaryKey = pK_ContentBlocks;
            var pK_ContentBlocksUc = RelationalModel.GetKey(this,
                "Ogma3.Data.Blacklists.ContentBlock",
                new[] { "Id" });
            pK_ContentBlocks.MappedKeys.Add(pK_ContentBlocksUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_ContentBlocksUc).Add(pK_ContentBlocks);
            contentBlocksTable.UniqueConstraints.Add("PK_ContentBlocks", pK_ContentBlocks);
            var iX_ContentBlocks_IssuerId = new TableIndex(
            "IX_ContentBlocks_IssuerId", contentBlocksTable, new[] { issuerIdColumn }, false);
            var iX_ContentBlocks_IssuerIdIx = RelationalModel.GetIndex(this,
                "Ogma3.Data.Blacklists.ContentBlock",
                new[] { "IssuerId" });
            iX_ContentBlocks_IssuerId.MappedIndexes.Add(iX_ContentBlocks_IssuerIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_ContentBlocks_IssuerIdIx).Add(iX_ContentBlocks_IssuerId);
            contentBlocksTable.Indexes.Add("IX_ContentBlocks_IssuerId", iX_ContentBlocks_IssuerId);
            relationalModel.Tables.Add(("ContentBlocks", null), contentBlocksTable);
            var contentBlocksTableMapping = new TableMapping(contentBlock, contentBlocksTable, true);
            contentBlocksTable.AddTypeMapping(contentBlocksTableMapping, false);
            tableMappings5.Add(contentBlocksTableMapping);
            RelationalModel.CreateColumnMapping(idColumn1, contentBlock.FindProperty("Id")!, contentBlocksTableMapping);
            RelationalModel.CreateColumnMapping(dateTimeColumn, contentBlock.FindProperty("DateTime")!, contentBlocksTableMapping);
            RelationalModel.CreateColumnMapping(issuerIdColumn, contentBlock.FindProperty("IssuerId")!, contentBlocksTableMapping);
            RelationalModel.CreateColumnMapping(reasonColumn, contentBlock.FindProperty("Reason")!, contentBlocksTableMapping);
            RelationalModel.CreateColumnMapping(typeColumn, contentBlock.FindProperty("Type")!, contentBlocksTableMapping);

            var blogpost = FindEntityType("Ogma3.Data.Blogposts.Blogpost")!;

            var defaultTableMappings6 = new List<TableMappingBase<ColumnMappingBase>>();
            blogpost.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings6);
            var ogma3DataBlogpostsBlogpostTableBase = new TableBase("Ogma3.Data.Blogposts.Blogpost", null, relationalModel);
            var attachedChapterIdColumnBase = new ColumnBase<ColumnMappingBase>("AttachedChapterId", "bigint", ogma3DataBlogpostsBlogpostTableBase)
            {
                IsNullable = true
            };
            ogma3DataBlogpostsBlogpostTableBase.Columns.Add("AttachedChapterId", attachedChapterIdColumnBase);
            var attachedStoryIdColumnBase = new ColumnBase<ColumnMappingBase>("AttachedStoryId", "bigint", ogma3DataBlogpostsBlogpostTableBase)
            {
                IsNullable = true
            };
            ogma3DataBlogpostsBlogpostTableBase.Columns.Add("AttachedStoryId", attachedStoryIdColumnBase);
            var authorIdColumnBase = new ColumnBase<ColumnMappingBase>("AuthorId", "bigint", ogma3DataBlogpostsBlogpostTableBase);
            ogma3DataBlogpostsBlogpostTableBase.Columns.Add("AuthorId", authorIdColumnBase);
            var bodyColumnBase = new ColumnBase<ColumnMappingBase>("Body", "character varying(500000)", ogma3DataBlogpostsBlogpostTableBase);
            ogma3DataBlogpostsBlogpostTableBase.Columns.Add("Body", bodyColumnBase);
            var contentBlockIdColumnBase = new ColumnBase<ColumnMappingBase>("ContentBlockId", "bigint", ogma3DataBlogpostsBlogpostTableBase)
            {
                IsNullable = true
            };
            ogma3DataBlogpostsBlogpostTableBase.Columns.Add("ContentBlockId", contentBlockIdColumnBase);
            var creationDateColumnBase = new ColumnBase<ColumnMappingBase>("CreationDate", "timestamp with time zone", ogma3DataBlogpostsBlogpostTableBase);
            ogma3DataBlogpostsBlogpostTableBase.Columns.Add("CreationDate", creationDateColumnBase);
            var hashtagsColumnBase = new ColumnBase<ColumnMappingBase>("Hashtags", "text[]", ogma3DataBlogpostsBlogpostTableBase);
            ogma3DataBlogpostsBlogpostTableBase.Columns.Add("Hashtags", hashtagsColumnBase);
            var idColumnBase2 = new ColumnBase<ColumnMappingBase>("Id", "bigint", ogma3DataBlogpostsBlogpostTableBase);
            ogma3DataBlogpostsBlogpostTableBase.Columns.Add("Id", idColumnBase2);
            var publicationDateColumnBase = new ColumnBase<ColumnMappingBase>("PublicationDate", "timestamp with time zone", ogma3DataBlogpostsBlogpostTableBase)
            {
                IsNullable = true
            };
            ogma3DataBlogpostsBlogpostTableBase.Columns.Add("PublicationDate", publicationDateColumnBase);
            var slugColumnBase = new ColumnBase<ColumnMappingBase>("Slug", "character varying(100)", ogma3DataBlogpostsBlogpostTableBase);
            ogma3DataBlogpostsBlogpostTableBase.Columns.Add("Slug", slugColumnBase);
            var titleColumnBase = new ColumnBase<ColumnMappingBase>("Title", "character varying(100)", ogma3DataBlogpostsBlogpostTableBase);
            ogma3DataBlogpostsBlogpostTableBase.Columns.Add("Title", titleColumnBase);
            var wordCountColumnBase = new ColumnBase<ColumnMappingBase>("WordCount", "integer", ogma3DataBlogpostsBlogpostTableBase);
            ogma3DataBlogpostsBlogpostTableBase.Columns.Add("WordCount", wordCountColumnBase);
            relationalModel.DefaultTables.Add("Ogma3.Data.Blogposts.Blogpost", ogma3DataBlogpostsBlogpostTableBase);
            var ogma3DataBlogpostsBlogpostMappingBase = new TableMappingBase<ColumnMappingBase>(blogpost, ogma3DataBlogpostsBlogpostTableBase, true);
            ogma3DataBlogpostsBlogpostTableBase.AddTypeMapping(ogma3DataBlogpostsBlogpostMappingBase, false);
            defaultTableMappings6.Add(ogma3DataBlogpostsBlogpostMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase2, blogpost.FindProperty("Id")!, ogma3DataBlogpostsBlogpostMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)attachedChapterIdColumnBase, blogpost.FindProperty("AttachedChapterId")!, ogma3DataBlogpostsBlogpostMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)attachedStoryIdColumnBase, blogpost.FindProperty("AttachedStoryId")!, ogma3DataBlogpostsBlogpostMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)authorIdColumnBase, blogpost.FindProperty("AuthorId")!, ogma3DataBlogpostsBlogpostMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)bodyColumnBase, blogpost.FindProperty("Body")!, ogma3DataBlogpostsBlogpostMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)contentBlockIdColumnBase, blogpost.FindProperty("ContentBlockId")!, ogma3DataBlogpostsBlogpostMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)creationDateColumnBase, blogpost.FindProperty("CreationDate")!, ogma3DataBlogpostsBlogpostMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)hashtagsColumnBase, blogpost.FindProperty("Hashtags")!, ogma3DataBlogpostsBlogpostMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)publicationDateColumnBase, blogpost.FindProperty("PublicationDate")!, ogma3DataBlogpostsBlogpostMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)slugColumnBase, blogpost.FindProperty("Slug")!, ogma3DataBlogpostsBlogpostMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)titleColumnBase, blogpost.FindProperty("Title")!, ogma3DataBlogpostsBlogpostMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)wordCountColumnBase, blogpost.FindProperty("WordCount")!, ogma3DataBlogpostsBlogpostMappingBase);

            var tableMappings6 = new List<TableMapping>();
            blogpost.SetRuntimeAnnotation("Relational:TableMappings", tableMappings6);
            var blogpostsTable = new Table("Blogposts", null, relationalModel);
            var idColumn2 = new Column("Id", "bigint", blogpostsTable);
            blogpostsTable.Columns.Add("Id", idColumn2);
            idColumn2.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            var attachedChapterIdColumn = new Column("AttachedChapterId", "bigint", blogpostsTable)
            {
                IsNullable = true
            };
            blogpostsTable.Columns.Add("AttachedChapterId", attachedChapterIdColumn);
            var attachedStoryIdColumn = new Column("AttachedStoryId", "bigint", blogpostsTable)
            {
                IsNullable = true
            };
            blogpostsTable.Columns.Add("AttachedStoryId", attachedStoryIdColumn);
            var authorIdColumn = new Column("AuthorId", "bigint", blogpostsTable);
            blogpostsTable.Columns.Add("AuthorId", authorIdColumn);
            var bodyColumn = new Column("Body", "character varying(500000)", blogpostsTable);
            blogpostsTable.Columns.Add("Body", bodyColumn);
            var contentBlockIdColumn = new Column("ContentBlockId", "bigint", blogpostsTable)
            {
                IsNullable = true
            };
            blogpostsTable.Columns.Add("ContentBlockId", contentBlockIdColumn);
            var creationDateColumn = new Column("CreationDate", "timestamp with time zone", blogpostsTable);
            blogpostsTable.Columns.Add("CreationDate", creationDateColumn);
            var hashtagsColumn = new Column("Hashtags", "text[]", blogpostsTable);
            blogpostsTable.Columns.Add("Hashtags", hashtagsColumn);
            var publicationDateColumn = new Column("PublicationDate", "timestamp with time zone", blogpostsTable)
            {
                IsNullable = true
            };
            blogpostsTable.Columns.Add("PublicationDate", publicationDateColumn);
            var slugColumn = new Column("Slug", "character varying(100)", blogpostsTable);
            blogpostsTable.Columns.Add("Slug", slugColumn);
            var titleColumn = new Column("Title", "character varying(100)", blogpostsTable);
            blogpostsTable.Columns.Add("Title", titleColumn);
            var wordCountColumn = new Column("WordCount", "integer", blogpostsTable);
            blogpostsTable.Columns.Add("WordCount", wordCountColumn);
            var pK_Blogposts = new UniqueConstraint("PK_Blogposts", blogpostsTable, new[] { idColumn2 });
            blogpostsTable.PrimaryKey = pK_Blogposts;
            var pK_BlogpostsUc = RelationalModel.GetKey(this,
                "Ogma3.Data.Blogposts.Blogpost",
                new[] { "Id" });
            pK_Blogposts.MappedKeys.Add(pK_BlogpostsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_BlogpostsUc).Add(pK_Blogposts);
            blogpostsTable.UniqueConstraints.Add("PK_Blogposts", pK_Blogposts);
            var iX_Blogposts_AttachedChapterId = new TableIndex(
            "IX_Blogposts_AttachedChapterId", blogpostsTable, new[] { attachedChapterIdColumn }, false);
            var iX_Blogposts_AttachedChapterIdIx = RelationalModel.GetIndex(this,
                "Ogma3.Data.Blogposts.Blogpost",
                new[] { "AttachedChapterId" });
            iX_Blogposts_AttachedChapterId.MappedIndexes.Add(iX_Blogposts_AttachedChapterIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Blogposts_AttachedChapterIdIx).Add(iX_Blogposts_AttachedChapterId);
            blogpostsTable.Indexes.Add("IX_Blogposts_AttachedChapterId", iX_Blogposts_AttachedChapterId);
            var iX_Blogposts_AttachedStoryId = new TableIndex(
            "IX_Blogposts_AttachedStoryId", blogpostsTable, new[] { attachedStoryIdColumn }, false);
            var iX_Blogposts_AttachedStoryIdIx = RelationalModel.GetIndex(this,
                "Ogma3.Data.Blogposts.Blogpost",
                new[] { "AttachedStoryId" });
            iX_Blogposts_AttachedStoryId.MappedIndexes.Add(iX_Blogposts_AttachedStoryIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Blogposts_AttachedStoryIdIx).Add(iX_Blogposts_AttachedStoryId);
            blogpostsTable.Indexes.Add("IX_Blogposts_AttachedStoryId", iX_Blogposts_AttachedStoryId);
            var iX_Blogposts_AuthorId = new TableIndex(
            "IX_Blogposts_AuthorId", blogpostsTable, new[] { authorIdColumn }, false);
            var iX_Blogposts_AuthorIdIx = RelationalModel.GetIndex(this,
                "Ogma3.Data.Blogposts.Blogpost",
                new[] { "AuthorId" });
            iX_Blogposts_AuthorId.MappedIndexes.Add(iX_Blogposts_AuthorIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Blogposts_AuthorIdIx).Add(iX_Blogposts_AuthorId);
            blogpostsTable.Indexes.Add("IX_Blogposts_AuthorId", iX_Blogposts_AuthorId);
            var iX_Blogposts_ContentBlockId = new TableIndex(
            "IX_Blogposts_ContentBlockId", blogpostsTable, new[] { contentBlockIdColumn }, true);
            var iX_Blogposts_ContentBlockIdIx = RelationalModel.GetIndex(this,
                "Ogma3.Data.Blogposts.Blogpost",
                new[] { "ContentBlockId" });
            iX_Blogposts_ContentBlockId.MappedIndexes.Add(iX_Blogposts_ContentBlockIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Blogposts_ContentBlockIdIx).Add(iX_Blogposts_ContentBlockId);
            blogpostsTable.Indexes.Add("IX_Blogposts_ContentBlockId", iX_Blogposts_ContentBlockId);
            relationalModel.Tables.Add(("Blogposts", null), blogpostsTable);
            var blogpostsTableMapping = new TableMapping(blogpost, blogpostsTable, true);
            blogpostsTable.AddTypeMapping(blogpostsTableMapping, false);
            tableMappings6.Add(blogpostsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn2, blogpost.FindProperty("Id")!, blogpostsTableMapping);
            RelationalModel.CreateColumnMapping(attachedChapterIdColumn, blogpost.FindProperty("AttachedChapterId")!, blogpostsTableMapping);
            RelationalModel.CreateColumnMapping(attachedStoryIdColumn, blogpost.FindProperty("AttachedStoryId")!, blogpostsTableMapping);
            RelationalModel.CreateColumnMapping(authorIdColumn, blogpost.FindProperty("AuthorId")!, blogpostsTableMapping);
            RelationalModel.CreateColumnMapping(bodyColumn, blogpost.FindProperty("Body")!, blogpostsTableMapping);
            RelationalModel.CreateColumnMapping(contentBlockIdColumn, blogpost.FindProperty("ContentBlockId")!, blogpostsTableMapping);
            RelationalModel.CreateColumnMapping(creationDateColumn, blogpost.FindProperty("CreationDate")!, blogpostsTableMapping);
            RelationalModel.CreateColumnMapping(hashtagsColumn, blogpost.FindProperty("Hashtags")!, blogpostsTableMapping);
            RelationalModel.CreateColumnMapping(publicationDateColumn, blogpost.FindProperty("PublicationDate")!, blogpostsTableMapping);
            RelationalModel.CreateColumnMapping(slugColumn, blogpost.FindProperty("Slug")!, blogpostsTableMapping);
            RelationalModel.CreateColumnMapping(titleColumn, blogpost.FindProperty("Title")!, blogpostsTableMapping);
            RelationalModel.CreateColumnMapping(wordCountColumn, blogpost.FindProperty("WordCount")!, blogpostsTableMapping);

            var chapter = FindEntityType("Ogma3.Data.Chapters.Chapter")!;

            var defaultTableMappings7 = new List<TableMappingBase<ColumnMappingBase>>();
            chapter.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings7);
            var ogma3DataChaptersChapterTableBase = new TableBase("Ogma3.Data.Chapters.Chapter", null, relationalModel);
            var bodyColumnBase0 = new ColumnBase<ColumnMappingBase>("Body", "character varying(500000)", ogma3DataChaptersChapterTableBase);
            ogma3DataChaptersChapterTableBase.Columns.Add("Body", bodyColumnBase0);
            var contentBlockIdColumnBase0 = new ColumnBase<ColumnMappingBase>("ContentBlockId", "bigint", ogma3DataChaptersChapterTableBase)
            {
                IsNullable = true
            };
            ogma3DataChaptersChapterTableBase.Columns.Add("ContentBlockId", contentBlockIdColumnBase0);
            var creationDateColumnBase0 = new ColumnBase<ColumnMappingBase>("CreationDate", "timestamp with time zone", ogma3DataChaptersChapterTableBase);
            ogma3DataChaptersChapterTableBase.Columns.Add("CreationDate", creationDateColumnBase0);
            var endNotesColumnBase = new ColumnBase<ColumnMappingBase>("EndNotes", "character varying(500)", ogma3DataChaptersChapterTableBase)
            {
                IsNullable = true
            };
            ogma3DataChaptersChapterTableBase.Columns.Add("EndNotes", endNotesColumnBase);
            var idColumnBase3 = new ColumnBase<ColumnMappingBase>("Id", "bigint", ogma3DataChaptersChapterTableBase);
            ogma3DataChaptersChapterTableBase.Columns.Add("Id", idColumnBase3);
            var orderColumnBase = new ColumnBase<ColumnMappingBase>("Order", "bigint", ogma3DataChaptersChapterTableBase);
            ogma3DataChaptersChapterTableBase.Columns.Add("Order", orderColumnBase);
            var publicationDateColumnBase0 = new ColumnBase<ColumnMappingBase>("PublicationDate", "timestamp with time zone", ogma3DataChaptersChapterTableBase)
            {
                IsNullable = true
            };
            ogma3DataChaptersChapterTableBase.Columns.Add("PublicationDate", publicationDateColumnBase0);
            var slugColumnBase0 = new ColumnBase<ColumnMappingBase>("Slug", "character varying(100)", ogma3DataChaptersChapterTableBase);
            ogma3DataChaptersChapterTableBase.Columns.Add("Slug", slugColumnBase0);
            var startNotesColumnBase = new ColumnBase<ColumnMappingBase>("StartNotes", "character varying(500)", ogma3DataChaptersChapterTableBase)
            {
                IsNullable = true
            };
            ogma3DataChaptersChapterTableBase.Columns.Add("StartNotes", startNotesColumnBase);
            var storyIdColumnBase = new ColumnBase<ColumnMappingBase>("StoryId", "bigint", ogma3DataChaptersChapterTableBase);
            ogma3DataChaptersChapterTableBase.Columns.Add("StoryId", storyIdColumnBase);
            var titleColumnBase0 = new ColumnBase<ColumnMappingBase>("Title", "character varying(100)", ogma3DataChaptersChapterTableBase);
            ogma3DataChaptersChapterTableBase.Columns.Add("Title", titleColumnBase0);
            var wordCountColumnBase0 = new ColumnBase<ColumnMappingBase>("WordCount", "integer", ogma3DataChaptersChapterTableBase);
            ogma3DataChaptersChapterTableBase.Columns.Add("WordCount", wordCountColumnBase0);
            relationalModel.DefaultTables.Add("Ogma3.Data.Chapters.Chapter", ogma3DataChaptersChapterTableBase);
            var ogma3DataChaptersChapterMappingBase = new TableMappingBase<ColumnMappingBase>(chapter, ogma3DataChaptersChapterTableBase, true);
            ogma3DataChaptersChapterTableBase.AddTypeMapping(ogma3DataChaptersChapterMappingBase, false);
            defaultTableMappings7.Add(ogma3DataChaptersChapterMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase3, chapter.FindProperty("Id")!, ogma3DataChaptersChapterMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)bodyColumnBase0, chapter.FindProperty("Body")!, ogma3DataChaptersChapterMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)contentBlockIdColumnBase0, chapter.FindProperty("ContentBlockId")!, ogma3DataChaptersChapterMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)creationDateColumnBase0, chapter.FindProperty("CreationDate")!, ogma3DataChaptersChapterMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)endNotesColumnBase, chapter.FindProperty("EndNotes")!, ogma3DataChaptersChapterMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)orderColumnBase, chapter.FindProperty("Order")!, ogma3DataChaptersChapterMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)publicationDateColumnBase0, chapter.FindProperty("PublicationDate")!, ogma3DataChaptersChapterMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)slugColumnBase0, chapter.FindProperty("Slug")!, ogma3DataChaptersChapterMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)startNotesColumnBase, chapter.FindProperty("StartNotes")!, ogma3DataChaptersChapterMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)storyIdColumnBase, chapter.FindProperty("StoryId")!, ogma3DataChaptersChapterMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)titleColumnBase0, chapter.FindProperty("Title")!, ogma3DataChaptersChapterMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)wordCountColumnBase0, chapter.FindProperty("WordCount")!, ogma3DataChaptersChapterMappingBase);

            var tableMappings7 = new List<TableMapping>();
            chapter.SetRuntimeAnnotation("Relational:TableMappings", tableMappings7);
            var chaptersTable = new Table("Chapters", null, relationalModel);
            var idColumn3 = new Column("Id", "bigint", chaptersTable);
            chaptersTable.Columns.Add("Id", idColumn3);
            idColumn3.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            var bodyColumn0 = new Column("Body", "character varying(500000)", chaptersTable);
            chaptersTable.Columns.Add("Body", bodyColumn0);
            var contentBlockIdColumn0 = new Column("ContentBlockId", "bigint", chaptersTable)
            {
                IsNullable = true
            };
            chaptersTable.Columns.Add("ContentBlockId", contentBlockIdColumn0);
            var creationDateColumn0 = new Column("CreationDate", "timestamp with time zone", chaptersTable);
            chaptersTable.Columns.Add("CreationDate", creationDateColumn0);
            var endNotesColumn = new Column("EndNotes", "character varying(500)", chaptersTable)
            {
                IsNullable = true
            };
            chaptersTable.Columns.Add("EndNotes", endNotesColumn);
            var orderColumn = new Column("Order", "bigint", chaptersTable);
            chaptersTable.Columns.Add("Order", orderColumn);
            var publicationDateColumn0 = new Column("PublicationDate", "timestamp with time zone", chaptersTable)
            {
                IsNullable = true
            };
            chaptersTable.Columns.Add("PublicationDate", publicationDateColumn0);
            var slugColumn0 = new Column("Slug", "character varying(100)", chaptersTable);
            chaptersTable.Columns.Add("Slug", slugColumn0);
            var startNotesColumn = new Column("StartNotes", "character varying(500)", chaptersTable)
            {
                IsNullable = true
            };
            chaptersTable.Columns.Add("StartNotes", startNotesColumn);
            var storyIdColumn = new Column("StoryId", "bigint", chaptersTable);
            chaptersTable.Columns.Add("StoryId", storyIdColumn);
            var titleColumn0 = new Column("Title", "character varying(100)", chaptersTable);
            chaptersTable.Columns.Add("Title", titleColumn0);
            var wordCountColumn0 = new Column("WordCount", "integer", chaptersTable);
            chaptersTable.Columns.Add("WordCount", wordCountColumn0);
            var pK_Chapters = new UniqueConstraint("PK_Chapters", chaptersTable, new[] { idColumn3 });
            chaptersTable.PrimaryKey = pK_Chapters;
            var pK_ChaptersUc = RelationalModel.GetKey(this,
                "Ogma3.Data.Chapters.Chapter",
                new[] { "Id" });
            pK_Chapters.MappedKeys.Add(pK_ChaptersUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_ChaptersUc).Add(pK_Chapters);
            chaptersTable.UniqueConstraints.Add("PK_Chapters", pK_Chapters);
            var iX_Chapters_ContentBlockId = new TableIndex(
            "IX_Chapters_ContentBlockId", chaptersTable, new[] { contentBlockIdColumn0 }, true);
            var iX_Chapters_ContentBlockIdIx = RelationalModel.GetIndex(this,
                "Ogma3.Data.Chapters.Chapter",
                new[] { "ContentBlockId" });
            iX_Chapters_ContentBlockId.MappedIndexes.Add(iX_Chapters_ContentBlockIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Chapters_ContentBlockIdIx).Add(iX_Chapters_ContentBlockId);
            chaptersTable.Indexes.Add("IX_Chapters_ContentBlockId", iX_Chapters_ContentBlockId);
            var iX_Chapters_StoryId = new TableIndex(
            "IX_Chapters_StoryId", chaptersTable, new[] { storyIdColumn }, false);
            var iX_Chapters_StoryIdIx = RelationalModel.GetIndex(this,
                "Ogma3.Data.Chapters.Chapter",
                new[] { "StoryId" });
            iX_Chapters_StoryId.MappedIndexes.Add(iX_Chapters_StoryIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Chapters_StoryIdIx).Add(iX_Chapters_StoryId);
            chaptersTable.Indexes.Add("IX_Chapters_StoryId", iX_Chapters_StoryId);
            relationalModel.Tables.Add(("Chapters", null), chaptersTable);
            var chaptersTableMapping = new TableMapping(chapter, chaptersTable, true);
            chaptersTable.AddTypeMapping(chaptersTableMapping, false);
            tableMappings7.Add(chaptersTableMapping);
            RelationalModel.CreateColumnMapping(idColumn3, chapter.FindProperty("Id")!, chaptersTableMapping);
            RelationalModel.CreateColumnMapping(bodyColumn0, chapter.FindProperty("Body")!, chaptersTableMapping);
            RelationalModel.CreateColumnMapping(contentBlockIdColumn0, chapter.FindProperty("ContentBlockId")!, chaptersTableMapping);
            RelationalModel.CreateColumnMapping(creationDateColumn0, chapter.FindProperty("CreationDate")!, chaptersTableMapping);
            RelationalModel.CreateColumnMapping(endNotesColumn, chapter.FindProperty("EndNotes")!, chaptersTableMapping);
            RelationalModel.CreateColumnMapping(orderColumn, chapter.FindProperty("Order")!, chaptersTableMapping);
            RelationalModel.CreateColumnMapping(publicationDateColumn0, chapter.FindProperty("PublicationDate")!, chaptersTableMapping);
            RelationalModel.CreateColumnMapping(slugColumn0, chapter.FindProperty("Slug")!, chaptersTableMapping);
            RelationalModel.CreateColumnMapping(startNotesColumn, chapter.FindProperty("StartNotes")!, chaptersTableMapping);
            RelationalModel.CreateColumnMapping(storyIdColumn, chapter.FindProperty("StoryId")!, chaptersTableMapping);
            RelationalModel.CreateColumnMapping(titleColumn0, chapter.FindProperty("Title")!, chaptersTableMapping);
            RelationalModel.CreateColumnMapping(wordCountColumn0, chapter.FindProperty("WordCount")!, chaptersTableMapping);

            var chaptersRead = FindEntityType("Ogma3.Data.Chapters.ChaptersRead")!;

            var defaultTableMappings8 = new List<TableMappingBase<ColumnMappingBase>>();
            chaptersRead.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings8);
            var ogma3DataChaptersChaptersReadTableBase = new TableBase("Ogma3.Data.Chapters.ChaptersRead", null, relationalModel);
            var chaptersColumnBase = new ColumnBase<ColumnMappingBase>("Chapters", "bigint[]", ogma3DataChaptersChaptersReadTableBase)
            {
                IsNullable = true
            };
            ogma3DataChaptersChaptersReadTableBase.Columns.Add("Chapters", chaptersColumnBase);
            var storyIdColumnBase0 = new ColumnBase<ColumnMappingBase>("StoryId", "bigint", ogma3DataChaptersChaptersReadTableBase);
            ogma3DataChaptersChaptersReadTableBase.Columns.Add("StoryId", storyIdColumnBase0);
            var userIdColumnBase4 = new ColumnBase<ColumnMappingBase>("UserId", "bigint", ogma3DataChaptersChaptersReadTableBase);
            ogma3DataChaptersChaptersReadTableBase.Columns.Add("UserId", userIdColumnBase4);
            relationalModel.DefaultTables.Add("Ogma3.Data.Chapters.ChaptersRead", ogma3DataChaptersChaptersReadTableBase);
            var ogma3DataChaptersChaptersReadMappingBase = new TableMappingBase<ColumnMappingBase>(chaptersRead, ogma3DataChaptersChaptersReadTableBase, true);
            ogma3DataChaptersChaptersReadTableBase.AddTypeMapping(ogma3DataChaptersChaptersReadMappingBase, false);
            defaultTableMappings8.Add(ogma3DataChaptersChaptersReadMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)storyIdColumnBase0, chaptersRead.FindProperty("StoryId")!, ogma3DataChaptersChaptersReadMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)userIdColumnBase4, chaptersRead.FindProperty("UserId")!, ogma3DataChaptersChaptersReadMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)chaptersColumnBase, chaptersRead.FindProperty("Chapters")!, ogma3DataChaptersChaptersReadMappingBase);

            var tableMappings8 = new List<TableMapping>();
            chaptersRead.SetRuntimeAnnotation("Relational:TableMappings", tableMappings8);
            var chaptersReadTable = new Table("ChaptersRead", null, relationalModel);
            var storyIdColumn0 = new Column("StoryId", "bigint", chaptersReadTable);
            chaptersReadTable.Columns.Add("StoryId", storyIdColumn0);
            var userIdColumn4 = new Column("UserId", "bigint", chaptersReadTable);
            chaptersReadTable.Columns.Add("UserId", userIdColumn4);
            var chaptersColumn = new Column("Chapters", "bigint[]", chaptersReadTable)
            {
                IsNullable = true
            };
            chaptersReadTable.Columns.Add("Chapters", chaptersColumn);
            var pK_ChaptersRead = new UniqueConstraint("PK_ChaptersRead", chaptersReadTable, new[] { storyIdColumn0, userIdColumn4 });
            chaptersReadTable.PrimaryKey = pK_ChaptersRead;
            var pK_ChaptersReadUc = RelationalModel.GetKey(this,
                "Ogma3.Data.Chapters.ChaptersRead",
                new[] { "StoryId", "UserId" });
            pK_ChaptersRead.MappedKeys.Add(pK_ChaptersReadUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_ChaptersReadUc).Add(pK_ChaptersRead);
            chaptersReadTable.UniqueConstraints.Add("PK_ChaptersRead", pK_ChaptersRead);
            var iX_ChaptersRead_UserId = new TableIndex(
            "IX_ChaptersRead_UserId", chaptersReadTable, new[] { userIdColumn4 }, false);
            var iX_ChaptersRead_UserIdIx = RelationalModel.GetIndex(this,
                "Ogma3.Data.Chapters.ChaptersRead",
                new[] { "UserId" });
            iX_ChaptersRead_UserId.MappedIndexes.Add(iX_ChaptersRead_UserIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_ChaptersRead_UserIdIx).Add(iX_ChaptersRead_UserId);
            chaptersReadTable.Indexes.Add("IX_ChaptersRead_UserId", iX_ChaptersRead_UserId);
            relationalModel.Tables.Add(("ChaptersRead", null), chaptersReadTable);
            var chaptersReadTableMapping = new TableMapping(chaptersRead, chaptersReadTable, true);
            chaptersReadTable.AddTypeMapping(chaptersReadTableMapping, false);
            tableMappings8.Add(chaptersReadTableMapping);
            RelationalModel.CreateColumnMapping(storyIdColumn0, chaptersRead.FindProperty("StoryId")!, chaptersReadTableMapping);
            RelationalModel.CreateColumnMapping(userIdColumn4, chaptersRead.FindProperty("UserId")!, chaptersReadTableMapping);
            RelationalModel.CreateColumnMapping(chaptersColumn, chaptersRead.FindProperty("Chapters")!, chaptersReadTableMapping);

            var clubModeratorAction = FindEntityType("Ogma3.Data.ClubModeratorActions.ClubModeratorAction")!;

            var defaultTableMappings9 = new List<TableMappingBase<ColumnMappingBase>>();
            clubModeratorAction.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings9);
            var ogma3DataClubModeratorActionsClubModeratorActionTableBase = new TableBase("Ogma3.Data.ClubModeratorActions.ClubModeratorAction", null, relationalModel);
            var clubIdColumnBase = new ColumnBase<ColumnMappingBase>("ClubId", "bigint", ogma3DataClubModeratorActionsClubModeratorActionTableBase);
            ogma3DataClubModeratorActionsClubModeratorActionTableBase.Columns.Add("ClubId", clubIdColumnBase);
            var creationDateColumnBase1 = new ColumnBase<ColumnMappingBase>("CreationDate", "timestamp with time zone", ogma3DataClubModeratorActionsClubModeratorActionTableBase);
            ogma3DataClubModeratorActionsClubModeratorActionTableBase.Columns.Add("CreationDate", creationDateColumnBase1);
            var descriptionColumnBase = new ColumnBase<ColumnMappingBase>("Description", "text", ogma3DataClubModeratorActionsClubModeratorActionTableBase);
            ogma3DataClubModeratorActionsClubModeratorActionTableBase.Columns.Add("Description", descriptionColumnBase);
            var idColumnBase4 = new ColumnBase<ColumnMappingBase>("Id", "bigint", ogma3DataClubModeratorActionsClubModeratorActionTableBase);
            ogma3DataClubModeratorActionsClubModeratorActionTableBase.Columns.Add("Id", idColumnBase4);
            var moderatorIdColumnBase = new ColumnBase<ColumnMappingBase>("ModeratorId", "bigint", ogma3DataClubModeratorActionsClubModeratorActionTableBase);
            ogma3DataClubModeratorActionsClubModeratorActionTableBase.Columns.Add("ModeratorId", moderatorIdColumnBase);
            relationalModel.DefaultTables.Add("Ogma3.Data.ClubModeratorActions.ClubModeratorAction", ogma3DataClubModeratorActionsClubModeratorActionTableBase);
            var ogma3DataClubModeratorActionsClubModeratorActionMappingBase = new TableMappingBase<ColumnMappingBase>(clubModeratorAction, ogma3DataClubModeratorActionsClubModeratorActionTableBase, true);
            ogma3DataClubModeratorActionsClubModeratorActionTableBase.AddTypeMapping(ogma3DataClubModeratorActionsClubModeratorActionMappingBase, false);
            defaultTableMappings9.Add(ogma3DataClubModeratorActionsClubModeratorActionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase4, clubModeratorAction.FindProperty("Id")!, ogma3DataClubModeratorActionsClubModeratorActionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)clubIdColumnBase, clubModeratorAction.FindProperty("ClubId")!, ogma3DataClubModeratorActionsClubModeratorActionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)creationDateColumnBase1, clubModeratorAction.FindProperty("CreationDate")!, ogma3DataClubModeratorActionsClubModeratorActionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)descriptionColumnBase, clubModeratorAction.FindProperty("Description")!, ogma3DataClubModeratorActionsClubModeratorActionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)moderatorIdColumnBase, clubModeratorAction.FindProperty("ModeratorId")!, ogma3DataClubModeratorActionsClubModeratorActionMappingBase);

            var tableMappings9 = new List<TableMapping>();
            clubModeratorAction.SetRuntimeAnnotation("Relational:TableMappings", tableMappings9);
            var clubModeratorActionsTable = new Table("ClubModeratorActions", null, relationalModel);
            var idColumn4 = new Column("Id", "bigint", clubModeratorActionsTable);
            clubModeratorActionsTable.Columns.Add("Id", idColumn4);
            idColumn4.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            var clubIdColumn = new Column("ClubId", "bigint", clubModeratorActionsTable);
            clubModeratorActionsTable.Columns.Add("ClubId", clubIdColumn);
            var creationDateColumn1 = new Column("CreationDate", "timestamp with time zone", clubModeratorActionsTable);
            clubModeratorActionsTable.Columns.Add("CreationDate", creationDateColumn1);
            var descriptionColumn = new Column("Description", "text", clubModeratorActionsTable);
            clubModeratorActionsTable.Columns.Add("Description", descriptionColumn);
            var moderatorIdColumn = new Column("ModeratorId", "bigint", clubModeratorActionsTable);
            clubModeratorActionsTable.Columns.Add("ModeratorId", moderatorIdColumn);
            var pK_ClubModeratorActions = new UniqueConstraint("PK_ClubModeratorActions", clubModeratorActionsTable, new[] { idColumn4 });
            clubModeratorActionsTable.PrimaryKey = pK_ClubModeratorActions;
            var pK_ClubModeratorActionsUc = RelationalModel.GetKey(this,
                "Ogma3.Data.ClubModeratorActions.ClubModeratorAction",
                new[] { "Id" });
            pK_ClubModeratorActions.MappedKeys.Add(pK_ClubModeratorActionsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_ClubModeratorActionsUc).Add(pK_ClubModeratorActions);
            clubModeratorActionsTable.UniqueConstraints.Add("PK_ClubModeratorActions", pK_ClubModeratorActions);
            var iX_ClubModeratorActions_ModeratorId = new TableIndex(
            "IX_ClubModeratorActions_ModeratorId", clubModeratorActionsTable, new[] { moderatorIdColumn }, false);
            var iX_ClubModeratorActions_ModeratorIdIx = RelationalModel.GetIndex(this,
                "Ogma3.Data.ClubModeratorActions.ClubModeratorAction",
                new[] { "ModeratorId" });
            iX_ClubModeratorActions_ModeratorId.MappedIndexes.Add(iX_ClubModeratorActions_ModeratorIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_ClubModeratorActions_ModeratorIdIx).Add(iX_ClubModeratorActions_ModeratorId);
            clubModeratorActionsTable.Indexes.Add("IX_ClubModeratorActions_ModeratorId", iX_ClubModeratorActions_ModeratorId);
            relationalModel.Tables.Add(("ClubModeratorActions", null), clubModeratorActionsTable);
            var clubModeratorActionsTableMapping = new TableMapping(clubModeratorAction, clubModeratorActionsTable, true);
            clubModeratorActionsTable.AddTypeMapping(clubModeratorActionsTableMapping, false);
            tableMappings9.Add(clubModeratorActionsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn4, clubModeratorAction.FindProperty("Id")!, clubModeratorActionsTableMapping);
            RelationalModel.CreateColumnMapping(clubIdColumn, clubModeratorAction.FindProperty("ClubId")!, clubModeratorActionsTableMapping);
            RelationalModel.CreateColumnMapping(creationDateColumn1, clubModeratorAction.FindProperty("CreationDate")!, clubModeratorActionsTableMapping);
            RelationalModel.CreateColumnMapping(descriptionColumn, clubModeratorAction.FindProperty("Description")!, clubModeratorActionsTableMapping);
            RelationalModel.CreateColumnMapping(moderatorIdColumn, clubModeratorAction.FindProperty("ModeratorId")!, clubModeratorActionsTableMapping);

            var clubThread = FindEntityType("Ogma3.Data.ClubThreads.ClubThread")!;

            var defaultTableMappings10 = new List<TableMappingBase<ColumnMappingBase>>();
            clubThread.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings10);
            var ogma3DataClubThreadsClubThreadTableBase = new TableBase("Ogma3.Data.ClubThreads.ClubThread", null, relationalModel);
            var authorIdColumnBase0 = new ColumnBase<ColumnMappingBase>("AuthorId", "bigint", ogma3DataClubThreadsClubThreadTableBase);
            ogma3DataClubThreadsClubThreadTableBase.Columns.Add("AuthorId", authorIdColumnBase0);
            var bodyColumnBase1 = new ColumnBase<ColumnMappingBase>("Body", "character varying(25000)", ogma3DataClubThreadsClubThreadTableBase);
            ogma3DataClubThreadsClubThreadTableBase.Columns.Add("Body", bodyColumnBase1);
            var clubIdColumnBase0 = new ColumnBase<ColumnMappingBase>("ClubId", "bigint", ogma3DataClubThreadsClubThreadTableBase);
            ogma3DataClubThreadsClubThreadTableBase.Columns.Add("ClubId", clubIdColumnBase0);
            var creationDateColumnBase2 = new ColumnBase<ColumnMappingBase>("CreationDate", "timestamp with time zone", ogma3DataClubThreadsClubThreadTableBase);
            ogma3DataClubThreadsClubThreadTableBase.Columns.Add("CreationDate", creationDateColumnBase2);
            var deletedAtColumnBase = new ColumnBase<ColumnMappingBase>("DeletedAt", "timestamp with time zone", ogma3DataClubThreadsClubThreadTableBase)
            {
                IsNullable = true
            };
            ogma3DataClubThreadsClubThreadTableBase.Columns.Add("DeletedAt", deletedAtColumnBase);
            var idColumnBase5 = new ColumnBase<ColumnMappingBase>("Id", "bigint", ogma3DataClubThreadsClubThreadTableBase);
            ogma3DataClubThreadsClubThreadTableBase.Columns.Add("Id", idColumnBase5);
            var isPinnedColumnBase = new ColumnBase<ColumnMappingBase>("IsPinned", "boolean", ogma3DataClubThreadsClubThreadTableBase);
            ogma3DataClubThreadsClubThreadTableBase.Columns.Add("IsPinned", isPinnedColumnBase);
            var titleColumnBase1 = new ColumnBase<ColumnMappingBase>("Title", "character varying(100)", ogma3DataClubThreadsClubThreadTableBase);
            ogma3DataClubThreadsClubThreadTableBase.Columns.Add("Title", titleColumnBase1);
            relationalModel.DefaultTables.Add("Ogma3.Data.ClubThreads.ClubThread", ogma3DataClubThreadsClubThreadTableBase);
            var ogma3DataClubThreadsClubThreadMappingBase = new TableMappingBase<ColumnMappingBase>(clubThread, ogma3DataClubThreadsClubThreadTableBase, true);
            ogma3DataClubThreadsClubThreadTableBase.AddTypeMapping(ogma3DataClubThreadsClubThreadMappingBase, false);
            defaultTableMappings10.Add(ogma3DataClubThreadsClubThreadMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase5, clubThread.FindProperty("Id")!, ogma3DataClubThreadsClubThreadMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)authorIdColumnBase0, clubThread.FindProperty("AuthorId")!, ogma3DataClubThreadsClubThreadMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)bodyColumnBase1, clubThread.FindProperty("Body")!, ogma3DataClubThreadsClubThreadMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)clubIdColumnBase0, clubThread.FindProperty("ClubId")!, ogma3DataClubThreadsClubThreadMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)creationDateColumnBase2, clubThread.FindProperty("CreationDate")!, ogma3DataClubThreadsClubThreadMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)deletedAtColumnBase, clubThread.FindProperty("DeletedAt")!, ogma3DataClubThreadsClubThreadMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)isPinnedColumnBase, clubThread.FindProperty("IsPinned")!, ogma3DataClubThreadsClubThreadMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)titleColumnBase1, clubThread.FindProperty("Title")!, ogma3DataClubThreadsClubThreadMappingBase);

            var tableMappings10 = new List<TableMapping>();
            clubThread.SetRuntimeAnnotation("Relational:TableMappings", tableMappings10);
            var clubThreadsTable = new Table("ClubThreads", null, relationalModel);
            var idColumn5 = new Column("Id", "bigint", clubThreadsTable);
            clubThreadsTable.Columns.Add("Id", idColumn5);
            idColumn5.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            var authorIdColumn0 = new Column("AuthorId", "bigint", clubThreadsTable);
            clubThreadsTable.Columns.Add("AuthorId", authorIdColumn0);
            var bodyColumn1 = new Column("Body", "character varying(25000)", clubThreadsTable);
            clubThreadsTable.Columns.Add("Body", bodyColumn1);
            var clubIdColumn0 = new Column("ClubId", "bigint", clubThreadsTable);
            clubThreadsTable.Columns.Add("ClubId", clubIdColumn0);
            var creationDateColumn2 = new Column("CreationDate", "timestamp with time zone", clubThreadsTable);
            clubThreadsTable.Columns.Add("CreationDate", creationDateColumn2);
            var deletedAtColumn = new Column("DeletedAt", "timestamp with time zone", clubThreadsTable)
            {
                IsNullable = true
            };
            clubThreadsTable.Columns.Add("DeletedAt", deletedAtColumn);
            var isPinnedColumn = new Column("IsPinned", "boolean", clubThreadsTable);
            clubThreadsTable.Columns.Add("IsPinned", isPinnedColumn);
            var titleColumn1 = new Column("Title", "character varying(100)", clubThreadsTable);
            clubThreadsTable.Columns.Add("Title", titleColumn1);
            var pK_ClubThreads = new UniqueConstraint("PK_ClubThreads", clubThreadsTable, new[] { idColumn5 });
            clubThreadsTable.PrimaryKey = pK_ClubThreads;
            var pK_ClubThreadsUc = RelationalModel.GetKey(this,
                "Ogma3.Data.ClubThreads.ClubThread",
                new[] { "Id" });
            pK_ClubThreads.MappedKeys.Add(pK_ClubThreadsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_ClubThreadsUc).Add(pK_ClubThreads);
            clubThreadsTable.UniqueConstraints.Add("PK_ClubThreads", pK_ClubThreads);
            var iX_ClubThreads_AuthorId = new TableIndex(
            "IX_ClubThreads_AuthorId", clubThreadsTable, new[] { authorIdColumn0 }, false);
            var iX_ClubThreads_AuthorIdIx = RelationalModel.GetIndex(this,
                "Ogma3.Data.ClubThreads.ClubThread",
                new[] { "AuthorId" });
            iX_ClubThreads_AuthorId.MappedIndexes.Add(iX_ClubThreads_AuthorIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_ClubThreads_AuthorIdIx).Add(iX_ClubThreads_AuthorId);
            clubThreadsTable.Indexes.Add("IX_ClubThreads_AuthorId", iX_ClubThreads_AuthorId);
            var iX_ClubThreads_ClubId = new TableIndex(
            "IX_ClubThreads_ClubId", clubThreadsTable, new[] { clubIdColumn0 }, false);
            var iX_ClubThreads_ClubIdIx = RelationalModel.GetIndex(this,
                "Ogma3.Data.ClubThreads.ClubThread",
                new[] { "ClubId" });
            iX_ClubThreads_ClubId.MappedIndexes.Add(iX_ClubThreads_ClubIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_ClubThreads_ClubIdIx).Add(iX_ClubThreads_ClubId);
            clubThreadsTable.Indexes.Add("IX_ClubThreads_ClubId", iX_ClubThreads_ClubId);
            relationalModel.Tables.Add(("ClubThreads", null), clubThreadsTable);
            var clubThreadsTableMapping = new TableMapping(clubThread, clubThreadsTable, true);
            clubThreadsTable.AddTypeMapping(clubThreadsTableMapping, false);
            tableMappings10.Add(clubThreadsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn5, clubThread.FindProperty("Id")!, clubThreadsTableMapping);
            RelationalModel.CreateColumnMapping(authorIdColumn0, clubThread.FindProperty("AuthorId")!, clubThreadsTableMapping);
            RelationalModel.CreateColumnMapping(bodyColumn1, clubThread.FindProperty("Body")!, clubThreadsTableMapping);
            RelationalModel.CreateColumnMapping(clubIdColumn0, clubThread.FindProperty("ClubId")!, clubThreadsTableMapping);
            RelationalModel.CreateColumnMapping(creationDateColumn2, clubThread.FindProperty("CreationDate")!, clubThreadsTableMapping);
            RelationalModel.CreateColumnMapping(deletedAtColumn, clubThread.FindProperty("DeletedAt")!, clubThreadsTableMapping);
            RelationalModel.CreateColumnMapping(isPinnedColumn, clubThread.FindProperty("IsPinned")!, clubThreadsTableMapping);
            RelationalModel.CreateColumnMapping(titleColumn1, clubThread.FindProperty("Title")!, clubThreadsTableMapping);

            var club = FindEntityType("Ogma3.Data.Clubs.Club")!;

            var defaultTableMappings11 = new List<TableMappingBase<ColumnMappingBase>>();
            club.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings11);
            var ogma3DataClubsClubTableBase = new TableBase("Ogma3.Data.Clubs.Club", null, relationalModel);
            var creationDateColumnBase3 = new ColumnBase<ColumnMappingBase>("CreationDate", "timestamp with time zone", ogma3DataClubsClubTableBase);
            ogma3DataClubsClubTableBase.Columns.Add("CreationDate", creationDateColumnBase3);
            var descriptionColumnBase0 = new ColumnBase<ColumnMappingBase>("Description", "character varying(25000)", ogma3DataClubsClubTableBase);
            ogma3DataClubsClubTableBase.Columns.Add("Description", descriptionColumnBase0);
            var hookColumnBase = new ColumnBase<ColumnMappingBase>("Hook", "character varying(100)", ogma3DataClubsClubTableBase);
            ogma3DataClubsClubTableBase.Columns.Add("Hook", hookColumnBase);
            var iconColumnBase = new ColumnBase<ColumnMappingBase>("Icon", "text", ogma3DataClubsClubTableBase);
            ogma3DataClubsClubTableBase.Columns.Add("Icon", iconColumnBase);
            var iconIdColumnBase = new ColumnBase<ColumnMappingBase>("IconId", "text", ogma3DataClubsClubTableBase)
            {
                IsNullable = true
            };
            ogma3DataClubsClubTableBase.Columns.Add("IconId", iconIdColumnBase);
            var idColumnBase6 = new ColumnBase<ColumnMappingBase>("Id", "bigint", ogma3DataClubsClubTableBase);
            ogma3DataClubsClubTableBase.Columns.Add("Id", idColumnBase6);
            var nameColumnBase0 = new ColumnBase<ColumnMappingBase>("Name", "character varying(50)", ogma3DataClubsClubTableBase);
            ogma3DataClubsClubTableBase.Columns.Add("Name", nameColumnBase0);
            var slugColumnBase1 = new ColumnBase<ColumnMappingBase>("Slug", "character varying(50)", ogma3DataClubsClubTableBase);
            ogma3DataClubsClubTableBase.Columns.Add("Slug", slugColumnBase1);
            relationalModel.DefaultTables.Add("Ogma3.Data.Clubs.Club", ogma3DataClubsClubTableBase);
            var ogma3DataClubsClubMappingBase = new TableMappingBase<ColumnMappingBase>(club, ogma3DataClubsClubTableBase, true);
            ogma3DataClubsClubTableBase.AddTypeMapping(ogma3DataClubsClubMappingBase, false);
            defaultTableMappings11.Add(ogma3DataClubsClubMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase6, club.FindProperty("Id")!, ogma3DataClubsClubMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)creationDateColumnBase3, club.FindProperty("CreationDate")!, ogma3DataClubsClubMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)descriptionColumnBase0, club.FindProperty("Description")!, ogma3DataClubsClubMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)hookColumnBase, club.FindProperty("Hook")!, ogma3DataClubsClubMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)iconColumnBase, club.FindProperty("Icon")!, ogma3DataClubsClubMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)iconIdColumnBase, club.FindProperty("IconId")!, ogma3DataClubsClubMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase0, club.FindProperty("Name")!, ogma3DataClubsClubMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)slugColumnBase1, club.FindProperty("Slug")!, ogma3DataClubsClubMappingBase);

            var tableMappings11 = new List<TableMapping>();
            club.SetRuntimeAnnotation("Relational:TableMappings", tableMappings11);
            var clubsTable = new Table("Clubs", null, relationalModel);
            var idColumn6 = new Column("Id", "bigint", clubsTable);
            clubsTable.Columns.Add("Id", idColumn6);
            idColumn6.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            var creationDateColumn3 = new Column("CreationDate", "timestamp with time zone", clubsTable);
            clubsTable.Columns.Add("CreationDate", creationDateColumn3);
            var descriptionColumn0 = new Column("Description", "character varying(25000)", clubsTable);
            clubsTable.Columns.Add("Description", descriptionColumn0);
            var hookColumn = new Column("Hook", "character varying(100)", clubsTable);
            clubsTable.Columns.Add("Hook", hookColumn);
            var iconColumn = new Column("Icon", "text", clubsTable);
            clubsTable.Columns.Add("Icon", iconColumn);
            var iconIdColumn = new Column("IconId", "text", clubsTable)
            {
                IsNullable = true
            };
            clubsTable.Columns.Add("IconId", iconIdColumn);
            var nameColumn0 = new Column("Name", "character varying(50)", clubsTable);
            clubsTable.Columns.Add("Name", nameColumn0);
            var slugColumn1 = new Column("Slug", "character varying(50)", clubsTable);
            clubsTable.Columns.Add("Slug", slugColumn1);
            var pK_Clubs = new UniqueConstraint("PK_Clubs", clubsTable, new[] { idColumn6 });
            clubsTable.PrimaryKey = pK_Clubs;
            var pK_ClubsUc = RelationalModel.GetKey(this,
                "Ogma3.Data.Clubs.Club",
                new[] { "Id" });
            pK_Clubs.MappedKeys.Add(pK_ClubsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_ClubsUc).Add(pK_Clubs);
            clubsTable.UniqueConstraints.Add("PK_Clubs", pK_Clubs);
            relationalModel.Tables.Add(("Clubs", null), clubsTable);
            var clubsTableMapping = new TableMapping(club, clubsTable, true);
            clubsTable.AddTypeMapping(clubsTableMapping, false);
            tableMappings11.Add(clubsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn6, club.FindProperty("Id")!, clubsTableMapping);
            RelationalModel.CreateColumnMapping(creationDateColumn3, club.FindProperty("CreationDate")!, clubsTableMapping);
            RelationalModel.CreateColumnMapping(descriptionColumn0, club.FindProperty("Description")!, clubsTableMapping);
            RelationalModel.CreateColumnMapping(hookColumn, club.FindProperty("Hook")!, clubsTableMapping);
            RelationalModel.CreateColumnMapping(iconColumn, club.FindProperty("Icon")!, clubsTableMapping);
            RelationalModel.CreateColumnMapping(iconIdColumn, club.FindProperty("IconId")!, clubsTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn0, club.FindProperty("Name")!, clubsTableMapping);
            RelationalModel.CreateColumnMapping(slugColumn1, club.FindProperty("Slug")!, clubsTableMapping);

            var clubMember = FindEntityType("Ogma3.Data.Clubs.ClubMember")!;

            var defaultTableMappings12 = new List<TableMappingBase<ColumnMappingBase>>();
            clubMember.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings12);
            var ogma3DataClubsClubMemberTableBase = new TableBase("Ogma3.Data.Clubs.ClubMember", null, relationalModel);
            var clubIdColumnBase1 = new ColumnBase<ColumnMappingBase>("ClubId", "bigint", ogma3DataClubsClubMemberTableBase);
            ogma3DataClubsClubMemberTableBase.Columns.Add("ClubId", clubIdColumnBase1);
            var memberIdColumnBase = new ColumnBase<ColumnMappingBase>("MemberId", "bigint", ogma3DataClubsClubMemberTableBase);
            ogma3DataClubsClubMemberTableBase.Columns.Add("MemberId", memberIdColumnBase);
            var memberSinceColumnBase = new ColumnBase<ColumnMappingBase>("MemberSince", "timestamp with time zone", ogma3DataClubsClubMemberTableBase);
            ogma3DataClubsClubMemberTableBase.Columns.Add("MemberSince", memberSinceColumnBase);
            var roleColumnBase = new ColumnBase<ColumnMappingBase>("Role", "e_club_member_roles", ogma3DataClubsClubMemberTableBase);
            ogma3DataClubsClubMemberTableBase.Columns.Add("Role", roleColumnBase);
            relationalModel.DefaultTables.Add("Ogma3.Data.Clubs.ClubMember", ogma3DataClubsClubMemberTableBase);
            var ogma3DataClubsClubMemberMappingBase = new TableMappingBase<ColumnMappingBase>(clubMember, ogma3DataClubsClubMemberTableBase, true);
            ogma3DataClubsClubMemberTableBase.AddTypeMapping(ogma3DataClubsClubMemberMappingBase, false);
            defaultTableMappings12.Add(ogma3DataClubsClubMemberMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)clubIdColumnBase1, clubMember.FindProperty("ClubId")!, ogma3DataClubsClubMemberMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)memberIdColumnBase, clubMember.FindProperty("MemberId")!, ogma3DataClubsClubMemberMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)memberSinceColumnBase, clubMember.FindProperty("MemberSince")!, ogma3DataClubsClubMemberMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)roleColumnBase, clubMember.FindProperty("Role")!, ogma3DataClubsClubMemberMappingBase);

            var tableMappings12 = new List<TableMapping>();
            clubMember.SetRuntimeAnnotation("Relational:TableMappings", tableMappings12);
            var clubMembersTable = new Table("ClubMembers", null, relationalModel);
            var clubIdColumn1 = new Column("ClubId", "bigint", clubMembersTable);
            clubMembersTable.Columns.Add("ClubId", clubIdColumn1);
            var memberIdColumn = new Column("MemberId", "bigint", clubMembersTable);
            clubMembersTable.Columns.Add("MemberId", memberIdColumn);
            var memberSinceColumn = new Column("MemberSince", "timestamp with time zone", clubMembersTable);
            clubMembersTable.Columns.Add("MemberSince", memberSinceColumn);
            var roleColumn = new Column("Role", "e_club_member_roles", clubMembersTable);
            clubMembersTable.Columns.Add("Role", roleColumn);
            var pK_ClubMembers = new UniqueConstraint("PK_ClubMembers", clubMembersTable, new[] { clubIdColumn1, memberIdColumn });
            clubMembersTable.PrimaryKey = pK_ClubMembers;
            var pK_ClubMembersUc = RelationalModel.GetKey(this,
                "Ogma3.Data.Clubs.ClubMember",
                new[] { "ClubId", "MemberId" });
            pK_ClubMembers.MappedKeys.Add(pK_ClubMembersUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_ClubMembersUc).Add(pK_ClubMembers);
            clubMembersTable.UniqueConstraints.Add("PK_ClubMembers", pK_ClubMembers);
            var iX_ClubMembers_MemberId = new TableIndex(
            "IX_ClubMembers_MemberId", clubMembersTable, new[] { memberIdColumn }, false);
            var iX_ClubMembers_MemberIdIx = RelationalModel.GetIndex(this,
                "Ogma3.Data.Clubs.ClubMember",
                new[] { "MemberId" });
            iX_ClubMembers_MemberId.MappedIndexes.Add(iX_ClubMembers_MemberIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_ClubMembers_MemberIdIx).Add(iX_ClubMembers_MemberId);
            clubMembersTable.Indexes.Add("IX_ClubMembers_MemberId", iX_ClubMembers_MemberId);
            relationalModel.Tables.Add(("ClubMembers", null), clubMembersTable);
            var clubMembersTableMapping = new TableMapping(clubMember, clubMembersTable, true);
            clubMembersTable.AddTypeMapping(clubMembersTableMapping, false);
            tableMappings12.Add(clubMembersTableMapping);
            RelationalModel.CreateColumnMapping(clubIdColumn1, clubMember.FindProperty("ClubId")!, clubMembersTableMapping);
            RelationalModel.CreateColumnMapping(memberIdColumn, clubMember.FindProperty("MemberId")!, clubMembersTableMapping);
            RelationalModel.CreateColumnMapping(memberSinceColumn, clubMember.FindProperty("MemberSince")!, clubMembersTableMapping);
            RelationalModel.CreateColumnMapping(roleColumn, clubMember.FindProperty("Role")!, clubMembersTableMapping);

            var comment = FindEntityType("Ogma3.Data.Comments.Comment")!;

            var defaultTableMappings13 = new List<TableMappingBase<ColumnMappingBase>>();
            comment.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings13);
            var ogma3DataCommentsCommentTableBase = new TableBase("Ogma3.Data.Comments.Comment", null, relationalModel);
            var authorIdColumnBase1 = new ColumnBase<ColumnMappingBase>("AuthorId", "bigint", ogma3DataCommentsCommentTableBase);
            ogma3DataCommentsCommentTableBase.Columns.Add("AuthorId", authorIdColumnBase1);
            var bodyColumnBase2 = new ColumnBase<ColumnMappingBase>("Body", "character varying(5000)", ogma3DataCommentsCommentTableBase);
            ogma3DataCommentsCommentTableBase.Columns.Add("Body", bodyColumnBase2);
            var commentsThreadIdColumnBase = new ColumnBase<ColumnMappingBase>("CommentsThreadId", "bigint", ogma3DataCommentsCommentTableBase);
            ogma3DataCommentsCommentTableBase.Columns.Add("CommentsThreadId", commentsThreadIdColumnBase);
            var dateTimeColumnBase0 = new ColumnBase<ColumnMappingBase>("DateTime", "timestamp with time zone", ogma3DataCommentsCommentTableBase);
            ogma3DataCommentsCommentTableBase.Columns.Add("DateTime", dateTimeColumnBase0);
            var deletedByColumnBase = new ColumnBase<ColumnMappingBase>("DeletedBy", "e_deleted_by", ogma3DataCommentsCommentTableBase)
            {
                IsNullable = true
            };
            ogma3DataCommentsCommentTableBase.Columns.Add("DeletedBy", deletedByColumnBase);
            var deletedByUserIdColumnBase = new ColumnBase<ColumnMappingBase>("DeletedByUserId", "bigint", ogma3DataCommentsCommentTableBase)
            {
                IsNullable = true
            };
            ogma3DataCommentsCommentTableBase.Columns.Add("DeletedByUserId", deletedByUserIdColumnBase);
            var idColumnBase7 = new ColumnBase<ColumnMappingBase>("Id", "bigint", ogma3DataCommentsCommentTableBase);
            ogma3DataCommentsCommentTableBase.Columns.Add("Id", idColumnBase7);
            relationalModel.DefaultTables.Add("Ogma3.Data.Comments.Comment", ogma3DataCommentsCommentTableBase);
            var ogma3DataCommentsCommentMappingBase = new TableMappingBase<ColumnMappingBase>(comment, ogma3DataCommentsCommentTableBase, true);
            ogma3DataCommentsCommentTableBase.AddTypeMapping(ogma3DataCommentsCommentMappingBase, false);
            defaultTableMappings13.Add(ogma3DataCommentsCommentMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase7, comment.FindProperty("Id")!, ogma3DataCommentsCommentMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)authorIdColumnBase1, comment.FindProperty("AuthorId")!, ogma3DataCommentsCommentMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)bodyColumnBase2, comment.FindProperty("Body")!, ogma3DataCommentsCommentMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)commentsThreadIdColumnBase, comment.FindProperty("CommentsThreadId")!, ogma3DataCommentsCommentMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)dateTimeColumnBase0, comment.FindProperty("DateTime")!, ogma3DataCommentsCommentMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)deletedByColumnBase, comment.FindProperty("DeletedBy")!, ogma3DataCommentsCommentMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)deletedByUserIdColumnBase, comment.FindProperty("DeletedByUserId")!, ogma3DataCommentsCommentMappingBase);

            var tableMappings13 = new List<TableMapping>();
            comment.SetRuntimeAnnotation("Relational:TableMappings", tableMappings13);
            var commentsTable = new Table("Comments", null, relationalModel);
            var idColumn7 = new Column("Id", "bigint", commentsTable);
            commentsTable.Columns.Add("Id", idColumn7);
            idColumn7.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            var authorIdColumn1 = new Column("AuthorId", "bigint", commentsTable);
            commentsTable.Columns.Add("AuthorId", authorIdColumn1);
            var bodyColumn2 = new Column("Body", "character varying(5000)", commentsTable);
            commentsTable.Columns.Add("Body", bodyColumn2);
            var commentsThreadIdColumn = new Column("CommentsThreadId", "bigint", commentsTable);
            commentsTable.Columns.Add("CommentsThreadId", commentsThreadIdColumn);
            var dateTimeColumn0 = new Column("DateTime", "timestamp with time zone", commentsTable);
            commentsTable.Columns.Add("DateTime", dateTimeColumn0);
            var deletedByColumn = new Column("DeletedBy", "e_deleted_by", commentsTable)
            {
                IsNullable = true
            };
            commentsTable.Columns.Add("DeletedBy", deletedByColumn);
            var deletedByUserIdColumn = new Column("DeletedByUserId", "bigint", commentsTable)
            {
                IsNullable = true
            };
            commentsTable.Columns.Add("DeletedByUserId", deletedByUserIdColumn);
            var pK_Comments = new UniqueConstraint("PK_Comments", commentsTable, new[] { idColumn7 });
            commentsTable.PrimaryKey = pK_Comments;
            var pK_CommentsUc = RelationalModel.GetKey(this,
                "Ogma3.Data.Comments.Comment",
                new[] { "Id" });
            pK_Comments.MappedKeys.Add(pK_CommentsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_CommentsUc).Add(pK_Comments);
            commentsTable.UniqueConstraints.Add("PK_Comments", pK_Comments);
            var iX_Comments_AuthorId = new TableIndex(
            "IX_Comments_AuthorId", commentsTable, new[] { authorIdColumn1 }, false);
            var iX_Comments_AuthorIdIx = RelationalModel.GetIndex(this,
                "Ogma3.Data.Comments.Comment",
                new[] { "AuthorId" });
            iX_Comments_AuthorId.MappedIndexes.Add(iX_Comments_AuthorIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Comments_AuthorIdIx).Add(iX_Comments_AuthorId);
            commentsTable.Indexes.Add("IX_Comments_AuthorId", iX_Comments_AuthorId);
            var iX_Comments_CommentsThreadId = new TableIndex(
            "IX_Comments_CommentsThreadId", commentsTable, new[] { commentsThreadIdColumn }, false);
            var iX_Comments_CommentsThreadIdIx = RelationalModel.GetIndex(this,
                "Ogma3.Data.Comments.Comment",
                new[] { "CommentsThreadId" });
            iX_Comments_CommentsThreadId.MappedIndexes.Add(iX_Comments_CommentsThreadIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Comments_CommentsThreadIdIx).Add(iX_Comments_CommentsThreadId);
            commentsTable.Indexes.Add("IX_Comments_CommentsThreadId", iX_Comments_CommentsThreadId);
            var iX_Comments_DeletedByUserId = new TableIndex(
            "IX_Comments_DeletedByUserId", commentsTable, new[] { deletedByUserIdColumn }, false);
            var iX_Comments_DeletedByUserIdIx = RelationalModel.GetIndex(this,
                "Ogma3.Data.Comments.Comment",
                new[] { "DeletedByUserId" });
            iX_Comments_DeletedByUserId.MappedIndexes.Add(iX_Comments_DeletedByUserIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Comments_DeletedByUserIdIx).Add(iX_Comments_DeletedByUserId);
            commentsTable.Indexes.Add("IX_Comments_DeletedByUserId", iX_Comments_DeletedByUserId);
            relationalModel.Tables.Add(("Comments", null), commentsTable);
            var commentsTableMapping = new TableMapping(comment, commentsTable, true);
            commentsTable.AddTypeMapping(commentsTableMapping, false);
            tableMappings13.Add(commentsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn7, comment.FindProperty("Id")!, commentsTableMapping);
            RelationalModel.CreateColumnMapping(authorIdColumn1, comment.FindProperty("AuthorId")!, commentsTableMapping);
            RelationalModel.CreateColumnMapping(bodyColumn2, comment.FindProperty("Body")!, commentsTableMapping);
            RelationalModel.CreateColumnMapping(commentsThreadIdColumn, comment.FindProperty("CommentsThreadId")!, commentsTableMapping);
            RelationalModel.CreateColumnMapping(dateTimeColumn0, comment.FindProperty("DateTime")!, commentsTableMapping);
            RelationalModel.CreateColumnMapping(deletedByColumn, comment.FindProperty("DeletedBy")!, commentsTableMapping);
            RelationalModel.CreateColumnMapping(deletedByUserIdColumn, comment.FindProperty("DeletedByUserId")!, commentsTableMapping);

            var commentRevision = FindEntityType("Ogma3.Data.Comments.CommentRevision")!;

            var defaultTableMappings14 = new List<TableMappingBase<ColumnMappingBase>>();
            commentRevision.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings14);
            var ogma3DataCommentsCommentRevisionTableBase = new TableBase("Ogma3.Data.Comments.CommentRevision", null, relationalModel);
            var bodyColumnBase3 = new ColumnBase<ColumnMappingBase>("Body", "character varying(5000)", ogma3DataCommentsCommentRevisionTableBase);
            ogma3DataCommentsCommentRevisionTableBase.Columns.Add("Body", bodyColumnBase3);
            var editTimeColumnBase = new ColumnBase<ColumnMappingBase>("EditTime", "timestamp with time zone", ogma3DataCommentsCommentRevisionTableBase);
            ogma3DataCommentsCommentRevisionTableBase.Columns.Add("EditTime", editTimeColumnBase);
            var idColumnBase8 = new ColumnBase<ColumnMappingBase>("Id", "bigint", ogma3DataCommentsCommentRevisionTableBase);
            ogma3DataCommentsCommentRevisionTableBase.Columns.Add("Id", idColumnBase8);
            var parentIdColumnBase = new ColumnBase<ColumnMappingBase>("ParentId", "bigint", ogma3DataCommentsCommentRevisionTableBase);
            ogma3DataCommentsCommentRevisionTableBase.Columns.Add("ParentId", parentIdColumnBase);
            relationalModel.DefaultTables.Add("Ogma3.Data.Comments.CommentRevision", ogma3DataCommentsCommentRevisionTableBase);
            var ogma3DataCommentsCommentRevisionMappingBase = new TableMappingBase<ColumnMappingBase>(commentRevision, ogma3DataCommentsCommentRevisionTableBase, true);
            ogma3DataCommentsCommentRevisionTableBase.AddTypeMapping(ogma3DataCommentsCommentRevisionMappingBase, false);
            defaultTableMappings14.Add(ogma3DataCommentsCommentRevisionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase8, commentRevision.FindProperty("Id")!, ogma3DataCommentsCommentRevisionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)bodyColumnBase3, commentRevision.FindProperty("Body")!, ogma3DataCommentsCommentRevisionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)editTimeColumnBase, commentRevision.FindProperty("EditTime")!, ogma3DataCommentsCommentRevisionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)parentIdColumnBase, commentRevision.FindProperty("ParentId")!, ogma3DataCommentsCommentRevisionMappingBase);

            var tableMappings14 = new List<TableMapping>();
            commentRevision.SetRuntimeAnnotation("Relational:TableMappings", tableMappings14);
            var commentRevisionsTable = new Table("CommentRevisions", null, relationalModel);
            var idColumn8 = new Column("Id", "bigint", commentRevisionsTable);
            commentRevisionsTable.Columns.Add("Id", idColumn8);
            idColumn8.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            var bodyColumn3 = new Column("Body", "character varying(5000)", commentRevisionsTable);
            commentRevisionsTable.Columns.Add("Body", bodyColumn3);
            var editTimeColumn = new Column("EditTime", "timestamp with time zone", commentRevisionsTable);
            commentRevisionsTable.Columns.Add("EditTime", editTimeColumn);
            var parentIdColumn = new Column("ParentId", "bigint", commentRevisionsTable);
            commentRevisionsTable.Columns.Add("ParentId", parentIdColumn);
            var pK_CommentRevisions = new UniqueConstraint("PK_CommentRevisions", commentRevisionsTable, new[] { idColumn8 });
            commentRevisionsTable.PrimaryKey = pK_CommentRevisions;
            var pK_CommentRevisionsUc = RelationalModel.GetKey(this,
                "Ogma3.Data.Comments.CommentRevision",
                new[] { "Id" });
            pK_CommentRevisions.MappedKeys.Add(pK_CommentRevisionsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_CommentRevisionsUc).Add(pK_CommentRevisions);
            commentRevisionsTable.UniqueConstraints.Add("PK_CommentRevisions", pK_CommentRevisions);
            var iX_CommentRevisions_ParentId = new TableIndex(
            "IX_CommentRevisions_ParentId", commentRevisionsTable, new[] { parentIdColumn }, false);
            var iX_CommentRevisions_ParentIdIx = RelationalModel.GetIndex(this,
                "Ogma3.Data.Comments.CommentRevision",
                new[] { "ParentId" });
            iX_CommentRevisions_ParentId.MappedIndexes.Add(iX_CommentRevisions_ParentIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_CommentRevisions_ParentIdIx).Add(iX_CommentRevisions_ParentId);
            commentRevisionsTable.Indexes.Add("IX_CommentRevisions_ParentId", iX_CommentRevisions_ParentId);
            relationalModel.Tables.Add(("CommentRevisions", null), commentRevisionsTable);
            var commentRevisionsTableMapping = new TableMapping(commentRevision, commentRevisionsTable, true);
            commentRevisionsTable.AddTypeMapping(commentRevisionsTableMapping, false);
            tableMappings14.Add(commentRevisionsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn8, commentRevision.FindProperty("Id")!, commentRevisionsTableMapping);
            RelationalModel.CreateColumnMapping(bodyColumn3, commentRevision.FindProperty("Body")!, commentRevisionsTableMapping);
            RelationalModel.CreateColumnMapping(editTimeColumn, commentRevision.FindProperty("EditTime")!, commentRevisionsTableMapping);
            RelationalModel.CreateColumnMapping(parentIdColumn, commentRevision.FindProperty("ParentId")!, commentRevisionsTableMapping);

            var commentsThread = FindEntityType("Ogma3.Data.CommentsThreads.CommentsThread")!;

            var defaultTableMappings15 = new List<TableMappingBase<ColumnMappingBase>>();
            commentsThread.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings15);
            var ogma3DataCommentsThreadsCommentsThreadTableBase = new TableBase("Ogma3.Data.CommentsThreads.CommentsThread", null, relationalModel);
            var blogpostIdColumnBase = new ColumnBase<ColumnMappingBase>("BlogpostId", "bigint", ogma3DataCommentsThreadsCommentsThreadTableBase)
            {
                IsNullable = true
            };
            ogma3DataCommentsThreadsCommentsThreadTableBase.Columns.Add("BlogpostId", blogpostIdColumnBase);
            var chapterIdColumnBase = new ColumnBase<ColumnMappingBase>("ChapterId", "bigint", ogma3DataCommentsThreadsCommentsThreadTableBase)
            {
                IsNullable = true
            };
            ogma3DataCommentsThreadsCommentsThreadTableBase.Columns.Add("ChapterId", chapterIdColumnBase);
            var clubThreadIdColumnBase = new ColumnBase<ColumnMappingBase>("ClubThreadId", "bigint", ogma3DataCommentsThreadsCommentsThreadTableBase)
            {
                IsNullable = true
            };
            ogma3DataCommentsThreadsCommentsThreadTableBase.Columns.Add("ClubThreadId", clubThreadIdColumnBase);
            var commentsCountColumnBase = new ColumnBase<ColumnMappingBase>("CommentsCount", "integer", ogma3DataCommentsThreadsCommentsThreadTableBase);
            ogma3DataCommentsThreadsCommentsThreadTableBase.Columns.Add("CommentsCount", commentsCountColumnBase);
            var idColumnBase9 = new ColumnBase<ColumnMappingBase>("Id", "bigint", ogma3DataCommentsThreadsCommentsThreadTableBase);
            ogma3DataCommentsThreadsCommentsThreadTableBase.Columns.Add("Id", idColumnBase9);
            var isLockedColumnBase = new ColumnBase<ColumnMappingBase>("IsLocked", "boolean", ogma3DataCommentsThreadsCommentsThreadTableBase);
            ogma3DataCommentsThreadsCommentsThreadTableBase.Columns.Add("IsLocked", isLockedColumnBase);
            var lockDateColumnBase = new ColumnBase<ColumnMappingBase>("LockDate", "timestamp with time zone", ogma3DataCommentsThreadsCommentsThreadTableBase)
            {
                IsNullable = true
            };
            ogma3DataCommentsThreadsCommentsThreadTableBase.Columns.Add("LockDate", lockDateColumnBase);
            var userIdColumnBase5 = new ColumnBase<ColumnMappingBase>("UserId", "bigint", ogma3DataCommentsThreadsCommentsThreadTableBase)
            {
                IsNullable = true
            };
            ogma3DataCommentsThreadsCommentsThreadTableBase.Columns.Add("UserId", userIdColumnBase5);
            relationalModel.DefaultTables.Add("Ogma3.Data.CommentsThreads.CommentsThread", ogma3DataCommentsThreadsCommentsThreadTableBase);
            var ogma3DataCommentsThreadsCommentsThreadMappingBase = new TableMappingBase<ColumnMappingBase>(commentsThread, ogma3DataCommentsThreadsCommentsThreadTableBase, true);
            ogma3DataCommentsThreadsCommentsThreadTableBase.AddTypeMapping(ogma3DataCommentsThreadsCommentsThreadMappingBase, false);
            defaultTableMappings15.Add(ogma3DataCommentsThreadsCommentsThreadMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase9, commentsThread.FindProperty("Id")!, ogma3DataCommentsThreadsCommentsThreadMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)blogpostIdColumnBase, commentsThread.FindProperty("BlogpostId")!, ogma3DataCommentsThreadsCommentsThreadMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)chapterIdColumnBase, commentsThread.FindProperty("ChapterId")!, ogma3DataCommentsThreadsCommentsThreadMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)clubThreadIdColumnBase, commentsThread.FindProperty("ClubThreadId")!, ogma3DataCommentsThreadsCommentsThreadMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)commentsCountColumnBase, commentsThread.FindProperty("CommentsCount")!, ogma3DataCommentsThreadsCommentsThreadMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)isLockedColumnBase, commentsThread.FindProperty("IsLocked")!, ogma3DataCommentsThreadsCommentsThreadMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)lockDateColumnBase, commentsThread.FindProperty("LockDate")!, ogma3DataCommentsThreadsCommentsThreadMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)userIdColumnBase5, commentsThread.FindProperty("UserId")!, ogma3DataCommentsThreadsCommentsThreadMappingBase);

            var tableMappings15 = new List<TableMapping>();
            commentsThread.SetRuntimeAnnotation("Relational:TableMappings", tableMappings15);
            var commentThreadsTable = new Table("CommentThreads", null, relationalModel);
            var idColumn9 = new Column("Id", "bigint", commentThreadsTable);
            commentThreadsTable.Columns.Add("Id", idColumn9);
            idColumn9.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            var blogpostIdColumn = new Column("BlogpostId", "bigint", commentThreadsTable)
            {
                IsNullable = true
            };
            commentThreadsTable.Columns.Add("BlogpostId", blogpostIdColumn);
            var chapterIdColumn = new Column("ChapterId", "bigint", commentThreadsTable)
            {
                IsNullable = true
            };
            commentThreadsTable.Columns.Add("ChapterId", chapterIdColumn);
            var clubThreadIdColumn = new Column("ClubThreadId", "bigint", commentThreadsTable)
            {
                IsNullable = true
            };
            commentThreadsTable.Columns.Add("ClubThreadId", clubThreadIdColumn);
            var commentsCountColumn = new Column("CommentsCount", "integer", commentThreadsTable);
            commentThreadsTable.Columns.Add("CommentsCount", commentsCountColumn);
            var isLockedColumn = new Column("IsLocked", "boolean", commentThreadsTable);
            commentThreadsTable.Columns.Add("IsLocked", isLockedColumn);
            var lockDateColumn = new Column("LockDate", "timestamp with time zone", commentThreadsTable)
            {
                IsNullable = true
            };
            commentThreadsTable.Columns.Add("LockDate", lockDateColumn);
            var userIdColumn5 = new Column("UserId", "bigint", commentThreadsTable)
            {
                IsNullable = true
            };
            commentThreadsTable.Columns.Add("UserId", userIdColumn5);
            var pK_CommentThreads = new UniqueConstraint("PK_CommentThreads", commentThreadsTable, new[] { idColumn9 });
            commentThreadsTable.PrimaryKey = pK_CommentThreads;
            var pK_CommentThreadsUc = RelationalModel.GetKey(this,
                "Ogma3.Data.CommentsThreads.CommentsThread",
                new[] { "Id" });
            pK_CommentThreads.MappedKeys.Add(pK_CommentThreadsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_CommentThreadsUc).Add(pK_CommentThreads);
            commentThreadsTable.UniqueConstraints.Add("PK_CommentThreads", pK_CommentThreads);
            var iX_CommentThreads_BlogpostId = new TableIndex(
            "IX_CommentThreads_BlogpostId", commentThreadsTable, new[] { blogpostIdColumn }, true);
            var iX_CommentThreads_BlogpostIdIx = RelationalModel.GetIndex(this,
                "Ogma3.Data.CommentsThreads.CommentsThread",
                new[] { "BlogpostId" });
            iX_CommentThreads_BlogpostId.MappedIndexes.Add(iX_CommentThreads_BlogpostIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_CommentThreads_BlogpostIdIx).Add(iX_CommentThreads_BlogpostId);
            commentThreadsTable.Indexes.Add("IX_CommentThreads_BlogpostId", iX_CommentThreads_BlogpostId);
            var iX_CommentThreads_ChapterId = new TableIndex(
            "IX_CommentThreads_ChapterId", commentThreadsTable, new[] { chapterIdColumn }, true);
            var iX_CommentThreads_ChapterIdIx = RelationalModel.GetIndex(this,
                "Ogma3.Data.CommentsThreads.CommentsThread",
                new[] { "ChapterId" });
            iX_CommentThreads_ChapterId.MappedIndexes.Add(iX_CommentThreads_ChapterIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_CommentThreads_ChapterIdIx).Add(iX_CommentThreads_ChapterId);
            commentThreadsTable.Indexes.Add("IX_CommentThreads_ChapterId", iX_CommentThreads_ChapterId);
            var iX_CommentThreads_ClubThreadId = new TableIndex(
            "IX_CommentThreads_ClubThreadId", commentThreadsTable, new[] { clubThreadIdColumn }, true);
            var iX_CommentThreads_ClubThreadIdIx = RelationalModel.GetIndex(this,
                "Ogma3.Data.CommentsThreads.CommentsThread",
                new[] { "ClubThreadId" });
            iX_CommentThreads_ClubThreadId.MappedIndexes.Add(iX_CommentThreads_ClubThreadIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_CommentThreads_ClubThreadIdIx).Add(iX_CommentThreads_ClubThreadId);
            commentThreadsTable.Indexes.Add("IX_CommentThreads_ClubThreadId", iX_CommentThreads_ClubThreadId);
            var iX_CommentThreads_UserId = new TableIndex(
            "IX_CommentThreads_UserId", commentThreadsTable, new[] { userIdColumn5 }, true);
            var iX_CommentThreads_UserIdIx = RelationalModel.GetIndex(this,
                "Ogma3.Data.CommentsThreads.CommentsThread",
                new[] { "UserId" });
            iX_CommentThreads_UserId.MappedIndexes.Add(iX_CommentThreads_UserIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_CommentThreads_UserIdIx).Add(iX_CommentThreads_UserId);
            commentThreadsTable.Indexes.Add("IX_CommentThreads_UserId", iX_CommentThreads_UserId);
            relationalModel.Tables.Add(("CommentThreads", null), commentThreadsTable);
            var commentThreadsTableMapping = new TableMapping(commentsThread, commentThreadsTable, true);
            commentThreadsTable.AddTypeMapping(commentThreadsTableMapping, false);
            tableMappings15.Add(commentThreadsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn9, commentsThread.FindProperty("Id")!, commentThreadsTableMapping);
            RelationalModel.CreateColumnMapping(blogpostIdColumn, commentsThread.FindProperty("BlogpostId")!, commentThreadsTableMapping);
            RelationalModel.CreateColumnMapping(chapterIdColumn, commentsThread.FindProperty("ChapterId")!, commentThreadsTableMapping);
            RelationalModel.CreateColumnMapping(clubThreadIdColumn, commentsThread.FindProperty("ClubThreadId")!, commentThreadsTableMapping);
            RelationalModel.CreateColumnMapping(commentsCountColumn, commentsThread.FindProperty("CommentsCount")!, commentThreadsTableMapping);
            RelationalModel.CreateColumnMapping(isLockedColumn, commentsThread.FindProperty("IsLocked")!, commentThreadsTableMapping);
            RelationalModel.CreateColumnMapping(lockDateColumn, commentsThread.FindProperty("LockDate")!, commentThreadsTableMapping);
            RelationalModel.CreateColumnMapping(userIdColumn5, commentsThread.FindProperty("UserId")!, commentThreadsTableMapping);

            var commentsThreadSubscriber = FindEntityType("Ogma3.Data.CommentsThreads.CommentsThreadSubscriber")!;

            var defaultTableMappings16 = new List<TableMappingBase<ColumnMappingBase>>();
            commentsThreadSubscriber.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings16);
            var ogma3DataCommentsThreadsCommentsThreadSubscriberTableBase = new TableBase("Ogma3.Data.CommentsThreads.CommentsThreadSubscriber", null, relationalModel);
            var commentsThreadIdColumnBase0 = new ColumnBase<ColumnMappingBase>("CommentsThreadId", "bigint", ogma3DataCommentsThreadsCommentsThreadSubscriberTableBase);
            ogma3DataCommentsThreadsCommentsThreadSubscriberTableBase.Columns.Add("CommentsThreadId", commentsThreadIdColumnBase0);
            var ogmaUserIdColumnBase = new ColumnBase<ColumnMappingBase>("OgmaUserId", "bigint", ogma3DataCommentsThreadsCommentsThreadSubscriberTableBase);
            ogma3DataCommentsThreadsCommentsThreadSubscriberTableBase.Columns.Add("OgmaUserId", ogmaUserIdColumnBase);
            relationalModel.DefaultTables.Add("Ogma3.Data.CommentsThreads.CommentsThreadSubscriber", ogma3DataCommentsThreadsCommentsThreadSubscriberTableBase);
            var ogma3DataCommentsThreadsCommentsThreadSubscriberMappingBase = new TableMappingBase<ColumnMappingBase>(commentsThreadSubscriber, ogma3DataCommentsThreadsCommentsThreadSubscriberTableBase, true);
            ogma3DataCommentsThreadsCommentsThreadSubscriberTableBase.AddTypeMapping(ogma3DataCommentsThreadsCommentsThreadSubscriberMappingBase, false);
            defaultTableMappings16.Add(ogma3DataCommentsThreadsCommentsThreadSubscriberMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)commentsThreadIdColumnBase0, commentsThreadSubscriber.FindProperty("CommentsThreadId")!, ogma3DataCommentsThreadsCommentsThreadSubscriberMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)ogmaUserIdColumnBase, commentsThreadSubscriber.FindProperty("OgmaUserId")!, ogma3DataCommentsThreadsCommentsThreadSubscriberMappingBase);

            var tableMappings16 = new List<TableMapping>();
            commentsThreadSubscriber.SetRuntimeAnnotation("Relational:TableMappings", tableMappings16);
            var commentsThreadSubscribersTable = new Table("CommentsThreadSubscribers", null, relationalModel);
            var commentsThreadIdColumn0 = new Column("CommentsThreadId", "bigint", commentsThreadSubscribersTable);
            commentsThreadSubscribersTable.Columns.Add("CommentsThreadId", commentsThreadIdColumn0);
            var ogmaUserIdColumn = new Column("OgmaUserId", "bigint", commentsThreadSubscribersTable);
            commentsThreadSubscribersTable.Columns.Add("OgmaUserId", ogmaUserIdColumn);
            var pK_CommentsThreadSubscribers = new UniqueConstraint("PK_CommentsThreadSubscribers", commentsThreadSubscribersTable, new[] { commentsThreadIdColumn0, ogmaUserIdColumn });
            commentsThreadSubscribersTable.PrimaryKey = pK_CommentsThreadSubscribers;
            var pK_CommentsThreadSubscribersUc = RelationalModel.GetKey(this,
                "Ogma3.Data.CommentsThreads.CommentsThreadSubscriber",
                new[] { "CommentsThreadId", "OgmaUserId" });
            pK_CommentsThreadSubscribers.MappedKeys.Add(pK_CommentsThreadSubscribersUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_CommentsThreadSubscribersUc).Add(pK_CommentsThreadSubscribers);
            commentsThreadSubscribersTable.UniqueConstraints.Add("PK_CommentsThreadSubscribers", pK_CommentsThreadSubscribers);
            var iX_CommentsThreadSubscribers_OgmaUserId = new TableIndex(
            "IX_CommentsThreadSubscribers_OgmaUserId", commentsThreadSubscribersTable, new[] { ogmaUserIdColumn }, false);
            var iX_CommentsThreadSubscribers_OgmaUserIdIx = RelationalModel.GetIndex(this,
                "Ogma3.Data.CommentsThreads.CommentsThreadSubscriber",
                new[] { "OgmaUserId" });
            iX_CommentsThreadSubscribers_OgmaUserId.MappedIndexes.Add(iX_CommentsThreadSubscribers_OgmaUserIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_CommentsThreadSubscribers_OgmaUserIdIx).Add(iX_CommentsThreadSubscribers_OgmaUserId);
            commentsThreadSubscribersTable.Indexes.Add("IX_CommentsThreadSubscribers_OgmaUserId", iX_CommentsThreadSubscribers_OgmaUserId);
            relationalModel.Tables.Add(("CommentsThreadSubscribers", null), commentsThreadSubscribersTable);
            var commentsThreadSubscribersTableMapping = new TableMapping(commentsThreadSubscriber, commentsThreadSubscribersTable, true);
            commentsThreadSubscribersTable.AddTypeMapping(commentsThreadSubscribersTableMapping, false);
            tableMappings16.Add(commentsThreadSubscribersTableMapping);
            RelationalModel.CreateColumnMapping(commentsThreadIdColumn0, commentsThreadSubscriber.FindProperty("CommentsThreadId")!, commentsThreadSubscribersTableMapping);
            RelationalModel.CreateColumnMapping(ogmaUserIdColumn, commentsThreadSubscriber.FindProperty("OgmaUserId")!, commentsThreadSubscribersTableMapping);

            var document = FindEntityType("Ogma3.Data.Documents.Document")!;

            var defaultTableMappings17 = new List<TableMappingBase<ColumnMappingBase>>();
            document.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings17);
            var ogma3DataDocumentsDocumentTableBase = new TableBase("Ogma3.Data.Documents.Document", null, relationalModel);
            var bodyColumnBase4 = new ColumnBase<ColumnMappingBase>("Body", "text", ogma3DataDocumentsDocumentTableBase);
            ogma3DataDocumentsDocumentTableBase.Columns.Add("Body", bodyColumnBase4);
            var creationTimeColumnBase = new ColumnBase<ColumnMappingBase>("CreationTime", "timestamp with time zone", ogma3DataDocumentsDocumentTableBase);
            ogma3DataDocumentsDocumentTableBase.Columns.Add("CreationTime", creationTimeColumnBase);
            var idColumnBase10 = new ColumnBase<ColumnMappingBase>("Id", "bigint", ogma3DataDocumentsDocumentTableBase);
            ogma3DataDocumentsDocumentTableBase.Columns.Add("Id", idColumnBase10);
            var revisionDateColumnBase = new ColumnBase<ColumnMappingBase>("RevisionDate", "timestamp with time zone", ogma3DataDocumentsDocumentTableBase)
            {
                IsNullable = true
            };
            ogma3DataDocumentsDocumentTableBase.Columns.Add("RevisionDate", revisionDateColumnBase);
            var slugColumnBase2 = new ColumnBase<ColumnMappingBase>("Slug", "text", ogma3DataDocumentsDocumentTableBase);
            ogma3DataDocumentsDocumentTableBase.Columns.Add("Slug", slugColumnBase2);
            var titleColumnBase2 = new ColumnBase<ColumnMappingBase>("Title", "text", ogma3DataDocumentsDocumentTableBase);
            ogma3DataDocumentsDocumentTableBase.Columns.Add("Title", titleColumnBase2);
            var versionColumnBase = new ColumnBase<ColumnMappingBase>("Version", "bigint", ogma3DataDocumentsDocumentTableBase);
            ogma3DataDocumentsDocumentTableBase.Columns.Add("Version", versionColumnBase);
            relationalModel.DefaultTables.Add("Ogma3.Data.Documents.Document", ogma3DataDocumentsDocumentTableBase);
            var ogma3DataDocumentsDocumentMappingBase = new TableMappingBase<ColumnMappingBase>(document, ogma3DataDocumentsDocumentTableBase, true);
            ogma3DataDocumentsDocumentTableBase.AddTypeMapping(ogma3DataDocumentsDocumentMappingBase, false);
            defaultTableMappings17.Add(ogma3DataDocumentsDocumentMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase10, document.FindProperty("Id")!, ogma3DataDocumentsDocumentMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)bodyColumnBase4, document.FindProperty("Body")!, ogma3DataDocumentsDocumentMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)creationTimeColumnBase, document.FindProperty("CreationTime")!, ogma3DataDocumentsDocumentMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)revisionDateColumnBase, document.FindProperty("RevisionDate")!, ogma3DataDocumentsDocumentMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)slugColumnBase2, document.FindProperty("Slug")!, ogma3DataDocumentsDocumentMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)titleColumnBase2, document.FindProperty("Title")!, ogma3DataDocumentsDocumentMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)versionColumnBase, document.FindProperty("Version")!, ogma3DataDocumentsDocumentMappingBase);

            var tableMappings17 = new List<TableMapping>();
            document.SetRuntimeAnnotation("Relational:TableMappings", tableMappings17);
            var documentsTable = new Table("Documents", null, relationalModel);
            var idColumn10 = new Column("Id", "bigint", documentsTable);
            documentsTable.Columns.Add("Id", idColumn10);
            idColumn10.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            var bodyColumn4 = new Column("Body", "text", documentsTable);
            documentsTable.Columns.Add("Body", bodyColumn4);
            var creationTimeColumn = new Column("CreationTime", "timestamp with time zone", documentsTable);
            documentsTable.Columns.Add("CreationTime", creationTimeColumn);
            var revisionDateColumn = new Column("RevisionDate", "timestamp with time zone", documentsTable)
            {
                IsNullable = true
            };
            documentsTable.Columns.Add("RevisionDate", revisionDateColumn);
            var slugColumn2 = new Column("Slug", "text", documentsTable);
            documentsTable.Columns.Add("Slug", slugColumn2);
            var titleColumn2 = new Column("Title", "text", documentsTable);
            documentsTable.Columns.Add("Title", titleColumn2);
            var versionColumn = new Column("Version", "bigint", documentsTable);
            documentsTable.Columns.Add("Version", versionColumn);
            var pK_Documents = new UniqueConstraint("PK_Documents", documentsTable, new[] { idColumn10 });
            documentsTable.PrimaryKey = pK_Documents;
            var pK_DocumentsUc = RelationalModel.GetKey(this,
                "Ogma3.Data.Documents.Document",
                new[] { "Id" });
            pK_Documents.MappedKeys.Add(pK_DocumentsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_DocumentsUc).Add(pK_Documents);
            documentsTable.UniqueConstraints.Add("PK_Documents", pK_Documents);
            var iX_Documents_Slug_Version = new TableIndex(
            "IX_Documents_Slug_Version", documentsTable, new[] { slugColumn2, versionColumn }, true);
            var iX_Documents_Slug_VersionIx = RelationalModel.GetIndex(this,
                "Ogma3.Data.Documents.Document",
                new[] { "Slug", "Version" });
            iX_Documents_Slug_Version.MappedIndexes.Add(iX_Documents_Slug_VersionIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Documents_Slug_VersionIx).Add(iX_Documents_Slug_Version);
            documentsTable.Indexes.Add("IX_Documents_Slug_Version", iX_Documents_Slug_Version);
            var iX_Documents_Title_Version = new TableIndex(
            "IX_Documents_Title_Version", documentsTable, new[] { titleColumn2, versionColumn }, true);
            var iX_Documents_Title_VersionIx = RelationalModel.GetIndex(this,
                "Ogma3.Data.Documents.Document",
                new[] { "Title", "Version" });
            iX_Documents_Title_Version.MappedIndexes.Add(iX_Documents_Title_VersionIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Documents_Title_VersionIx).Add(iX_Documents_Title_Version);
            documentsTable.Indexes.Add("IX_Documents_Title_Version", iX_Documents_Title_Version);
            relationalModel.Tables.Add(("Documents", null), documentsTable);
            var documentsTableMapping = new TableMapping(document, documentsTable, true);
            documentsTable.AddTypeMapping(documentsTableMapping, false);
            tableMappings17.Add(documentsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn10, document.FindProperty("Id")!, documentsTableMapping);
            RelationalModel.CreateColumnMapping(bodyColumn4, document.FindProperty("Body")!, documentsTableMapping);
            RelationalModel.CreateColumnMapping(creationTimeColumn, document.FindProperty("CreationTime")!, documentsTableMapping);
            RelationalModel.CreateColumnMapping(revisionDateColumn, document.FindProperty("RevisionDate")!, documentsTableMapping);
            RelationalModel.CreateColumnMapping(slugColumn2, document.FindProperty("Slug")!, documentsTableMapping);
            RelationalModel.CreateColumnMapping(titleColumn2, document.FindProperty("Title")!, documentsTableMapping);
            RelationalModel.CreateColumnMapping(versionColumn, document.FindProperty("Version")!, documentsTableMapping);

            var faq = FindEntityType("Ogma3.Data.Faqs.Faq")!;

            var defaultTableMappings18 = new List<TableMappingBase<ColumnMappingBase>>();
            faq.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings18);
            var ogma3DataFaqsFaqTableBase = new TableBase("Ogma3.Data.Faqs.Faq", null, relationalModel);
            var answerColumnBase = new ColumnBase<ColumnMappingBase>("Answer", "character varying(10000)", ogma3DataFaqsFaqTableBase);
            ogma3DataFaqsFaqTableBase.Columns.Add("Answer", answerColumnBase);
            var answerRenderedColumnBase = new ColumnBase<ColumnMappingBase>("AnswerRendered", "character varying(20000)", ogma3DataFaqsFaqTableBase);
            ogma3DataFaqsFaqTableBase.Columns.Add("AnswerRendered", answerRenderedColumnBase);
            var idColumnBase11 = new ColumnBase<ColumnMappingBase>("Id", "bigint", ogma3DataFaqsFaqTableBase);
            ogma3DataFaqsFaqTableBase.Columns.Add("Id", idColumnBase11);
            var questionColumnBase = new ColumnBase<ColumnMappingBase>("Question", "character varying(5000)", ogma3DataFaqsFaqTableBase);
            ogma3DataFaqsFaqTableBase.Columns.Add("Question", questionColumnBase);
            relationalModel.DefaultTables.Add("Ogma3.Data.Faqs.Faq", ogma3DataFaqsFaqTableBase);
            var ogma3DataFaqsFaqMappingBase = new TableMappingBase<ColumnMappingBase>(faq, ogma3DataFaqsFaqTableBase, true);
            ogma3DataFaqsFaqTableBase.AddTypeMapping(ogma3DataFaqsFaqMappingBase, false);
            defaultTableMappings18.Add(ogma3DataFaqsFaqMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase11, faq.FindProperty("Id")!, ogma3DataFaqsFaqMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)answerColumnBase, faq.FindProperty("Answer")!, ogma3DataFaqsFaqMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)answerRenderedColumnBase, faq.FindProperty("AnswerRendered")!, ogma3DataFaqsFaqMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)questionColumnBase, faq.FindProperty("Question")!, ogma3DataFaqsFaqMappingBase);

            var tableMappings18 = new List<TableMapping>();
            faq.SetRuntimeAnnotation("Relational:TableMappings", tableMappings18);
            var faqsTable = new Table("Faqs", null, relationalModel);
            var idColumn11 = new Column("Id", "bigint", faqsTable);
            faqsTable.Columns.Add("Id", idColumn11);
            idColumn11.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            var answerColumn = new Column("Answer", "character varying(10000)", faqsTable);
            faqsTable.Columns.Add("Answer", answerColumn);
            var answerRenderedColumn = new Column("AnswerRendered", "character varying(20000)", faqsTable);
            faqsTable.Columns.Add("AnswerRendered", answerRenderedColumn);
            var questionColumn = new Column("Question", "character varying(5000)", faqsTable);
            faqsTable.Columns.Add("Question", questionColumn);
            var pK_Faqs = new UniqueConstraint("PK_Faqs", faqsTable, new[] { idColumn11 });
            faqsTable.PrimaryKey = pK_Faqs;
            var pK_FaqsUc = RelationalModel.GetKey(this,
                "Ogma3.Data.Faqs.Faq",
                new[] { "Id" });
            pK_Faqs.MappedKeys.Add(pK_FaqsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_FaqsUc).Add(pK_Faqs);
            faqsTable.UniqueConstraints.Add("PK_Faqs", pK_Faqs);
            relationalModel.Tables.Add(("Faqs", null), faqsTable);
            var faqsTableMapping = new TableMapping(faq, faqsTable, true);
            faqsTable.AddTypeMapping(faqsTableMapping, false);
            tableMappings18.Add(faqsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn11, faq.FindProperty("Id")!, faqsTableMapping);
            RelationalModel.CreateColumnMapping(answerColumn, faq.FindProperty("Answer")!, faqsTableMapping);
            RelationalModel.CreateColumnMapping(answerRenderedColumn, faq.FindProperty("AnswerRendered")!, faqsTableMapping);
            RelationalModel.CreateColumnMapping(questionColumn, faq.FindProperty("Question")!, faqsTableMapping);

            var folder = FindEntityType("Ogma3.Data.Folders.Folder")!;

            var defaultTableMappings19 = new List<TableMappingBase<ColumnMappingBase>>();
            folder.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings19);
            var ogma3DataFoldersFolderTableBase = new TableBase("Ogma3.Data.Folders.Folder", null, relationalModel);
            var accessLevelColumnBase = new ColumnBase<ColumnMappingBase>("AccessLevel", "e_club_member_roles", ogma3DataFoldersFolderTableBase);
            ogma3DataFoldersFolderTableBase.Columns.Add("AccessLevel", accessLevelColumnBase);
            var clubIdColumnBase2 = new ColumnBase<ColumnMappingBase>("ClubId", "bigint", ogma3DataFoldersFolderTableBase);
            ogma3DataFoldersFolderTableBase.Columns.Add("ClubId", clubIdColumnBase2);
            var descriptionColumnBase1 = new ColumnBase<ColumnMappingBase>("Description", "character varying(500)", ogma3DataFoldersFolderTableBase)
            {
                IsNullable = true
            };
            ogma3DataFoldersFolderTableBase.Columns.Add("Description", descriptionColumnBase1);
            var idColumnBase12 = new ColumnBase<ColumnMappingBase>("Id", "bigint", ogma3DataFoldersFolderTableBase);
            ogma3DataFoldersFolderTableBase.Columns.Add("Id", idColumnBase12);
            var nameColumnBase1 = new ColumnBase<ColumnMappingBase>("Name", "character varying(20)", ogma3DataFoldersFolderTableBase);
            ogma3DataFoldersFolderTableBase.Columns.Add("Name", nameColumnBase1);
            var parentFolderIdColumnBase = new ColumnBase<ColumnMappingBase>("ParentFolderId", "bigint", ogma3DataFoldersFolderTableBase)
            {
                IsNullable = true
            };
            ogma3DataFoldersFolderTableBase.Columns.Add("ParentFolderId", parentFolderIdColumnBase);
            var slugColumnBase3 = new ColumnBase<ColumnMappingBase>("Slug", "character varying(20)", ogma3DataFoldersFolderTableBase);
            ogma3DataFoldersFolderTableBase.Columns.Add("Slug", slugColumnBase3);
            var storiesCountColumnBase = new ColumnBase<ColumnMappingBase>("StoriesCount", "integer", ogma3DataFoldersFolderTableBase);
            ogma3DataFoldersFolderTableBase.Columns.Add("StoriesCount", storiesCountColumnBase);
            relationalModel.DefaultTables.Add("Ogma3.Data.Folders.Folder", ogma3DataFoldersFolderTableBase);
            var ogma3DataFoldersFolderMappingBase = new TableMappingBase<ColumnMappingBase>(folder, ogma3DataFoldersFolderTableBase, true);
            ogma3DataFoldersFolderTableBase.AddTypeMapping(ogma3DataFoldersFolderMappingBase, false);
            defaultTableMappings19.Add(ogma3DataFoldersFolderMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase12, folder.FindProperty("Id")!, ogma3DataFoldersFolderMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)accessLevelColumnBase, folder.FindProperty("AccessLevel")!, ogma3DataFoldersFolderMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)clubIdColumnBase2, folder.FindProperty("ClubId")!, ogma3DataFoldersFolderMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)descriptionColumnBase1, folder.FindProperty("Description")!, ogma3DataFoldersFolderMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase1, folder.FindProperty("Name")!, ogma3DataFoldersFolderMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)parentFolderIdColumnBase, folder.FindProperty("ParentFolderId")!, ogma3DataFoldersFolderMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)slugColumnBase3, folder.FindProperty("Slug")!, ogma3DataFoldersFolderMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)storiesCountColumnBase, folder.FindProperty("StoriesCount")!, ogma3DataFoldersFolderMappingBase);

            var tableMappings19 = new List<TableMapping>();
            folder.SetRuntimeAnnotation("Relational:TableMappings", tableMappings19);
            var foldersTable = new Table("Folders", null, relationalModel);
            var idColumn12 = new Column("Id", "bigint", foldersTable);
            foldersTable.Columns.Add("Id", idColumn12);
            idColumn12.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            var accessLevelColumn = new Column("AccessLevel", "e_club_member_roles", foldersTable);
            foldersTable.Columns.Add("AccessLevel", accessLevelColumn);
            var clubIdColumn2 = new Column("ClubId", "bigint", foldersTable);
            foldersTable.Columns.Add("ClubId", clubIdColumn2);
            var descriptionColumn1 = new Column("Description", "character varying(500)", foldersTable)
            {
                IsNullable = true
            };
            foldersTable.Columns.Add("Description", descriptionColumn1);
            var nameColumn1 = new Column("Name", "character varying(20)", foldersTable);
            foldersTable.Columns.Add("Name", nameColumn1);
            var parentFolderIdColumn = new Column("ParentFolderId", "bigint", foldersTable)
            {
                IsNullable = true
            };
            foldersTable.Columns.Add("ParentFolderId", parentFolderIdColumn);
            var slugColumn3 = new Column("Slug", "character varying(20)", foldersTable);
            foldersTable.Columns.Add("Slug", slugColumn3);
            var storiesCountColumn = new Column("StoriesCount", "integer", foldersTable);
            foldersTable.Columns.Add("StoriesCount", storiesCountColumn);
            var pK_Folders = new UniqueConstraint("PK_Folders", foldersTable, new[] { idColumn12 });
            foldersTable.PrimaryKey = pK_Folders;
            var pK_FoldersUc = RelationalModel.GetKey(this,
                "Ogma3.Data.Folders.Folder",
                new[] { "Id" });
            pK_Folders.MappedKeys.Add(pK_FoldersUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_FoldersUc).Add(pK_Folders);
            foldersTable.UniqueConstraints.Add("PK_Folders", pK_Folders);
            var iX_Folders_ClubId = new TableIndex(
            "IX_Folders_ClubId", foldersTable, new[] { clubIdColumn2 }, false);
            var iX_Folders_ClubIdIx = RelationalModel.GetIndex(this,
                "Ogma3.Data.Folders.Folder",
                new[] { "ClubId" });
            iX_Folders_ClubId.MappedIndexes.Add(iX_Folders_ClubIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Folders_ClubIdIx).Add(iX_Folders_ClubId);
            foldersTable.Indexes.Add("IX_Folders_ClubId", iX_Folders_ClubId);
            var iX_Folders_ParentFolderId = new TableIndex(
            "IX_Folders_ParentFolderId", foldersTable, new[] { parentFolderIdColumn }, false);
            var iX_Folders_ParentFolderIdIx = RelationalModel.GetIndex(this,
                "Ogma3.Data.Folders.Folder",
                new[] { "ParentFolderId" });
            iX_Folders_ParentFolderId.MappedIndexes.Add(iX_Folders_ParentFolderIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Folders_ParentFolderIdIx).Add(iX_Folders_ParentFolderId);
            foldersTable.Indexes.Add("IX_Folders_ParentFolderId", iX_Folders_ParentFolderId);
            relationalModel.Tables.Add(("Folders", null), foldersTable);
            var foldersTableMapping = new TableMapping(folder, foldersTable, true);
            foldersTable.AddTypeMapping(foldersTableMapping, false);
            tableMappings19.Add(foldersTableMapping);
            RelationalModel.CreateColumnMapping(idColumn12, folder.FindProperty("Id")!, foldersTableMapping);
            RelationalModel.CreateColumnMapping(accessLevelColumn, folder.FindProperty("AccessLevel")!, foldersTableMapping);
            RelationalModel.CreateColumnMapping(clubIdColumn2, folder.FindProperty("ClubId")!, foldersTableMapping);
            RelationalModel.CreateColumnMapping(descriptionColumn1, folder.FindProperty("Description")!, foldersTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn1, folder.FindProperty("Name")!, foldersTableMapping);
            RelationalModel.CreateColumnMapping(parentFolderIdColumn, folder.FindProperty("ParentFolderId")!, foldersTableMapping);
            RelationalModel.CreateColumnMapping(slugColumn3, folder.FindProperty("Slug")!, foldersTableMapping);
            RelationalModel.CreateColumnMapping(storiesCountColumn, folder.FindProperty("StoriesCount")!, foldersTableMapping);

            var folderStory = FindEntityType("Ogma3.Data.Folders.FolderStory")!;

            var defaultTableMappings20 = new List<TableMappingBase<ColumnMappingBase>>();
            folderStory.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings20);
            var ogma3DataFoldersFolderStoryTableBase = new TableBase("Ogma3.Data.Folders.FolderStory", null, relationalModel);
            var addedColumnBase = new ColumnBase<ColumnMappingBase>("Added", "timestamp with time zone", ogma3DataFoldersFolderStoryTableBase);
            ogma3DataFoldersFolderStoryTableBase.Columns.Add("Added", addedColumnBase);
            var addedByIdColumnBase = new ColumnBase<ColumnMappingBase>("AddedById", "bigint", ogma3DataFoldersFolderStoryTableBase);
            ogma3DataFoldersFolderStoryTableBase.Columns.Add("AddedById", addedByIdColumnBase);
            var folderIdColumnBase = new ColumnBase<ColumnMappingBase>("FolderId", "bigint", ogma3DataFoldersFolderStoryTableBase);
            ogma3DataFoldersFolderStoryTableBase.Columns.Add("FolderId", folderIdColumnBase);
            var storyIdColumnBase1 = new ColumnBase<ColumnMappingBase>("StoryId", "bigint", ogma3DataFoldersFolderStoryTableBase);
            ogma3DataFoldersFolderStoryTableBase.Columns.Add("StoryId", storyIdColumnBase1);
            relationalModel.DefaultTables.Add("Ogma3.Data.Folders.FolderStory", ogma3DataFoldersFolderStoryTableBase);
            var ogma3DataFoldersFolderStoryMappingBase = new TableMappingBase<ColumnMappingBase>(folderStory, ogma3DataFoldersFolderStoryTableBase, true);
            ogma3DataFoldersFolderStoryTableBase.AddTypeMapping(ogma3DataFoldersFolderStoryMappingBase, false);
            defaultTableMappings20.Add(ogma3DataFoldersFolderStoryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)folderIdColumnBase, folderStory.FindProperty("FolderId")!, ogma3DataFoldersFolderStoryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)storyIdColumnBase1, folderStory.FindProperty("StoryId")!, ogma3DataFoldersFolderStoryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)addedColumnBase, folderStory.FindProperty("Added")!, ogma3DataFoldersFolderStoryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)addedByIdColumnBase, folderStory.FindProperty("AddedById")!, ogma3DataFoldersFolderStoryMappingBase);

            var tableMappings20 = new List<TableMapping>();
            folderStory.SetRuntimeAnnotation("Relational:TableMappings", tableMappings20);
            var folderStoriesTable = new Table("FolderStories", null, relationalModel);
            var folderIdColumn = new Column("FolderId", "bigint", folderStoriesTable);
            folderStoriesTable.Columns.Add("FolderId", folderIdColumn);
            var storyIdColumn1 = new Column("StoryId", "bigint", folderStoriesTable);
            folderStoriesTable.Columns.Add("StoryId", storyIdColumn1);
            var addedColumn = new Column("Added", "timestamp with time zone", folderStoriesTable);
            folderStoriesTable.Columns.Add("Added", addedColumn);
            var addedByIdColumn = new Column("AddedById", "bigint", folderStoriesTable);
            folderStoriesTable.Columns.Add("AddedById", addedByIdColumn);
            var pK_FolderStories = new UniqueConstraint("PK_FolderStories", folderStoriesTable, new[] { folderIdColumn, storyIdColumn1 });
            folderStoriesTable.PrimaryKey = pK_FolderStories;
            var pK_FolderStoriesUc = RelationalModel.GetKey(this,
                "Ogma3.Data.Folders.FolderStory",
                new[] { "FolderId", "StoryId" });
            pK_FolderStories.MappedKeys.Add(pK_FolderStoriesUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_FolderStoriesUc).Add(pK_FolderStories);
            folderStoriesTable.UniqueConstraints.Add("PK_FolderStories", pK_FolderStories);
            var iX_FolderStories_AddedById = new TableIndex(
            "IX_FolderStories_AddedById", folderStoriesTable, new[] { addedByIdColumn }, false);
            var iX_FolderStories_AddedByIdIx = RelationalModel.GetIndex(this,
                "Ogma3.Data.Folders.FolderStory",
                new[] { "AddedById" });
            iX_FolderStories_AddedById.MappedIndexes.Add(iX_FolderStories_AddedByIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_FolderStories_AddedByIdIx).Add(iX_FolderStories_AddedById);
            folderStoriesTable.Indexes.Add("IX_FolderStories_AddedById", iX_FolderStories_AddedById);
            var iX_FolderStories_StoryId = new TableIndex(
            "IX_FolderStories_StoryId", folderStoriesTable, new[] { storyIdColumn1 }, false);
            var iX_FolderStories_StoryIdIx = RelationalModel.GetIndex(this,
                "Ogma3.Data.Folders.FolderStory",
                new[] { "StoryId" });
            iX_FolderStories_StoryId.MappedIndexes.Add(iX_FolderStories_StoryIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_FolderStories_StoryIdIx).Add(iX_FolderStories_StoryId);
            folderStoriesTable.Indexes.Add("IX_FolderStories_StoryId", iX_FolderStories_StoryId);
            relationalModel.Tables.Add(("FolderStories", null), folderStoriesTable);
            var folderStoriesTableMapping = new TableMapping(folderStory, folderStoriesTable, true);
            folderStoriesTable.AddTypeMapping(folderStoriesTableMapping, false);
            tableMappings20.Add(folderStoriesTableMapping);
            RelationalModel.CreateColumnMapping(folderIdColumn, folderStory.FindProperty("FolderId")!, folderStoriesTableMapping);
            RelationalModel.CreateColumnMapping(storyIdColumn1, folderStory.FindProperty("StoryId")!, folderStoriesTableMapping);
            RelationalModel.CreateColumnMapping(addedColumn, folderStory.FindProperty("Added")!, folderStoriesTableMapping);
            RelationalModel.CreateColumnMapping(addedByIdColumn, folderStory.FindProperty("AddedById")!, folderStoriesTableMapping);

            var icon = FindEntityType("Ogma3.Data.Icons.Icon")!;

            var defaultTableMappings21 = new List<TableMappingBase<ColumnMappingBase>>();
            icon.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings21);
            var ogma3DataIconsIconTableBase = new TableBase("Ogma3.Data.Icons.Icon", null, relationalModel);
            var idColumnBase13 = new ColumnBase<ColumnMappingBase>("Id", "bigint", ogma3DataIconsIconTableBase);
            ogma3DataIconsIconTableBase.Columns.Add("Id", idColumnBase13);
            var nameColumnBase2 = new ColumnBase<ColumnMappingBase>("Name", "character varying(32)", ogma3DataIconsIconTableBase);
            ogma3DataIconsIconTableBase.Columns.Add("Name", nameColumnBase2);
            relationalModel.DefaultTables.Add("Ogma3.Data.Icons.Icon", ogma3DataIconsIconTableBase);
            var ogma3DataIconsIconMappingBase = new TableMappingBase<ColumnMappingBase>(icon, ogma3DataIconsIconTableBase, true);
            ogma3DataIconsIconTableBase.AddTypeMapping(ogma3DataIconsIconMappingBase, false);
            defaultTableMappings21.Add(ogma3DataIconsIconMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase13, icon.FindProperty("Id")!, ogma3DataIconsIconMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase2, icon.FindProperty("Name")!, ogma3DataIconsIconMappingBase);

            var tableMappings21 = new List<TableMapping>();
            icon.SetRuntimeAnnotation("Relational:TableMappings", tableMappings21);
            var iconsTable = new Table("Icons", null, relationalModel);
            var idColumn13 = new Column("Id", "bigint", iconsTable);
            iconsTable.Columns.Add("Id", idColumn13);
            idColumn13.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            var nameColumn2 = new Column("Name", "character varying(32)", iconsTable);
            iconsTable.Columns.Add("Name", nameColumn2);
            var pK_Icons = new UniqueConstraint("PK_Icons", iconsTable, new[] { idColumn13 });
            iconsTable.PrimaryKey = pK_Icons;
            var pK_IconsUc = RelationalModel.GetKey(this,
                "Ogma3.Data.Icons.Icon",
                new[] { "Id" });
            pK_Icons.MappedKeys.Add(pK_IconsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_IconsUc).Add(pK_Icons);
            iconsTable.UniqueConstraints.Add("PK_Icons", pK_Icons);
            var iX_Icons_Name = new TableIndex(
            "IX_Icons_Name", iconsTable, new[] { nameColumn2 }, true);
            var iX_Icons_NameIx = RelationalModel.GetIndex(this,
                "Ogma3.Data.Icons.Icon",
                new[] { "Name" });
            iX_Icons_Name.MappedIndexes.Add(iX_Icons_NameIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Icons_NameIx).Add(iX_Icons_Name);
            iconsTable.Indexes.Add("IX_Icons_Name", iX_Icons_Name);
            relationalModel.Tables.Add(("Icons", null), iconsTable);
            var iconsTableMapping = new TableMapping(icon, iconsTable, true);
            iconsTable.AddTypeMapping(iconsTableMapping, false);
            tableMappings21.Add(iconsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn13, icon.FindProperty("Id")!, iconsTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn2, icon.FindProperty("Name")!, iconsTableMapping);

            var infraction = FindEntityType("Ogma3.Data.Infractions.Infraction")!;

            var defaultTableMappings22 = new List<TableMappingBase<ColumnMappingBase>>();
            infraction.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings22);
            var ogma3DataInfractionsInfractionTableBase = new TableBase("Ogma3.Data.Infractions.Infraction", null, relationalModel);
            var activeUntilColumnBase = new ColumnBase<ColumnMappingBase>("ActiveUntil", "timestamp with time zone", ogma3DataInfractionsInfractionTableBase);
            ogma3DataInfractionsInfractionTableBase.Columns.Add("ActiveUntil", activeUntilColumnBase);
            var idColumnBase14 = new ColumnBase<ColumnMappingBase>("Id", "bigint", ogma3DataInfractionsInfractionTableBase);
            ogma3DataInfractionsInfractionTableBase.Columns.Add("Id", idColumnBase14);
            var issueDateColumnBase = new ColumnBase<ColumnMappingBase>("IssueDate", "timestamp with time zone", ogma3DataInfractionsInfractionTableBase);
            ogma3DataInfractionsInfractionTableBase.Columns.Add("IssueDate", issueDateColumnBase);
            var issuedByIdColumnBase = new ColumnBase<ColumnMappingBase>("IssuedById", "bigint", ogma3DataInfractionsInfractionTableBase);
            ogma3DataInfractionsInfractionTableBase.Columns.Add("IssuedById", issuedByIdColumnBase);
            var reasonColumnBase0 = new ColumnBase<ColumnMappingBase>("Reason", "character varying(1000)", ogma3DataInfractionsInfractionTableBase);
            ogma3DataInfractionsInfractionTableBase.Columns.Add("Reason", reasonColumnBase0);
            var removedAtColumnBase = new ColumnBase<ColumnMappingBase>("RemovedAt", "timestamp with time zone", ogma3DataInfractionsInfractionTableBase)
            {
                IsNullable = true
            };
            ogma3DataInfractionsInfractionTableBase.Columns.Add("RemovedAt", removedAtColumnBase);
            var removedByIdColumnBase = new ColumnBase<ColumnMappingBase>("RemovedById", "bigint", ogma3DataInfractionsInfractionTableBase)
            {
                IsNullable = true
            };
            ogma3DataInfractionsInfractionTableBase.Columns.Add("RemovedById", removedByIdColumnBase);
            var typeColumnBase0 = new ColumnBase<ColumnMappingBase>("Type", "infraction_type", ogma3DataInfractionsInfractionTableBase);
            ogma3DataInfractionsInfractionTableBase.Columns.Add("Type", typeColumnBase0);
            var userIdColumnBase6 = new ColumnBase<ColumnMappingBase>("UserId", "bigint", ogma3DataInfractionsInfractionTableBase);
            ogma3DataInfractionsInfractionTableBase.Columns.Add("UserId", userIdColumnBase6);
            relationalModel.DefaultTables.Add("Ogma3.Data.Infractions.Infraction", ogma3DataInfractionsInfractionTableBase);
            var ogma3DataInfractionsInfractionMappingBase = new TableMappingBase<ColumnMappingBase>(infraction, ogma3DataInfractionsInfractionTableBase, true);
            ogma3DataInfractionsInfractionTableBase.AddTypeMapping(ogma3DataInfractionsInfractionMappingBase, false);
            defaultTableMappings22.Add(ogma3DataInfractionsInfractionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase14, infraction.FindProperty("Id")!, ogma3DataInfractionsInfractionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)activeUntilColumnBase, infraction.FindProperty("ActiveUntil")!, ogma3DataInfractionsInfractionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)issueDateColumnBase, infraction.FindProperty("IssueDate")!, ogma3DataInfractionsInfractionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)issuedByIdColumnBase, infraction.FindProperty("IssuedById")!, ogma3DataInfractionsInfractionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)reasonColumnBase0, infraction.FindProperty("Reason")!, ogma3DataInfractionsInfractionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)removedAtColumnBase, infraction.FindProperty("RemovedAt")!, ogma3DataInfractionsInfractionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)removedByIdColumnBase, infraction.FindProperty("RemovedById")!, ogma3DataInfractionsInfractionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)typeColumnBase0, infraction.FindProperty("Type")!, ogma3DataInfractionsInfractionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)userIdColumnBase6, infraction.FindProperty("UserId")!, ogma3DataInfractionsInfractionMappingBase);

            var tableMappings22 = new List<TableMapping>();
            infraction.SetRuntimeAnnotation("Relational:TableMappings", tableMappings22);
            var infractionsTable = new Table("Infractions", null, relationalModel);
            var idColumn14 = new Column("Id", "bigint", infractionsTable);
            infractionsTable.Columns.Add("Id", idColumn14);
            idColumn14.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            var activeUntilColumn = new Column("ActiveUntil", "timestamp with time zone", infractionsTable);
            infractionsTable.Columns.Add("ActiveUntil", activeUntilColumn);
            var issueDateColumn = new Column("IssueDate", "timestamp with time zone", infractionsTable);
            infractionsTable.Columns.Add("IssueDate", issueDateColumn);
            var issuedByIdColumn = new Column("IssuedById", "bigint", infractionsTable);
            infractionsTable.Columns.Add("IssuedById", issuedByIdColumn);
            var reasonColumn0 = new Column("Reason", "character varying(1000)", infractionsTable);
            infractionsTable.Columns.Add("Reason", reasonColumn0);
            var removedAtColumn = new Column("RemovedAt", "timestamp with time zone", infractionsTable)
            {
                IsNullable = true
            };
            infractionsTable.Columns.Add("RemovedAt", removedAtColumn);
            var removedByIdColumn = new Column("RemovedById", "bigint", infractionsTable)
            {
                IsNullable = true
            };
            infractionsTable.Columns.Add("RemovedById", removedByIdColumn);
            var typeColumn0 = new Column("Type", "infraction_type", infractionsTable);
            infractionsTable.Columns.Add("Type", typeColumn0);
            var userIdColumn6 = new Column("UserId", "bigint", infractionsTable);
            infractionsTable.Columns.Add("UserId", userIdColumn6);
            var pK_Infractions = new UniqueConstraint("PK_Infractions", infractionsTable, new[] { idColumn14 });
            infractionsTable.PrimaryKey = pK_Infractions;
            var pK_InfractionsUc = RelationalModel.GetKey(this,
                "Ogma3.Data.Infractions.Infraction",
                new[] { "Id" });
            pK_Infractions.MappedKeys.Add(pK_InfractionsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_InfractionsUc).Add(pK_Infractions);
            infractionsTable.UniqueConstraints.Add("PK_Infractions", pK_Infractions);
            var iX_Infractions_IssuedById = new TableIndex(
            "IX_Infractions_IssuedById", infractionsTable, new[] { issuedByIdColumn }, false);
            var iX_Infractions_IssuedByIdIx = RelationalModel.GetIndex(this,
                "Ogma3.Data.Infractions.Infraction",
                new[] { "IssuedById" });
            iX_Infractions_IssuedById.MappedIndexes.Add(iX_Infractions_IssuedByIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Infractions_IssuedByIdIx).Add(iX_Infractions_IssuedById);
            infractionsTable.Indexes.Add("IX_Infractions_IssuedById", iX_Infractions_IssuedById);
            var iX_Infractions_RemovedAt = new TableIndex(
            "IX_Infractions_RemovedAt", infractionsTable, new[] { removedAtColumn }, false);
            var iX_Infractions_RemovedAtIx = RelationalModel.GetIndex(this,
                "Ogma3.Data.Infractions.Infraction",
                new[] { "RemovedAt" });
            iX_Infractions_RemovedAt.MappedIndexes.Add(iX_Infractions_RemovedAtIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Infractions_RemovedAtIx).Add(iX_Infractions_RemovedAt);
            infractionsTable.Indexes.Add("IX_Infractions_RemovedAt", iX_Infractions_RemovedAt);
            var iX_Infractions_RemovedById = new TableIndex(
            "IX_Infractions_RemovedById", infractionsTable, new[] { removedByIdColumn }, false);
            var iX_Infractions_RemovedByIdIx = RelationalModel.GetIndex(this,
                "Ogma3.Data.Infractions.Infraction",
                new[] { "RemovedById" });
            iX_Infractions_RemovedById.MappedIndexes.Add(iX_Infractions_RemovedByIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Infractions_RemovedByIdIx).Add(iX_Infractions_RemovedById);
            infractionsTable.Indexes.Add("IX_Infractions_RemovedById", iX_Infractions_RemovedById);
            var iX_Infractions_Type = new TableIndex(
            "IX_Infractions_Type", infractionsTable, new[] { typeColumn0 }, false);
            var iX_Infractions_TypeIx = RelationalModel.GetIndex(this,
                "Ogma3.Data.Infractions.Infraction",
                new[] { "Type" });
            iX_Infractions_Type.MappedIndexes.Add(iX_Infractions_TypeIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Infractions_TypeIx).Add(iX_Infractions_Type);
            infractionsTable.Indexes.Add("IX_Infractions_Type", iX_Infractions_Type);
            var iX_Infractions_UserId = new TableIndex(
            "IX_Infractions_UserId", infractionsTable, new[] { userIdColumn6 }, false);
            var iX_Infractions_UserIdIx = RelationalModel.GetIndex(this,
                "Ogma3.Data.Infractions.Infraction",
                new[] { "UserId" });
            iX_Infractions_UserId.MappedIndexes.Add(iX_Infractions_UserIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Infractions_UserIdIx).Add(iX_Infractions_UserId);
            infractionsTable.Indexes.Add("IX_Infractions_UserId", iX_Infractions_UserId);
            relationalModel.Tables.Add(("Infractions", null), infractionsTable);
            var infractionsTableMapping = new TableMapping(infraction, infractionsTable, true);
            infractionsTable.AddTypeMapping(infractionsTableMapping, false);
            tableMappings22.Add(infractionsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn14, infraction.FindProperty("Id")!, infractionsTableMapping);
            RelationalModel.CreateColumnMapping(activeUntilColumn, infraction.FindProperty("ActiveUntil")!, infractionsTableMapping);
            RelationalModel.CreateColumnMapping(issueDateColumn, infraction.FindProperty("IssueDate")!, infractionsTableMapping);
            RelationalModel.CreateColumnMapping(issuedByIdColumn, infraction.FindProperty("IssuedById")!, infractionsTableMapping);
            RelationalModel.CreateColumnMapping(reasonColumn0, infraction.FindProperty("Reason")!, infractionsTableMapping);
            RelationalModel.CreateColumnMapping(removedAtColumn, infraction.FindProperty("RemovedAt")!, infractionsTableMapping);
            RelationalModel.CreateColumnMapping(removedByIdColumn, infraction.FindProperty("RemovedById")!, infractionsTableMapping);
            RelationalModel.CreateColumnMapping(typeColumn0, infraction.FindProperty("Type")!, infractionsTableMapping);
            RelationalModel.CreateColumnMapping(userIdColumn6, infraction.FindProperty("UserId")!, infractionsTableMapping);

            var inviteCode = FindEntityType("Ogma3.Data.InviteCodes.InviteCode")!;

            var defaultTableMappings23 = new List<TableMappingBase<ColumnMappingBase>>();
            inviteCode.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings23);
            var ogma3DataInviteCodesInviteCodeTableBase = new TableBase("Ogma3.Data.InviteCodes.InviteCode", null, relationalModel);
            var codeColumnBase = new ColumnBase<ColumnMappingBase>("Code", "text", ogma3DataInviteCodesInviteCodeTableBase);
            ogma3DataInviteCodesInviteCodeTableBase.Columns.Add("Code", codeColumnBase);
            var idColumnBase15 = new ColumnBase<ColumnMappingBase>("Id", "bigint", ogma3DataInviteCodesInviteCodeTableBase);
            ogma3DataInviteCodesInviteCodeTableBase.Columns.Add("Id", idColumnBase15);
            var issueDateColumnBase0 = new ColumnBase<ColumnMappingBase>("IssueDate", "timestamp with time zone", ogma3DataInviteCodesInviteCodeTableBase);
            ogma3DataInviteCodesInviteCodeTableBase.Columns.Add("IssueDate", issueDateColumnBase0);
            var issuedByIdColumnBase0 = new ColumnBase<ColumnMappingBase>("IssuedById", "bigint", ogma3DataInviteCodesInviteCodeTableBase);
            ogma3DataInviteCodesInviteCodeTableBase.Columns.Add("IssuedById", issuedByIdColumnBase0);
            var normalizedCodeColumnBase = new ColumnBase<ColumnMappingBase>("NormalizedCode", "text", ogma3DataInviteCodesInviteCodeTableBase);
            ogma3DataInviteCodesInviteCodeTableBase.Columns.Add("NormalizedCode", normalizedCodeColumnBase);
            var usedByIdColumnBase = new ColumnBase<ColumnMappingBase>("UsedById", "bigint", ogma3DataInviteCodesInviteCodeTableBase)
            {
                IsNullable = true
            };
            ogma3DataInviteCodesInviteCodeTableBase.Columns.Add("UsedById", usedByIdColumnBase);
            var usedDateColumnBase = new ColumnBase<ColumnMappingBase>("UsedDate", "timestamp with time zone", ogma3DataInviteCodesInviteCodeTableBase)
            {
                IsNullable = true
            };
            ogma3DataInviteCodesInviteCodeTableBase.Columns.Add("UsedDate", usedDateColumnBase);
            relationalModel.DefaultTables.Add("Ogma3.Data.InviteCodes.InviteCode", ogma3DataInviteCodesInviteCodeTableBase);
            var ogma3DataInviteCodesInviteCodeMappingBase = new TableMappingBase<ColumnMappingBase>(inviteCode, ogma3DataInviteCodesInviteCodeTableBase, true);
            ogma3DataInviteCodesInviteCodeTableBase.AddTypeMapping(ogma3DataInviteCodesInviteCodeMappingBase, false);
            defaultTableMappings23.Add(ogma3DataInviteCodesInviteCodeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase15, inviteCode.FindProperty("Id")!, ogma3DataInviteCodesInviteCodeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)codeColumnBase, inviteCode.FindProperty("Code")!, ogma3DataInviteCodesInviteCodeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)issueDateColumnBase0, inviteCode.FindProperty("IssueDate")!, ogma3DataInviteCodesInviteCodeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)issuedByIdColumnBase0, inviteCode.FindProperty("IssuedById")!, ogma3DataInviteCodesInviteCodeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)normalizedCodeColumnBase, inviteCode.FindProperty("NormalizedCode")!, ogma3DataInviteCodesInviteCodeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)usedByIdColumnBase, inviteCode.FindProperty("UsedById")!, ogma3DataInviteCodesInviteCodeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)usedDateColumnBase, inviteCode.FindProperty("UsedDate")!, ogma3DataInviteCodesInviteCodeMappingBase);

            var tableMappings23 = new List<TableMapping>();
            inviteCode.SetRuntimeAnnotation("Relational:TableMappings", tableMappings23);
            var inviteCodesTable = new Table("InviteCodes", null, relationalModel);
            var idColumn15 = new Column("Id", "bigint", inviteCodesTable);
            inviteCodesTable.Columns.Add("Id", idColumn15);
            idColumn15.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            var codeColumn = new Column("Code", "text", inviteCodesTable);
            inviteCodesTable.Columns.Add("Code", codeColumn);
            var issueDateColumn0 = new Column("IssueDate", "timestamp with time zone", inviteCodesTable);
            inviteCodesTable.Columns.Add("IssueDate", issueDateColumn0);
            var issuedByIdColumn0 = new Column("IssuedById", "bigint", inviteCodesTable);
            inviteCodesTable.Columns.Add("IssuedById", issuedByIdColumn0);
            var normalizedCodeColumn = new Column("NormalizedCode", "text", inviteCodesTable);
            inviteCodesTable.Columns.Add("NormalizedCode", normalizedCodeColumn);
            var usedByIdColumn = new Column("UsedById", "bigint", inviteCodesTable)
            {
                IsNullable = true
            };
            inviteCodesTable.Columns.Add("UsedById", usedByIdColumn);
            var usedDateColumn = new Column("UsedDate", "timestamp with time zone", inviteCodesTable)
            {
                IsNullable = true
            };
            inviteCodesTable.Columns.Add("UsedDate", usedDateColumn);
            var pK_InviteCodes = new UniqueConstraint("PK_InviteCodes", inviteCodesTable, new[] { idColumn15 });
            inviteCodesTable.PrimaryKey = pK_InviteCodes;
            var pK_InviteCodesUc = RelationalModel.GetKey(this,
                "Ogma3.Data.InviteCodes.InviteCode",
                new[] { "Id" });
            pK_InviteCodes.MappedKeys.Add(pK_InviteCodesUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_InviteCodesUc).Add(pK_InviteCodes);
            inviteCodesTable.UniqueConstraints.Add("PK_InviteCodes", pK_InviteCodes);
            var iX_InviteCodes_IssuedById = new TableIndex(
            "IX_InviteCodes_IssuedById", inviteCodesTable, new[] { issuedByIdColumn0 }, false);
            var iX_InviteCodes_IssuedByIdIx = RelationalModel.GetIndex(this,
                "Ogma3.Data.InviteCodes.InviteCode",
                new[] { "IssuedById" });
            iX_InviteCodes_IssuedById.MappedIndexes.Add(iX_InviteCodes_IssuedByIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_InviteCodes_IssuedByIdIx).Add(iX_InviteCodes_IssuedById);
            inviteCodesTable.Indexes.Add("IX_InviteCodes_IssuedById", iX_InviteCodes_IssuedById);
            var iX_InviteCodes_UsedById = new TableIndex(
            "IX_InviteCodes_UsedById", inviteCodesTable, new[] { usedByIdColumn }, true);
            var iX_InviteCodes_UsedByIdIx = RelationalModel.GetIndex(this,
                "Ogma3.Data.InviteCodes.InviteCode",
                new[] { "UsedById" });
            iX_InviteCodes_UsedById.MappedIndexes.Add(iX_InviteCodes_UsedByIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_InviteCodes_UsedByIdIx).Add(iX_InviteCodes_UsedById);
            inviteCodesTable.Indexes.Add("IX_InviteCodes_UsedById", iX_InviteCodes_UsedById);
            relationalModel.Tables.Add(("InviteCodes", null), inviteCodesTable);
            var inviteCodesTableMapping = new TableMapping(inviteCode, inviteCodesTable, true);
            inviteCodesTable.AddTypeMapping(inviteCodesTableMapping, false);
            tableMappings23.Add(inviteCodesTableMapping);
            RelationalModel.CreateColumnMapping(idColumn15, inviteCode.FindProperty("Id")!, inviteCodesTableMapping);
            RelationalModel.CreateColumnMapping(codeColumn, inviteCode.FindProperty("Code")!, inviteCodesTableMapping);
            RelationalModel.CreateColumnMapping(issueDateColumn0, inviteCode.FindProperty("IssueDate")!, inviteCodesTableMapping);
            RelationalModel.CreateColumnMapping(issuedByIdColumn0, inviteCode.FindProperty("IssuedById")!, inviteCodesTableMapping);
            RelationalModel.CreateColumnMapping(normalizedCodeColumn, inviteCode.FindProperty("NormalizedCode")!, inviteCodesTableMapping);
            RelationalModel.CreateColumnMapping(usedByIdColumn, inviteCode.FindProperty("UsedById")!, inviteCodesTableMapping);
            RelationalModel.CreateColumnMapping(usedDateColumn, inviteCode.FindProperty("UsedDate")!, inviteCodesTableMapping);

            var moderatorAction = FindEntityType("Ogma3.Data.ModeratorActions.ModeratorAction")!;

            var defaultTableMappings24 = new List<TableMappingBase<ColumnMappingBase>>();
            moderatorAction.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings24);
            var ogma3DataModeratorActionsModeratorActionTableBase = new TableBase("Ogma3.Data.ModeratorActions.ModeratorAction", null, relationalModel);
            var dateTimeColumnBase1 = new ColumnBase<ColumnMappingBase>("DateTime", "timestamp with time zone", ogma3DataModeratorActionsModeratorActionTableBase);
            ogma3DataModeratorActionsModeratorActionTableBase.Columns.Add("DateTime", dateTimeColumnBase1);
            var descriptionColumnBase2 = new ColumnBase<ColumnMappingBase>("Description", "text", ogma3DataModeratorActionsModeratorActionTableBase);
            ogma3DataModeratorActionsModeratorActionTableBase.Columns.Add("Description", descriptionColumnBase2);
            var idColumnBase16 = new ColumnBase<ColumnMappingBase>("Id", "bigint", ogma3DataModeratorActionsModeratorActionTableBase);
            ogma3DataModeratorActionsModeratorActionTableBase.Columns.Add("Id", idColumnBase16);
            var staffMemberIdColumnBase = new ColumnBase<ColumnMappingBase>("StaffMemberId", "bigint", ogma3DataModeratorActionsModeratorActionTableBase);
            ogma3DataModeratorActionsModeratorActionTableBase.Columns.Add("StaffMemberId", staffMemberIdColumnBase);
            relationalModel.DefaultTables.Add("Ogma3.Data.ModeratorActions.ModeratorAction", ogma3DataModeratorActionsModeratorActionTableBase);
            var ogma3DataModeratorActionsModeratorActionMappingBase = new TableMappingBase<ColumnMappingBase>(moderatorAction, ogma3DataModeratorActionsModeratorActionTableBase, true);
            ogma3DataModeratorActionsModeratorActionTableBase.AddTypeMapping(ogma3DataModeratorActionsModeratorActionMappingBase, false);
            defaultTableMappings24.Add(ogma3DataModeratorActionsModeratorActionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase16, moderatorAction.FindProperty("Id")!, ogma3DataModeratorActionsModeratorActionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)dateTimeColumnBase1, moderatorAction.FindProperty("DateTime")!, ogma3DataModeratorActionsModeratorActionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)descriptionColumnBase2, moderatorAction.FindProperty("Description")!, ogma3DataModeratorActionsModeratorActionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)staffMemberIdColumnBase, moderatorAction.FindProperty("StaffMemberId")!, ogma3DataModeratorActionsModeratorActionMappingBase);

            var tableMappings24 = new List<TableMapping>();
            moderatorAction.SetRuntimeAnnotation("Relational:TableMappings", tableMappings24);
            var moderatorActionsTable = new Table("ModeratorActions", null, relationalModel);
            var idColumn16 = new Column("Id", "bigint", moderatorActionsTable);
            moderatorActionsTable.Columns.Add("Id", idColumn16);
            idColumn16.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            var dateTimeColumn1 = new Column("DateTime", "timestamp with time zone", moderatorActionsTable);
            moderatorActionsTable.Columns.Add("DateTime", dateTimeColumn1);
            var descriptionColumn2 = new Column("Description", "text", moderatorActionsTable);
            moderatorActionsTable.Columns.Add("Description", descriptionColumn2);
            var staffMemberIdColumn = new Column("StaffMemberId", "bigint", moderatorActionsTable);
            moderatorActionsTable.Columns.Add("StaffMemberId", staffMemberIdColumn);
            var pK_ModeratorActions = new UniqueConstraint("PK_ModeratorActions", moderatorActionsTable, new[] { idColumn16 });
            moderatorActionsTable.PrimaryKey = pK_ModeratorActions;
            var pK_ModeratorActionsUc = RelationalModel.GetKey(this,
                "Ogma3.Data.ModeratorActions.ModeratorAction",
                new[] { "Id" });
            pK_ModeratorActions.MappedKeys.Add(pK_ModeratorActionsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_ModeratorActionsUc).Add(pK_ModeratorActions);
            moderatorActionsTable.UniqueConstraints.Add("PK_ModeratorActions", pK_ModeratorActions);
            var iX_ModeratorActions_StaffMemberId = new TableIndex(
            "IX_ModeratorActions_StaffMemberId", moderatorActionsTable, new[] { staffMemberIdColumn }, false);
            var iX_ModeratorActions_StaffMemberIdIx = RelationalModel.GetIndex(this,
                "Ogma3.Data.ModeratorActions.ModeratorAction",
                new[] { "StaffMemberId" });
            iX_ModeratorActions_StaffMemberId.MappedIndexes.Add(iX_ModeratorActions_StaffMemberIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_ModeratorActions_StaffMemberIdIx).Add(iX_ModeratorActions_StaffMemberId);
            moderatorActionsTable.Indexes.Add("IX_ModeratorActions_StaffMemberId", iX_ModeratorActions_StaffMemberId);
            relationalModel.Tables.Add(("ModeratorActions", null), moderatorActionsTable);
            var moderatorActionsTableMapping = new TableMapping(moderatorAction, moderatorActionsTable, true);
            moderatorActionsTable.AddTypeMapping(moderatorActionsTableMapping, false);
            tableMappings24.Add(moderatorActionsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn16, moderatorAction.FindProperty("Id")!, moderatorActionsTableMapping);
            RelationalModel.CreateColumnMapping(dateTimeColumn1, moderatorAction.FindProperty("DateTime")!, moderatorActionsTableMapping);
            RelationalModel.CreateColumnMapping(descriptionColumn2, moderatorAction.FindProperty("Description")!, moderatorActionsTableMapping);
            RelationalModel.CreateColumnMapping(staffMemberIdColumn, moderatorAction.FindProperty("StaffMemberId")!, moderatorActionsTableMapping);

            var notification = FindEntityType("Ogma3.Data.Notifications.Notification")!;

            var defaultTableMappings25 = new List<TableMappingBase<ColumnMappingBase>>();
            notification.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings25);
            var ogma3DataNotificationsNotificationTableBase = new TableBase("Ogma3.Data.Notifications.Notification", null, relationalModel);
            var bodyColumnBase5 = new ColumnBase<ColumnMappingBase>("Body", "text", ogma3DataNotificationsNotificationTableBase)
            {
                IsNullable = true
            };
            ogma3DataNotificationsNotificationTableBase.Columns.Add("Body", bodyColumnBase5);
            var dateTimeColumnBase2 = new ColumnBase<ColumnMappingBase>("DateTime", "timestamp with time zone", ogma3DataNotificationsNotificationTableBase);
            ogma3DataNotificationsNotificationTableBase.Columns.Add("DateTime", dateTimeColumnBase2);
            var eventColumnBase = new ColumnBase<ColumnMappingBase>("Event", "e_notification_event", ogma3DataNotificationsNotificationTableBase);
            ogma3DataNotificationsNotificationTableBase.Columns.Add("Event", eventColumnBase);
            var idColumnBase17 = new ColumnBase<ColumnMappingBase>("Id", "bigint", ogma3DataNotificationsNotificationTableBase);
            ogma3DataNotificationsNotificationTableBase.Columns.Add("Id", idColumnBase17);
            var urlColumnBase = new ColumnBase<ColumnMappingBase>("Url", "text", ogma3DataNotificationsNotificationTableBase);
            ogma3DataNotificationsNotificationTableBase.Columns.Add("Url", urlColumnBase);
            relationalModel.DefaultTables.Add("Ogma3.Data.Notifications.Notification", ogma3DataNotificationsNotificationTableBase);
            var ogma3DataNotificationsNotificationMappingBase = new TableMappingBase<ColumnMappingBase>(notification, ogma3DataNotificationsNotificationTableBase, true);
            ogma3DataNotificationsNotificationTableBase.AddTypeMapping(ogma3DataNotificationsNotificationMappingBase, false);
            defaultTableMappings25.Add(ogma3DataNotificationsNotificationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase17, notification.FindProperty("Id")!, ogma3DataNotificationsNotificationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)bodyColumnBase5, notification.FindProperty("Body")!, ogma3DataNotificationsNotificationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)dateTimeColumnBase2, notification.FindProperty("DateTime")!, ogma3DataNotificationsNotificationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)eventColumnBase, notification.FindProperty("Event")!, ogma3DataNotificationsNotificationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)urlColumnBase, notification.FindProperty("Url")!, ogma3DataNotificationsNotificationMappingBase);

            var tableMappings25 = new List<TableMapping>();
            notification.SetRuntimeAnnotation("Relational:TableMappings", tableMappings25);
            var notificationsTable = new Table("Notifications", null, relationalModel);
            var idColumn17 = new Column("Id", "bigint", notificationsTable);
            notificationsTable.Columns.Add("Id", idColumn17);
            idColumn17.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            var bodyColumn5 = new Column("Body", "text", notificationsTable)
            {
                IsNullable = true
            };
            notificationsTable.Columns.Add("Body", bodyColumn5);
            var dateTimeColumn2 = new Column("DateTime", "timestamp with time zone", notificationsTable);
            notificationsTable.Columns.Add("DateTime", dateTimeColumn2);
            var eventColumn = new Column("Event", "e_notification_event", notificationsTable);
            notificationsTable.Columns.Add("Event", eventColumn);
            var urlColumn = new Column("Url", "text", notificationsTable);
            notificationsTable.Columns.Add("Url", urlColumn);
            var pK_Notifications = new UniqueConstraint("PK_Notifications", notificationsTable, new[] { idColumn17 });
            notificationsTable.PrimaryKey = pK_Notifications;
            var pK_NotificationsUc = RelationalModel.GetKey(this,
                "Ogma3.Data.Notifications.Notification",
                new[] { "Id" });
            pK_Notifications.MappedKeys.Add(pK_NotificationsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_NotificationsUc).Add(pK_Notifications);
            notificationsTable.UniqueConstraints.Add("PK_Notifications", pK_Notifications);
            relationalModel.Tables.Add(("Notifications", null), notificationsTable);
            var notificationsTableMapping = new TableMapping(notification, notificationsTable, true);
            notificationsTable.AddTypeMapping(notificationsTableMapping, false);
            tableMappings25.Add(notificationsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn17, notification.FindProperty("Id")!, notificationsTableMapping);
            RelationalModel.CreateColumnMapping(bodyColumn5, notification.FindProperty("Body")!, notificationsTableMapping);
            RelationalModel.CreateColumnMapping(dateTimeColumn2, notification.FindProperty("DateTime")!, notificationsTableMapping);
            RelationalModel.CreateColumnMapping(eventColumn, notification.FindProperty("Event")!, notificationsTableMapping);
            RelationalModel.CreateColumnMapping(urlColumn, notification.FindProperty("Url")!, notificationsTableMapping);

            var notificationRecipients = FindEntityType("Ogma3.Data.Notifications.NotificationRecipients")!;

            var defaultTableMappings26 = new List<TableMappingBase<ColumnMappingBase>>();
            notificationRecipients.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings26);
            var ogma3DataNotificationsNotificationRecipientsTableBase = new TableBase("Ogma3.Data.Notifications.NotificationRecipients", null, relationalModel);
            var notificationIdColumnBase = new ColumnBase<ColumnMappingBase>("NotificationId", "bigint", ogma3DataNotificationsNotificationRecipientsTableBase);
            ogma3DataNotificationsNotificationRecipientsTableBase.Columns.Add("NotificationId", notificationIdColumnBase);
            var recipientIdColumnBase = new ColumnBase<ColumnMappingBase>("RecipientId", "bigint", ogma3DataNotificationsNotificationRecipientsTableBase);
            ogma3DataNotificationsNotificationRecipientsTableBase.Columns.Add("RecipientId", recipientIdColumnBase);
            relationalModel.DefaultTables.Add("Ogma3.Data.Notifications.NotificationRecipients", ogma3DataNotificationsNotificationRecipientsTableBase);
            var ogma3DataNotificationsNotificationRecipientsMappingBase = new TableMappingBase<ColumnMappingBase>(notificationRecipients, ogma3DataNotificationsNotificationRecipientsTableBase, true);
            ogma3DataNotificationsNotificationRecipientsTableBase.AddTypeMapping(ogma3DataNotificationsNotificationRecipientsMappingBase, false);
            defaultTableMappings26.Add(ogma3DataNotificationsNotificationRecipientsMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)notificationIdColumnBase, notificationRecipients.FindProperty("NotificationId")!, ogma3DataNotificationsNotificationRecipientsMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)recipientIdColumnBase, notificationRecipients.FindProperty("RecipientId")!, ogma3DataNotificationsNotificationRecipientsMappingBase);

            var tableMappings26 = new List<TableMapping>();
            notificationRecipients.SetRuntimeAnnotation("Relational:TableMappings", tableMappings26);
            var notificationRecipientsTable = new Table("NotificationRecipients", null, relationalModel);
            var notificationIdColumn = new Column("NotificationId", "bigint", notificationRecipientsTable);
            notificationRecipientsTable.Columns.Add("NotificationId", notificationIdColumn);
            var recipientIdColumn = new Column("RecipientId", "bigint", notificationRecipientsTable);
            notificationRecipientsTable.Columns.Add("RecipientId", recipientIdColumn);
            var pK_NotificationRecipients = new UniqueConstraint("PK_NotificationRecipients", notificationRecipientsTable, new[] { notificationIdColumn, recipientIdColumn });
            notificationRecipientsTable.PrimaryKey = pK_NotificationRecipients;
            var pK_NotificationRecipientsUc = RelationalModel.GetKey(this,
                "Ogma3.Data.Notifications.NotificationRecipients",
                new[] { "NotificationId", "RecipientId" });
            pK_NotificationRecipients.MappedKeys.Add(pK_NotificationRecipientsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_NotificationRecipientsUc).Add(pK_NotificationRecipients);
            notificationRecipientsTable.UniqueConstraints.Add("PK_NotificationRecipients", pK_NotificationRecipients);
            var iX_NotificationRecipients_RecipientId = new TableIndex(
            "IX_NotificationRecipients_RecipientId", notificationRecipientsTable, new[] { recipientIdColumn }, false);
            var iX_NotificationRecipients_RecipientIdIx = RelationalModel.GetIndex(this,
                "Ogma3.Data.Notifications.NotificationRecipients",
                new[] { "RecipientId" });
            iX_NotificationRecipients_RecipientId.MappedIndexes.Add(iX_NotificationRecipients_RecipientIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_NotificationRecipients_RecipientIdIx).Add(iX_NotificationRecipients_RecipientId);
            notificationRecipientsTable.Indexes.Add("IX_NotificationRecipients_RecipientId", iX_NotificationRecipients_RecipientId);
            relationalModel.Tables.Add(("NotificationRecipients", null), notificationRecipientsTable);
            var notificationRecipientsTableMapping = new TableMapping(notificationRecipients, notificationRecipientsTable, true);
            notificationRecipientsTable.AddTypeMapping(notificationRecipientsTableMapping, false);
            tableMappings26.Add(notificationRecipientsTableMapping);
            RelationalModel.CreateColumnMapping(notificationIdColumn, notificationRecipients.FindProperty("NotificationId")!, notificationRecipientsTableMapping);
            RelationalModel.CreateColumnMapping(recipientIdColumn, notificationRecipients.FindProperty("RecipientId")!, notificationRecipientsTableMapping);

            var quote = FindEntityType("Ogma3.Data.Quotes.Quote")!;

            var defaultTableMappings27 = new List<TableMappingBase<ColumnMappingBase>>();
            quote.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings27);
            var ogma3DataQuotesQuoteTableBase = new TableBase("Ogma3.Data.Quotes.Quote", null, relationalModel);
            var authorColumnBase = new ColumnBase<ColumnMappingBase>("Author", "text", ogma3DataQuotesQuoteTableBase);
            ogma3DataQuotesQuoteTableBase.Columns.Add("Author", authorColumnBase);
            var bodyColumnBase6 = new ColumnBase<ColumnMappingBase>("Body", "text", ogma3DataQuotesQuoteTableBase);
            ogma3DataQuotesQuoteTableBase.Columns.Add("Body", bodyColumnBase6);
            var idColumnBase18 = new ColumnBase<ColumnMappingBase>("Id", "bigint", ogma3DataQuotesQuoteTableBase);
            ogma3DataQuotesQuoteTableBase.Columns.Add("Id", idColumnBase18);
            relationalModel.DefaultTables.Add("Ogma3.Data.Quotes.Quote", ogma3DataQuotesQuoteTableBase);
            var ogma3DataQuotesQuoteMappingBase = new TableMappingBase<ColumnMappingBase>(quote, ogma3DataQuotesQuoteTableBase, true);
            ogma3DataQuotesQuoteTableBase.AddTypeMapping(ogma3DataQuotesQuoteMappingBase, false);
            defaultTableMappings27.Add(ogma3DataQuotesQuoteMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase18, quote.FindProperty("Id")!, ogma3DataQuotesQuoteMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)authorColumnBase, quote.FindProperty("Author")!, ogma3DataQuotesQuoteMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)bodyColumnBase6, quote.FindProperty("Body")!, ogma3DataQuotesQuoteMappingBase);

            var tableMappings27 = new List<TableMapping>();
            quote.SetRuntimeAnnotation("Relational:TableMappings", tableMappings27);
            var quotesTable = new Table("Quotes", null, relationalModel);
            var idColumn18 = new Column("Id", "bigint", quotesTable);
            quotesTable.Columns.Add("Id", idColumn18);
            idColumn18.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            var authorColumn = new Column("Author", "text", quotesTable);
            quotesTable.Columns.Add("Author", authorColumn);
            var bodyColumn6 = new Column("Body", "text", quotesTable);
            quotesTable.Columns.Add("Body", bodyColumn6);
            var pK_Quotes = new UniqueConstraint("PK_Quotes", quotesTable, new[] { idColumn18 });
            quotesTable.PrimaryKey = pK_Quotes;
            var pK_QuotesUc = RelationalModel.GetKey(this,
                "Ogma3.Data.Quotes.Quote",
                new[] { "Id" });
            pK_Quotes.MappedKeys.Add(pK_QuotesUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_QuotesUc).Add(pK_Quotes);
            quotesTable.UniqueConstraints.Add("PK_Quotes", pK_Quotes);
            relationalModel.Tables.Add(("Quotes", null), quotesTable);
            var quotesTableMapping = new TableMapping(quote, quotesTable, true);
            quotesTable.AddTypeMapping(quotesTableMapping, false);
            tableMappings27.Add(quotesTableMapping);
            RelationalModel.CreateColumnMapping(idColumn18, quote.FindProperty("Id")!, quotesTableMapping);
            RelationalModel.CreateColumnMapping(authorColumn, quote.FindProperty("Author")!, quotesTableMapping);
            RelationalModel.CreateColumnMapping(bodyColumn6, quote.FindProperty("Body")!, quotesTableMapping);

            var rating = FindEntityType("Ogma3.Data.Ratings.Rating")!;

            var defaultTableMappings28 = new List<TableMappingBase<ColumnMappingBase>>();
            rating.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings28);
            var ogma3DataRatingsRatingTableBase = new TableBase("Ogma3.Data.Ratings.Rating", null, relationalModel);
            var blacklistedByDefaultColumnBase = new ColumnBase<ColumnMappingBase>("BlacklistedByDefault", "boolean", ogma3DataRatingsRatingTableBase);
            ogma3DataRatingsRatingTableBase.Columns.Add("BlacklistedByDefault", blacklistedByDefaultColumnBase);
            var descriptionColumnBase3 = new ColumnBase<ColumnMappingBase>("Description", "character varying(1000)", ogma3DataRatingsRatingTableBase);
            ogma3DataRatingsRatingTableBase.Columns.Add("Description", descriptionColumnBase3);
            var iconColumnBase0 = new ColumnBase<ColumnMappingBase>("Icon", "text", ogma3DataRatingsRatingTableBase)
            {
                IsNullable = true
            };
            ogma3DataRatingsRatingTableBase.Columns.Add("Icon", iconColumnBase0);
            var iconIdColumnBase0 = new ColumnBase<ColumnMappingBase>("IconId", "text", ogma3DataRatingsRatingTableBase)
            {
                IsNullable = true
            };
            ogma3DataRatingsRatingTableBase.Columns.Add("IconId", iconIdColumnBase0);
            var idColumnBase19 = new ColumnBase<ColumnMappingBase>("Id", "bigint", ogma3DataRatingsRatingTableBase);
            ogma3DataRatingsRatingTableBase.Columns.Add("Id", idColumnBase19);
            var nameColumnBase3 = new ColumnBase<ColumnMappingBase>("Name", "character varying(20)", ogma3DataRatingsRatingTableBase);
            ogma3DataRatingsRatingTableBase.Columns.Add("Name", nameColumnBase3);
            var orderColumnBase0 = new ColumnBase<ColumnMappingBase>("Order", "smallint", ogma3DataRatingsRatingTableBase);
            ogma3DataRatingsRatingTableBase.Columns.Add("Order", orderColumnBase0);
            relationalModel.DefaultTables.Add("Ogma3.Data.Ratings.Rating", ogma3DataRatingsRatingTableBase);
            var ogma3DataRatingsRatingMappingBase = new TableMappingBase<ColumnMappingBase>(rating, ogma3DataRatingsRatingTableBase, true);
            ogma3DataRatingsRatingTableBase.AddTypeMapping(ogma3DataRatingsRatingMappingBase, false);
            defaultTableMappings28.Add(ogma3DataRatingsRatingMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase19, rating.FindProperty("Id")!, ogma3DataRatingsRatingMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)blacklistedByDefaultColumnBase, rating.FindProperty("BlacklistedByDefault")!, ogma3DataRatingsRatingMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)descriptionColumnBase3, rating.FindProperty("Description")!, ogma3DataRatingsRatingMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)iconColumnBase0, rating.FindProperty("Icon")!, ogma3DataRatingsRatingMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)iconIdColumnBase0, rating.FindProperty("IconId")!, ogma3DataRatingsRatingMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase3, rating.FindProperty("Name")!, ogma3DataRatingsRatingMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)orderColumnBase0, rating.FindProperty("Order")!, ogma3DataRatingsRatingMappingBase);

            var tableMappings28 = new List<TableMapping>();
            rating.SetRuntimeAnnotation("Relational:TableMappings", tableMappings28);
            var ratingsTable = new Table("Ratings", null, relationalModel);
            var idColumn19 = new Column("Id", "bigint", ratingsTable);
            ratingsTable.Columns.Add("Id", idColumn19);
            idColumn19.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            var blacklistedByDefaultColumn = new Column("BlacklistedByDefault", "boolean", ratingsTable);
            ratingsTable.Columns.Add("BlacklistedByDefault", blacklistedByDefaultColumn);
            var descriptionColumn3 = new Column("Description", "character varying(1000)", ratingsTable);
            ratingsTable.Columns.Add("Description", descriptionColumn3);
            var iconColumn0 = new Column("Icon", "text", ratingsTable)
            {
                IsNullable = true
            };
            ratingsTable.Columns.Add("Icon", iconColumn0);
            var iconIdColumn0 = new Column("IconId", "text", ratingsTable)
            {
                IsNullable = true
            };
            ratingsTable.Columns.Add("IconId", iconIdColumn0);
            var nameColumn3 = new Column("Name", "character varying(20)", ratingsTable);
            ratingsTable.Columns.Add("Name", nameColumn3);
            var orderColumn0 = new Column("Order", "smallint", ratingsTable);
            ratingsTable.Columns.Add("Order", orderColumn0);
            var pK_Ratings = new UniqueConstraint("PK_Ratings", ratingsTable, new[] { idColumn19 });
            ratingsTable.PrimaryKey = pK_Ratings;
            var pK_RatingsUc = RelationalModel.GetKey(this,
                "Ogma3.Data.Ratings.Rating",
                new[] { "Id" });
            pK_Ratings.MappedKeys.Add(pK_RatingsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_RatingsUc).Add(pK_Ratings);
            ratingsTable.UniqueConstraints.Add("PK_Ratings", pK_Ratings);
            var iX_Ratings_Name = new TableIndex(
            "IX_Ratings_Name", ratingsTable, new[] { nameColumn3 }, true);
            var iX_Ratings_NameIx = RelationalModel.GetIndex(this,
                "Ogma3.Data.Ratings.Rating",
                new[] { "Name" });
            iX_Ratings_Name.MappedIndexes.Add(iX_Ratings_NameIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Ratings_NameIx).Add(iX_Ratings_Name);
            ratingsTable.Indexes.Add("IX_Ratings_Name", iX_Ratings_Name);
            relationalModel.Tables.Add(("Ratings", null), ratingsTable);
            var ratingsTableMapping = new TableMapping(rating, ratingsTable, true);
            ratingsTable.AddTypeMapping(ratingsTableMapping, false);
            tableMappings28.Add(ratingsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn19, rating.FindProperty("Id")!, ratingsTableMapping);
            RelationalModel.CreateColumnMapping(blacklistedByDefaultColumn, rating.FindProperty("BlacklistedByDefault")!, ratingsTableMapping);
            RelationalModel.CreateColumnMapping(descriptionColumn3, rating.FindProperty("Description")!, ratingsTableMapping);
            RelationalModel.CreateColumnMapping(iconColumn0, rating.FindProperty("Icon")!, ratingsTableMapping);
            RelationalModel.CreateColumnMapping(iconIdColumn0, rating.FindProperty("IconId")!, ratingsTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn3, rating.FindProperty("Name")!, ratingsTableMapping);
            RelationalModel.CreateColumnMapping(orderColumn0, rating.FindProperty("Order")!, ratingsTableMapping);

            var report = FindEntityType("Ogma3.Data.Reports.Report")!;

            var defaultTableMappings29 = new List<TableMappingBase<ColumnMappingBase>>();
            report.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings29);
            var ogma3DataReportsReportTableBase = new TableBase("Ogma3.Data.Reports.Report", null, relationalModel);
            var blogpostIdColumnBase0 = new ColumnBase<ColumnMappingBase>("BlogpostId", "bigint", ogma3DataReportsReportTableBase)
            {
                IsNullable = true
            };
            ogma3DataReportsReportTableBase.Columns.Add("BlogpostId", blogpostIdColumnBase0);
            var chapterIdColumnBase0 = new ColumnBase<ColumnMappingBase>("ChapterId", "bigint", ogma3DataReportsReportTableBase)
            {
                IsNullable = true
            };
            ogma3DataReportsReportTableBase.Columns.Add("ChapterId", chapterIdColumnBase0);
            var clubIdColumnBase3 = new ColumnBase<ColumnMappingBase>("ClubId", "bigint", ogma3DataReportsReportTableBase)
            {
                IsNullable = true
            };
            ogma3DataReportsReportTableBase.Columns.Add("ClubId", clubIdColumnBase3);
            var commentIdColumnBase = new ColumnBase<ColumnMappingBase>("CommentId", "bigint", ogma3DataReportsReportTableBase)
            {
                IsNullable = true
            };
            ogma3DataReportsReportTableBase.Columns.Add("CommentId", commentIdColumnBase);
            var contentTypeColumnBase = new ColumnBase<ColumnMappingBase>("ContentType", "text", ogma3DataReportsReportTableBase);
            ogma3DataReportsReportTableBase.Columns.Add("ContentType", contentTypeColumnBase);
            var idColumnBase20 = new ColumnBase<ColumnMappingBase>("Id", "bigint", ogma3DataReportsReportTableBase);
            ogma3DataReportsReportTableBase.Columns.Add("Id", idColumnBase20);
            var reasonColumnBase1 = new ColumnBase<ColumnMappingBase>("Reason", "text", ogma3DataReportsReportTableBase);
            ogma3DataReportsReportTableBase.Columns.Add("Reason", reasonColumnBase1);
            var reportDateColumnBase = new ColumnBase<ColumnMappingBase>("ReportDate", "timestamp with time zone", ogma3DataReportsReportTableBase);
            ogma3DataReportsReportTableBase.Columns.Add("ReportDate", reportDateColumnBase);
            var reporterIdColumnBase = new ColumnBase<ColumnMappingBase>("ReporterId", "bigint", ogma3DataReportsReportTableBase);
            ogma3DataReportsReportTableBase.Columns.Add("ReporterId", reporterIdColumnBase);
            var storyIdColumnBase2 = new ColumnBase<ColumnMappingBase>("StoryId", "bigint", ogma3DataReportsReportTableBase)
            {
                IsNullable = true
            };
            ogma3DataReportsReportTableBase.Columns.Add("StoryId", storyIdColumnBase2);
            var userIdColumnBase7 = new ColumnBase<ColumnMappingBase>("UserId", "bigint", ogma3DataReportsReportTableBase)
            {
                IsNullable = true
            };
            ogma3DataReportsReportTableBase.Columns.Add("UserId", userIdColumnBase7);
            relationalModel.DefaultTables.Add("Ogma3.Data.Reports.Report", ogma3DataReportsReportTableBase);
            var ogma3DataReportsReportMappingBase = new TableMappingBase<ColumnMappingBase>(report, ogma3DataReportsReportTableBase, true);
            ogma3DataReportsReportTableBase.AddTypeMapping(ogma3DataReportsReportMappingBase, false);
            defaultTableMappings29.Add(ogma3DataReportsReportMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase20, report.FindProperty("Id")!, ogma3DataReportsReportMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)blogpostIdColumnBase0, report.FindProperty("BlogpostId")!, ogma3DataReportsReportMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)chapterIdColumnBase0, report.FindProperty("ChapterId")!, ogma3DataReportsReportMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)clubIdColumnBase3, report.FindProperty("ClubId")!, ogma3DataReportsReportMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)commentIdColumnBase, report.FindProperty("CommentId")!, ogma3DataReportsReportMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)contentTypeColumnBase, report.FindProperty("ContentType")!, ogma3DataReportsReportMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)reasonColumnBase1, report.FindProperty("Reason")!, ogma3DataReportsReportMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)reportDateColumnBase, report.FindProperty("ReportDate")!, ogma3DataReportsReportMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)reporterIdColumnBase, report.FindProperty("ReporterId")!, ogma3DataReportsReportMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)storyIdColumnBase2, report.FindProperty("StoryId")!, ogma3DataReportsReportMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)userIdColumnBase7, report.FindProperty("UserId")!, ogma3DataReportsReportMappingBase);

            var tableMappings29 = new List<TableMapping>();
            report.SetRuntimeAnnotation("Relational:TableMappings", tableMappings29);
            var reportsTable = new Table("Reports", null, relationalModel);
            var idColumn20 = new Column("Id", "bigint", reportsTable);
            reportsTable.Columns.Add("Id", idColumn20);
            idColumn20.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            var blogpostIdColumn0 = new Column("BlogpostId", "bigint", reportsTable)
            {
                IsNullable = true
            };
            reportsTable.Columns.Add("BlogpostId", blogpostIdColumn0);
            var chapterIdColumn0 = new Column("ChapterId", "bigint", reportsTable)
            {
                IsNullable = true
            };
            reportsTable.Columns.Add("ChapterId", chapterIdColumn0);
            var clubIdColumn3 = new Column("ClubId", "bigint", reportsTable)
            {
                IsNullable = true
            };
            reportsTable.Columns.Add("ClubId", clubIdColumn3);
            var commentIdColumn = new Column("CommentId", "bigint", reportsTable)
            {
                IsNullable = true
            };
            reportsTable.Columns.Add("CommentId", commentIdColumn);
            var contentTypeColumn = new Column("ContentType", "text", reportsTable);
            reportsTable.Columns.Add("ContentType", contentTypeColumn);
            var reasonColumn1 = new Column("Reason", "text", reportsTable);
            reportsTable.Columns.Add("Reason", reasonColumn1);
            var reportDateColumn = new Column("ReportDate", "timestamp with time zone", reportsTable);
            reportsTable.Columns.Add("ReportDate", reportDateColumn);
            var reporterIdColumn = new Column("ReporterId", "bigint", reportsTable);
            reportsTable.Columns.Add("ReporterId", reporterIdColumn);
            var storyIdColumn2 = new Column("StoryId", "bigint", reportsTable)
            {
                IsNullable = true
            };
            reportsTable.Columns.Add("StoryId", storyIdColumn2);
            var userIdColumn7 = new Column("UserId", "bigint", reportsTable)
            {
                IsNullable = true
            };
            reportsTable.Columns.Add("UserId", userIdColumn7);
            var pK_Reports = new UniqueConstraint("PK_Reports", reportsTable, new[] { idColumn20 });
            reportsTable.PrimaryKey = pK_Reports;
            var pK_ReportsUc = RelationalModel.GetKey(this,
                "Ogma3.Data.Reports.Report",
                new[] { "Id" });
            pK_Reports.MappedKeys.Add(pK_ReportsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_ReportsUc).Add(pK_Reports);
            reportsTable.UniqueConstraints.Add("PK_Reports", pK_Reports);
            var iX_Reports_BlogpostId = new TableIndex(
            "IX_Reports_BlogpostId", reportsTable, new[] { blogpostIdColumn0 }, false);
            var iX_Reports_BlogpostIdIx = RelationalModel.GetIndex(this,
                "Ogma3.Data.Reports.Report",
                new[] { "BlogpostId" });
            iX_Reports_BlogpostId.MappedIndexes.Add(iX_Reports_BlogpostIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Reports_BlogpostIdIx).Add(iX_Reports_BlogpostId);
            reportsTable.Indexes.Add("IX_Reports_BlogpostId", iX_Reports_BlogpostId);
            var iX_Reports_ChapterId = new TableIndex(
            "IX_Reports_ChapterId", reportsTable, new[] { chapterIdColumn0 }, false);
            var iX_Reports_ChapterIdIx = RelationalModel.GetIndex(this,
                "Ogma3.Data.Reports.Report",
                new[] { "ChapterId" });
            iX_Reports_ChapterId.MappedIndexes.Add(iX_Reports_ChapterIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Reports_ChapterIdIx).Add(iX_Reports_ChapterId);
            reportsTable.Indexes.Add("IX_Reports_ChapterId", iX_Reports_ChapterId);
            var iX_Reports_ClubId = new TableIndex(
            "IX_Reports_ClubId", reportsTable, new[] { clubIdColumn3 }, false);
            var iX_Reports_ClubIdIx = RelationalModel.GetIndex(this,
                "Ogma3.Data.Reports.Report",
                new[] { "ClubId" });
            iX_Reports_ClubId.MappedIndexes.Add(iX_Reports_ClubIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Reports_ClubIdIx).Add(iX_Reports_ClubId);
            reportsTable.Indexes.Add("IX_Reports_ClubId", iX_Reports_ClubId);
            var iX_Reports_CommentId = new TableIndex(
            "IX_Reports_CommentId", reportsTable, new[] { commentIdColumn }, false);
            var iX_Reports_CommentIdIx = RelationalModel.GetIndex(this,
                "Ogma3.Data.Reports.Report",
                new[] { "CommentId" });
            iX_Reports_CommentId.MappedIndexes.Add(iX_Reports_CommentIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Reports_CommentIdIx).Add(iX_Reports_CommentId);
            reportsTable.Indexes.Add("IX_Reports_CommentId", iX_Reports_CommentId);
            var iX_Reports_ReporterId = new TableIndex(
            "IX_Reports_ReporterId", reportsTable, new[] { reporterIdColumn }, false);
            var iX_Reports_ReporterIdIx = RelationalModel.GetIndex(this,
                "Ogma3.Data.Reports.Report",
                new[] { "ReporterId" });
            iX_Reports_ReporterId.MappedIndexes.Add(iX_Reports_ReporterIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Reports_ReporterIdIx).Add(iX_Reports_ReporterId);
            reportsTable.Indexes.Add("IX_Reports_ReporterId", iX_Reports_ReporterId);
            var iX_Reports_StoryId = new TableIndex(
            "IX_Reports_StoryId", reportsTable, new[] { storyIdColumn2 }, false);
            var iX_Reports_StoryIdIx = RelationalModel.GetIndex(this,
                "Ogma3.Data.Reports.Report",
                new[] { "StoryId" });
            iX_Reports_StoryId.MappedIndexes.Add(iX_Reports_StoryIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Reports_StoryIdIx).Add(iX_Reports_StoryId);
            reportsTable.Indexes.Add("IX_Reports_StoryId", iX_Reports_StoryId);
            var iX_Reports_UserId = new TableIndex(
            "IX_Reports_UserId", reportsTable, new[] { userIdColumn7 }, false);
            var iX_Reports_UserIdIx = RelationalModel.GetIndex(this,
                "Ogma3.Data.Reports.Report",
                new[] { "UserId" });
            iX_Reports_UserId.MappedIndexes.Add(iX_Reports_UserIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Reports_UserIdIx).Add(iX_Reports_UserId);
            reportsTable.Indexes.Add("IX_Reports_UserId", iX_Reports_UserId);
            relationalModel.Tables.Add(("Reports", null), reportsTable);
            var reportsTableMapping = new TableMapping(report, reportsTable, true);
            reportsTable.AddTypeMapping(reportsTableMapping, false);
            tableMappings29.Add(reportsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn20, report.FindProperty("Id")!, reportsTableMapping);
            RelationalModel.CreateColumnMapping(blogpostIdColumn0, report.FindProperty("BlogpostId")!, reportsTableMapping);
            RelationalModel.CreateColumnMapping(chapterIdColumn0, report.FindProperty("ChapterId")!, reportsTableMapping);
            RelationalModel.CreateColumnMapping(clubIdColumn3, report.FindProperty("ClubId")!, reportsTableMapping);
            RelationalModel.CreateColumnMapping(commentIdColumn, report.FindProperty("CommentId")!, reportsTableMapping);
            RelationalModel.CreateColumnMapping(contentTypeColumn, report.FindProperty("ContentType")!, reportsTableMapping);
            RelationalModel.CreateColumnMapping(reasonColumn1, report.FindProperty("Reason")!, reportsTableMapping);
            RelationalModel.CreateColumnMapping(reportDateColumn, report.FindProperty("ReportDate")!, reportsTableMapping);
            RelationalModel.CreateColumnMapping(reporterIdColumn, report.FindProperty("ReporterId")!, reportsTableMapping);
            RelationalModel.CreateColumnMapping(storyIdColumn2, report.FindProperty("StoryId")!, reportsTableMapping);
            RelationalModel.CreateColumnMapping(userIdColumn7, report.FindProperty("UserId")!, reportsTableMapping);

            var ogmaRole = FindEntityType("Ogma3.Data.Roles.OgmaRole")!;

            var defaultTableMappings30 = new List<TableMappingBase<ColumnMappingBase>>();
            ogmaRole.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings30);
            var ogma3DataRolesOgmaRoleTableBase = new TableBase("Ogma3.Data.Roles.OgmaRole", null, relationalModel);
            var colorColumnBase = new ColumnBase<ColumnMappingBase>("Color", "character varying(7)", ogma3DataRolesOgmaRoleTableBase)
            {
                IsNullable = true
            };
            ogma3DataRolesOgmaRoleTableBase.Columns.Add("Color", colorColumnBase);
            var concurrencyStampColumnBase = new ColumnBase<ColumnMappingBase>("ConcurrencyStamp", "text", ogma3DataRolesOgmaRoleTableBase)
            {
                IsNullable = true
            };
            ogma3DataRolesOgmaRoleTableBase.Columns.Add("ConcurrencyStamp", concurrencyStampColumnBase);
            var idColumnBase21 = new ColumnBase<ColumnMappingBase>("Id", "bigint", ogma3DataRolesOgmaRoleTableBase);
            ogma3DataRolesOgmaRoleTableBase.Columns.Add("Id", idColumnBase21);
            var isStaffColumnBase = new ColumnBase<ColumnMappingBase>("IsStaff", "boolean", ogma3DataRolesOgmaRoleTableBase);
            ogma3DataRolesOgmaRoleTableBase.Columns.Add("IsStaff", isStaffColumnBase);
            var nameColumnBase4 = new ColumnBase<ColumnMappingBase>("Name", "character varying(256)", ogma3DataRolesOgmaRoleTableBase);
            ogma3DataRolesOgmaRoleTableBase.Columns.Add("Name", nameColumnBase4);
            var normalizedNameColumnBase = new ColumnBase<ColumnMappingBase>("NormalizedName", "character varying(256)", ogma3DataRolesOgmaRoleTableBase);
            ogma3DataRolesOgmaRoleTableBase.Columns.Add("NormalizedName", normalizedNameColumnBase);
            var orderColumnBase1 = new ColumnBase<ColumnMappingBase>("Order", "smallint", ogma3DataRolesOgmaRoleTableBase);
            ogma3DataRolesOgmaRoleTableBase.Columns.Add("Order", orderColumnBase1);
            relationalModel.DefaultTables.Add("Ogma3.Data.Roles.OgmaRole", ogma3DataRolesOgmaRoleTableBase);
            var ogma3DataRolesOgmaRoleMappingBase = new TableMappingBase<ColumnMappingBase>(ogmaRole, ogma3DataRolesOgmaRoleTableBase, true);
            ogma3DataRolesOgmaRoleTableBase.AddTypeMapping(ogma3DataRolesOgmaRoleMappingBase, false);
            defaultTableMappings30.Add(ogma3DataRolesOgmaRoleMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase21, ogmaRole.FindProperty("Id")!, ogma3DataRolesOgmaRoleMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)colorColumnBase, ogmaRole.FindProperty("Color")!, ogma3DataRolesOgmaRoleMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)concurrencyStampColumnBase, ogmaRole.FindProperty("ConcurrencyStamp")!, ogma3DataRolesOgmaRoleMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)isStaffColumnBase, ogmaRole.FindProperty("IsStaff")!, ogma3DataRolesOgmaRoleMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase4, ogmaRole.FindProperty("Name")!, ogma3DataRolesOgmaRoleMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)normalizedNameColumnBase, ogmaRole.FindProperty("NormalizedName")!, ogma3DataRolesOgmaRoleMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)orderColumnBase1, ogmaRole.FindProperty("Order")!, ogma3DataRolesOgmaRoleMappingBase);

            var tableMappings30 = new List<TableMapping>();
            ogmaRole.SetRuntimeAnnotation("Relational:TableMappings", tableMappings30);
            var aspNetRolesTable = new Table("AspNetRoles", null, relationalModel);
            var idColumn21 = new Column("Id", "bigint", aspNetRolesTable);
            aspNetRolesTable.Columns.Add("Id", idColumn21);
            idColumn21.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            var colorColumn = new Column("Color", "character varying(7)", aspNetRolesTable)
            {
                IsNullable = true
            };
            aspNetRolesTable.Columns.Add("Color", colorColumn);
            var concurrencyStampColumn = new Column("ConcurrencyStamp", "text", aspNetRolesTable)
            {
                IsNullable = true
            };
            aspNetRolesTable.Columns.Add("ConcurrencyStamp", concurrencyStampColumn);
            var isStaffColumn = new Column("IsStaff", "boolean", aspNetRolesTable);
            aspNetRolesTable.Columns.Add("IsStaff", isStaffColumn);
            var nameColumn4 = new Column("Name", "character varying(256)", aspNetRolesTable);
            aspNetRolesTable.Columns.Add("Name", nameColumn4);
            var normalizedNameColumn = new Column("NormalizedName", "character varying(256)", aspNetRolesTable);
            aspNetRolesTable.Columns.Add("NormalizedName", normalizedNameColumn);
            var orderColumn1 = new Column("Order", "smallint", aspNetRolesTable);
            aspNetRolesTable.Columns.Add("Order", orderColumn1);
            var pK_AspNetRoles = new UniqueConstraint("PK_AspNetRoles", aspNetRolesTable, new[] { idColumn21 });
            aspNetRolesTable.PrimaryKey = pK_AspNetRoles;
            var pK_AspNetRolesUc = RelationalModel.GetKey(this,
                "Ogma3.Data.Roles.OgmaRole",
                new[] { "Id" });
            pK_AspNetRoles.MappedKeys.Add(pK_AspNetRolesUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_AspNetRolesUc).Add(pK_AspNetRoles);
            aspNetRolesTable.UniqueConstraints.Add("PK_AspNetRoles", pK_AspNetRoles);
            var roleNameIndex = new TableIndex(
            "RoleNameIndex", aspNetRolesTable, new[] { normalizedNameColumn }, true);
            var roleNameIndexIx = RelationalModel.GetIndex(this,
                "Ogma3.Data.Roles.OgmaRole",
                new[] { "NormalizedName" });
            roleNameIndex.MappedIndexes.Add(roleNameIndexIx);
            RelationalModel.GetOrCreateTableIndexes(roleNameIndexIx).Add(roleNameIndex);
            aspNetRolesTable.Indexes.Add("RoleNameIndex", roleNameIndex);
            relationalModel.Tables.Add(("AspNetRoles", null), aspNetRolesTable);
            var aspNetRolesTableMapping = new TableMapping(ogmaRole, aspNetRolesTable, true);
            aspNetRolesTable.AddTypeMapping(aspNetRolesTableMapping, false);
            tableMappings30.Add(aspNetRolesTableMapping);
            RelationalModel.CreateColumnMapping(idColumn21, ogmaRole.FindProperty("Id")!, aspNetRolesTableMapping);
            RelationalModel.CreateColumnMapping(colorColumn, ogmaRole.FindProperty("Color")!, aspNetRolesTableMapping);
            RelationalModel.CreateColumnMapping(concurrencyStampColumn, ogmaRole.FindProperty("ConcurrencyStamp")!, aspNetRolesTableMapping);
            RelationalModel.CreateColumnMapping(isStaffColumn, ogmaRole.FindProperty("IsStaff")!, aspNetRolesTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn4, ogmaRole.FindProperty("Name")!, aspNetRolesTableMapping);
            RelationalModel.CreateColumnMapping(normalizedNameColumn, ogmaRole.FindProperty("NormalizedName")!, aspNetRolesTableMapping);
            RelationalModel.CreateColumnMapping(orderColumn1, ogmaRole.FindProperty("Order")!, aspNetRolesTableMapping);

            var shelf = FindEntityType("Ogma3.Data.Shelves.Shelf")!;

            var defaultTableMappings31 = new List<TableMappingBase<ColumnMappingBase>>();
            shelf.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings31);
            var ogma3DataShelvesShelfTableBase = new TableBase("Ogma3.Data.Shelves.Shelf", null, relationalModel);
            var colorColumnBase0 = new ColumnBase<ColumnMappingBase>("Color", "character varying(7)", ogma3DataShelvesShelfTableBase)
            {
                IsNullable = true
            };
            ogma3DataShelvesShelfTableBase.Columns.Add("Color", colorColumnBase0);
            var descriptionColumnBase4 = new ColumnBase<ColumnMappingBase>("Description", "character varying(100)", ogma3DataShelvesShelfTableBase);
            ogma3DataShelvesShelfTableBase.Columns.Add("Description", descriptionColumnBase4);
            var iconIdColumnBase1 = new ColumnBase<ColumnMappingBase>("IconId", "bigint", ogma3DataShelvesShelfTableBase)
            {
                IsNullable = true
            };
            ogma3DataShelvesShelfTableBase.Columns.Add("IconId", iconIdColumnBase1);
            var idColumnBase22 = new ColumnBase<ColumnMappingBase>("Id", "bigint", ogma3DataShelvesShelfTableBase);
            ogma3DataShelvesShelfTableBase.Columns.Add("Id", idColumnBase22);
            var isDefaultColumnBase = new ColumnBase<ColumnMappingBase>("IsDefault", "boolean", ogma3DataShelvesShelfTableBase);
            ogma3DataShelvesShelfTableBase.Columns.Add("IsDefault", isDefaultColumnBase);
            var isPublicColumnBase = new ColumnBase<ColumnMappingBase>("IsPublic", "boolean", ogma3DataShelvesShelfTableBase);
            ogma3DataShelvesShelfTableBase.Columns.Add("IsPublic", isPublicColumnBase);
            var isQuickAddColumnBase = new ColumnBase<ColumnMappingBase>("IsQuickAdd", "boolean", ogma3DataShelvesShelfTableBase);
            ogma3DataShelvesShelfTableBase.Columns.Add("IsQuickAdd", isQuickAddColumnBase);
            var nameColumnBase5 = new ColumnBase<ColumnMappingBase>("Name", "character varying(20)", ogma3DataShelvesShelfTableBase);
            ogma3DataShelvesShelfTableBase.Columns.Add("Name", nameColumnBase5);
            var ownerIdColumnBase = new ColumnBase<ColumnMappingBase>("OwnerId", "bigint", ogma3DataShelvesShelfTableBase);
            ogma3DataShelvesShelfTableBase.Columns.Add("OwnerId", ownerIdColumnBase);
            var trackUpdatesColumnBase = new ColumnBase<ColumnMappingBase>("TrackUpdates", "boolean", ogma3DataShelvesShelfTableBase);
            ogma3DataShelvesShelfTableBase.Columns.Add("TrackUpdates", trackUpdatesColumnBase);
            relationalModel.DefaultTables.Add("Ogma3.Data.Shelves.Shelf", ogma3DataShelvesShelfTableBase);
            var ogma3DataShelvesShelfMappingBase = new TableMappingBase<ColumnMappingBase>(shelf, ogma3DataShelvesShelfTableBase, true);
            ogma3DataShelvesShelfTableBase.AddTypeMapping(ogma3DataShelvesShelfMappingBase, false);
            defaultTableMappings31.Add(ogma3DataShelvesShelfMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase22, shelf.FindProperty("Id")!, ogma3DataShelvesShelfMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)colorColumnBase0, shelf.FindProperty("Color")!, ogma3DataShelvesShelfMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)descriptionColumnBase4, shelf.FindProperty("Description")!, ogma3DataShelvesShelfMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)iconIdColumnBase1, shelf.FindProperty("IconId")!, ogma3DataShelvesShelfMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)isDefaultColumnBase, shelf.FindProperty("IsDefault")!, ogma3DataShelvesShelfMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)isPublicColumnBase, shelf.FindProperty("IsPublic")!, ogma3DataShelvesShelfMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)isQuickAddColumnBase, shelf.FindProperty("IsQuickAdd")!, ogma3DataShelvesShelfMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase5, shelf.FindProperty("Name")!, ogma3DataShelvesShelfMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)ownerIdColumnBase, shelf.FindProperty("OwnerId")!, ogma3DataShelvesShelfMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)trackUpdatesColumnBase, shelf.FindProperty("TrackUpdates")!, ogma3DataShelvesShelfMappingBase);

            var tableMappings31 = new List<TableMapping>();
            shelf.SetRuntimeAnnotation("Relational:TableMappings", tableMappings31);
            var shelvesTable = new Table("Shelves", null, relationalModel);
            var idColumn22 = new Column("Id", "bigint", shelvesTable);
            shelvesTable.Columns.Add("Id", idColumn22);
            idColumn22.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            var colorColumn0 = new Column("Color", "character varying(7)", shelvesTable)
            {
                IsNullable = true
            };
            shelvesTable.Columns.Add("Color", colorColumn0);
            var descriptionColumn4 = new Column("Description", "character varying(100)", shelvesTable);
            shelvesTable.Columns.Add("Description", descriptionColumn4);
            var iconIdColumn1 = new Column("IconId", "bigint", shelvesTable)
            {
                IsNullable = true
            };
            shelvesTable.Columns.Add("IconId", iconIdColumn1);
            var isDefaultColumn = new Column("IsDefault", "boolean", shelvesTable);
            shelvesTable.Columns.Add("IsDefault", isDefaultColumn);
            var isPublicColumn = new Column("IsPublic", "boolean", shelvesTable);
            shelvesTable.Columns.Add("IsPublic", isPublicColumn);
            var isQuickAddColumn = new Column("IsQuickAdd", "boolean", shelvesTable);
            shelvesTable.Columns.Add("IsQuickAdd", isQuickAddColumn);
            var nameColumn5 = new Column("Name", "character varying(20)", shelvesTable);
            shelvesTable.Columns.Add("Name", nameColumn5);
            var ownerIdColumn = new Column("OwnerId", "bigint", shelvesTable);
            shelvesTable.Columns.Add("OwnerId", ownerIdColumn);
            var trackUpdatesColumn = new Column("TrackUpdates", "boolean", shelvesTable);
            shelvesTable.Columns.Add("TrackUpdates", trackUpdatesColumn);
            var pK_Shelves = new UniqueConstraint("PK_Shelves", shelvesTable, new[] { idColumn22 });
            shelvesTable.PrimaryKey = pK_Shelves;
            var pK_ShelvesUc = RelationalModel.GetKey(this,
                "Ogma3.Data.Shelves.Shelf",
                new[] { "Id" });
            pK_Shelves.MappedKeys.Add(pK_ShelvesUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_ShelvesUc).Add(pK_Shelves);
            shelvesTable.UniqueConstraints.Add("PK_Shelves", pK_Shelves);
            var iX_Shelves_IconId = new TableIndex(
            "IX_Shelves_IconId", shelvesTable, new[] { iconIdColumn1 }, false);
            var iX_Shelves_IconIdIx = RelationalModel.GetIndex(this,
                "Ogma3.Data.Shelves.Shelf",
                new[] { "IconId" });
            iX_Shelves_IconId.MappedIndexes.Add(iX_Shelves_IconIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Shelves_IconIdIx).Add(iX_Shelves_IconId);
            shelvesTable.Indexes.Add("IX_Shelves_IconId", iX_Shelves_IconId);
            var iX_Shelves_OwnerId = new TableIndex(
            "IX_Shelves_OwnerId", shelvesTable, new[] { ownerIdColumn }, false);
            var iX_Shelves_OwnerIdIx = RelationalModel.GetIndex(this,
                "Ogma3.Data.Shelves.Shelf",
                new[] { "OwnerId" });
            iX_Shelves_OwnerId.MappedIndexes.Add(iX_Shelves_OwnerIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Shelves_OwnerIdIx).Add(iX_Shelves_OwnerId);
            shelvesTable.Indexes.Add("IX_Shelves_OwnerId", iX_Shelves_OwnerId);
            relationalModel.Tables.Add(("Shelves", null), shelvesTable);
            var shelvesTableMapping = new TableMapping(shelf, shelvesTable, true);
            shelvesTable.AddTypeMapping(shelvesTableMapping, false);
            tableMappings31.Add(shelvesTableMapping);
            RelationalModel.CreateColumnMapping(idColumn22, shelf.FindProperty("Id")!, shelvesTableMapping);
            RelationalModel.CreateColumnMapping(colorColumn0, shelf.FindProperty("Color")!, shelvesTableMapping);
            RelationalModel.CreateColumnMapping(descriptionColumn4, shelf.FindProperty("Description")!, shelvesTableMapping);
            RelationalModel.CreateColumnMapping(iconIdColumn1, shelf.FindProperty("IconId")!, shelvesTableMapping);
            RelationalModel.CreateColumnMapping(isDefaultColumn, shelf.FindProperty("IsDefault")!, shelvesTableMapping);
            RelationalModel.CreateColumnMapping(isPublicColumn, shelf.FindProperty("IsPublic")!, shelvesTableMapping);
            RelationalModel.CreateColumnMapping(isQuickAddColumn, shelf.FindProperty("IsQuickAdd")!, shelvesTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn5, shelf.FindProperty("Name")!, shelvesTableMapping);
            RelationalModel.CreateColumnMapping(ownerIdColumn, shelf.FindProperty("OwnerId")!, shelvesTableMapping);
            RelationalModel.CreateColumnMapping(trackUpdatesColumn, shelf.FindProperty("TrackUpdates")!, shelvesTableMapping);

            var shelfStory = FindEntityType("Ogma3.Data.Shelves.ShelfStory")!;

            var defaultTableMappings32 = new List<TableMappingBase<ColumnMappingBase>>();
            shelfStory.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings32);
            var ogma3DataShelvesShelfStoryTableBase = new TableBase("Ogma3.Data.Shelves.ShelfStory", null, relationalModel);
            var shelfIdColumnBase = new ColumnBase<ColumnMappingBase>("ShelfId", "bigint", ogma3DataShelvesShelfStoryTableBase);
            ogma3DataShelvesShelfStoryTableBase.Columns.Add("ShelfId", shelfIdColumnBase);
            var storyIdColumnBase3 = new ColumnBase<ColumnMappingBase>("StoryId", "bigint", ogma3DataShelvesShelfStoryTableBase);
            ogma3DataShelvesShelfStoryTableBase.Columns.Add("StoryId", storyIdColumnBase3);
            relationalModel.DefaultTables.Add("Ogma3.Data.Shelves.ShelfStory", ogma3DataShelvesShelfStoryTableBase);
            var ogma3DataShelvesShelfStoryMappingBase = new TableMappingBase<ColumnMappingBase>(shelfStory, ogma3DataShelvesShelfStoryTableBase, true);
            ogma3DataShelvesShelfStoryTableBase.AddTypeMapping(ogma3DataShelvesShelfStoryMappingBase, false);
            defaultTableMappings32.Add(ogma3DataShelvesShelfStoryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)shelfIdColumnBase, shelfStory.FindProperty("ShelfId")!, ogma3DataShelvesShelfStoryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)storyIdColumnBase3, shelfStory.FindProperty("StoryId")!, ogma3DataShelvesShelfStoryMappingBase);

            var tableMappings32 = new List<TableMapping>();
            shelfStory.SetRuntimeAnnotation("Relational:TableMappings", tableMappings32);
            var shelfStoriesTable = new Table("ShelfStories", null, relationalModel);
            var shelfIdColumn = new Column("ShelfId", "bigint", shelfStoriesTable);
            shelfStoriesTable.Columns.Add("ShelfId", shelfIdColumn);
            var storyIdColumn3 = new Column("StoryId", "bigint", shelfStoriesTable);
            shelfStoriesTable.Columns.Add("StoryId", storyIdColumn3);
            var pK_ShelfStories = new UniqueConstraint("PK_ShelfStories", shelfStoriesTable, new[] { shelfIdColumn, storyIdColumn3 });
            shelfStoriesTable.PrimaryKey = pK_ShelfStories;
            var pK_ShelfStoriesUc = RelationalModel.GetKey(this,
                "Ogma3.Data.Shelves.ShelfStory",
                new[] { "ShelfId", "StoryId" });
            pK_ShelfStories.MappedKeys.Add(pK_ShelfStoriesUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_ShelfStoriesUc).Add(pK_ShelfStories);
            shelfStoriesTable.UniqueConstraints.Add("PK_ShelfStories", pK_ShelfStories);
            var iX_ShelfStories_StoryId = new TableIndex(
            "IX_ShelfStories_StoryId", shelfStoriesTable, new[] { storyIdColumn3 }, false);
            var iX_ShelfStories_StoryIdIx = RelationalModel.GetIndex(this,
                "Ogma3.Data.Shelves.ShelfStory",
                new[] { "StoryId" });
            iX_ShelfStories_StoryId.MappedIndexes.Add(iX_ShelfStories_StoryIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_ShelfStories_StoryIdIx).Add(iX_ShelfStories_StoryId);
            shelfStoriesTable.Indexes.Add("IX_ShelfStories_StoryId", iX_ShelfStories_StoryId);
            relationalModel.Tables.Add(("ShelfStories", null), shelfStoriesTable);
            var shelfStoriesTableMapping = new TableMapping(shelfStory, shelfStoriesTable, true);
            shelfStoriesTable.AddTypeMapping(shelfStoriesTableMapping, false);
            tableMappings32.Add(shelfStoriesTableMapping);
            RelationalModel.CreateColumnMapping(shelfIdColumn, shelfStory.FindProperty("ShelfId")!, shelfStoriesTableMapping);
            RelationalModel.CreateColumnMapping(storyIdColumn3, shelfStory.FindProperty("StoryId")!, shelfStoriesTableMapping);

            var credit = FindEntityType("Ogma3.Data.Stories.Credit")!;

            var defaultTableMappings33 = new List<TableMappingBase<ColumnMappingBase>>();
            credit.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings33);
            var ogma3DataStoriesCreditTableBase = new TableBase("Ogma3.Data.Stories.Credit", null, relationalModel);
            var creditsColumnBase = new JsonColumnBase("Credits", "jsonb", ogma3DataStoriesCreditTableBase)
            {
                IsNullable = true
            };
            ogma3DataStoriesCreditTableBase.Columns.Add("Credits", creditsColumnBase);
            relationalModel.DefaultTables.Add("Ogma3.Data.Stories.Credit", ogma3DataStoriesCreditTableBase);
            var ogma3DataStoriesCreditMappingBase = new TableMappingBase<ColumnMappingBase>(credit, ogma3DataStoriesCreditTableBase, true);
            ogma3DataStoriesCreditTableBase.AddTypeMapping(ogma3DataStoriesCreditMappingBase, false);
            defaultTableMappings33.Add(ogma3DataStoriesCreditMappingBase);

            var tableMappings33 = new List<TableMapping>();
            credit.SetRuntimeAnnotation("Relational:TableMappings", tableMappings33);
            var storiesTable = new Table("Stories", null, relationalModel);
            var idColumn23 = new Column("Id", "bigint", storiesTable);
            storiesTable.Columns.Add("Id", idColumn23);
            idColumn23.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            var authorIdColumn2 = new Column("AuthorId", "bigint", storiesTable);
            storiesTable.Columns.Add("AuthorId", authorIdColumn2);
            var chapterCountColumn = new Column("ChapterCount", "integer", storiesTable);
            storiesTable.Columns.Add("ChapterCount", chapterCountColumn);
            var contentBlockIdColumn1 = new Column("ContentBlockId", "bigint", storiesTable)
            {
                IsNullable = true
            };
            storiesTable.Columns.Add("ContentBlockId", contentBlockIdColumn1);
            var coverColumn = new Column("Cover", "text", storiesTable);
            storiesTable.Columns.Add("Cover", coverColumn);
            var coverIdColumn = new Column("CoverId", "text", storiesTable)
            {
                IsNullable = true
            };
            storiesTable.Columns.Add("CoverId", coverIdColumn);
            var creationDateColumn4 = new Column("CreationDate", "timestamp with time zone", storiesTable);
            storiesTable.Columns.Add("CreationDate", creationDateColumn4);
            var creditsColumn = new JsonColumn("Credits", "jsonb", storiesTable)
            {
                IsNullable = true
            };
            storiesTable.Columns.Add("Credits", creditsColumn);
            var descriptionColumn5 = new Column("Description", "character varying(3000)", storiesTable);
            storiesTable.Columns.Add("Description", descriptionColumn5);
            var hookColumn0 = new Column("Hook", "character varying(250)", storiesTable);
            storiesTable.Columns.Add("Hook", hookColumn0);
            var publicationDateColumn1 = new Column("PublicationDate", "timestamp with time zone", storiesTable)
            {
                IsNullable = true
            };
            storiesTable.Columns.Add("PublicationDate", publicationDateColumn1);
            var ratingIdColumn0 = new Column("RatingId", "bigint", storiesTable);
            storiesTable.Columns.Add("RatingId", ratingIdColumn0);
            var slugColumn4 = new Column("Slug", "character varying(100)", storiesTable);
            storiesTable.Columns.Add("Slug", slugColumn4);
            var statusColumn = new Column("Status", "e_story_status", storiesTable);
            storiesTable.Columns.Add("Status", statusColumn);
            var titleColumn3 = new Column("Title", "character varying(100)", storiesTable);
            storiesTable.Columns.Add("Title", titleColumn3);
            var wordCountColumn1 = new Column("WordCount", "integer", storiesTable);
            storiesTable.Columns.Add("WordCount", wordCountColumn1);
            var pK_Stories = new UniqueConstraint("PK_Stories", storiesTable, new[] { idColumn23 });
            storiesTable.PrimaryKey = pK_Stories;
            var pK_StoriesUc = RelationalModel.GetKey(this,
                "Ogma3.Data.Stories.Story",
                new[] { "Id" });
            pK_Stories.MappedKeys.Add(pK_StoriesUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_StoriesUc).Add(pK_Stories);
            storiesTable.UniqueConstraints.Add("PK_Stories", pK_Stories);
            var iX_Stories_AuthorId = new TableIndex(
            "IX_Stories_AuthorId", storiesTable, new[] { authorIdColumn2 }, false);
            var iX_Stories_AuthorIdIx = RelationalModel.GetIndex(this,
                "Ogma3.Data.Stories.Story",
                new[] { "AuthorId" });
            iX_Stories_AuthorId.MappedIndexes.Add(iX_Stories_AuthorIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Stories_AuthorIdIx).Add(iX_Stories_AuthorId);
            storiesTable.Indexes.Add("IX_Stories_AuthorId", iX_Stories_AuthorId);
            var iX_Stories_ContentBlockId = new TableIndex(
            "IX_Stories_ContentBlockId", storiesTable, new[] { contentBlockIdColumn1 }, true);
            var iX_Stories_ContentBlockIdIx = RelationalModel.GetIndex(this,
                "Ogma3.Data.Stories.Story",
                new[] { "ContentBlockId" });
            iX_Stories_ContentBlockId.MappedIndexes.Add(iX_Stories_ContentBlockIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Stories_ContentBlockIdIx).Add(iX_Stories_ContentBlockId);
            storiesTable.Indexes.Add("IX_Stories_ContentBlockId", iX_Stories_ContentBlockId);
            var iX_Stories_RatingId = new TableIndex(
            "IX_Stories_RatingId", storiesTable, new[] { ratingIdColumn0 }, false);
            var iX_Stories_RatingIdIx = RelationalModel.GetIndex(this,
                "Ogma3.Data.Stories.Story",
                new[] { "RatingId" });
            iX_Stories_RatingId.MappedIndexes.Add(iX_Stories_RatingIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Stories_RatingIdIx).Add(iX_Stories_RatingId);
            storiesTable.Indexes.Add("IX_Stories_RatingId", iX_Stories_RatingId);
            relationalModel.Tables.Add(("Stories", null), storiesTable);
            var storiesTableMapping = new TableMapping(credit, storiesTable, true)
            {
                IsSharedTablePrincipal = false,
            };
            storiesTable.AddTypeMapping(storiesTableMapping, true);
            tableMappings33.Add(storiesTableMapping);
            storiesTable.AddRowInternalForeignKey(credit, RelationalModel.GetForeignKey(this,
                "Ogma3.Data.Stories.Credit",
                new[] { "StoryId" },
                "Ogma3.Data.Stories.Story",
                new[] { "Id" }));

            var story = FindEntityType("Ogma3.Data.Stories.Story")!;

            var defaultTableMappings34 = new List<TableMappingBase<ColumnMappingBase>>();
            story.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings34);
            var ogma3DataStoriesStoryTableBase = new TableBase("Ogma3.Data.Stories.Story", null, relationalModel);
            var authorIdColumnBase2 = new ColumnBase<ColumnMappingBase>("AuthorId", "bigint", ogma3DataStoriesStoryTableBase);
            ogma3DataStoriesStoryTableBase.Columns.Add("AuthorId", authorIdColumnBase2);
            var chapterCountColumnBase = new ColumnBase<ColumnMappingBase>("ChapterCount", "integer", ogma3DataStoriesStoryTableBase);
            ogma3DataStoriesStoryTableBase.Columns.Add("ChapterCount", chapterCountColumnBase);
            var contentBlockIdColumnBase1 = new ColumnBase<ColumnMappingBase>("ContentBlockId", "bigint", ogma3DataStoriesStoryTableBase)
            {
                IsNullable = true
            };
            ogma3DataStoriesStoryTableBase.Columns.Add("ContentBlockId", contentBlockIdColumnBase1);
            var coverColumnBase = new ColumnBase<ColumnMappingBase>("Cover", "text", ogma3DataStoriesStoryTableBase);
            ogma3DataStoriesStoryTableBase.Columns.Add("Cover", coverColumnBase);
            var coverIdColumnBase = new ColumnBase<ColumnMappingBase>("CoverId", "text", ogma3DataStoriesStoryTableBase)
            {
                IsNullable = true
            };
            ogma3DataStoriesStoryTableBase.Columns.Add("CoverId", coverIdColumnBase);
            var creationDateColumnBase4 = new ColumnBase<ColumnMappingBase>("CreationDate", "timestamp with time zone", ogma3DataStoriesStoryTableBase);
            ogma3DataStoriesStoryTableBase.Columns.Add("CreationDate", creationDateColumnBase4);
            var descriptionColumnBase5 = new ColumnBase<ColumnMappingBase>("Description", "character varying(3000)", ogma3DataStoriesStoryTableBase);
            ogma3DataStoriesStoryTableBase.Columns.Add("Description", descriptionColumnBase5);
            var hookColumnBase0 = new ColumnBase<ColumnMappingBase>("Hook", "character varying(250)", ogma3DataStoriesStoryTableBase);
            ogma3DataStoriesStoryTableBase.Columns.Add("Hook", hookColumnBase0);
            var idColumnBase23 = new ColumnBase<ColumnMappingBase>("Id", "bigint", ogma3DataStoriesStoryTableBase);
            ogma3DataStoriesStoryTableBase.Columns.Add("Id", idColumnBase23);
            var publicationDateColumnBase1 = new ColumnBase<ColumnMappingBase>("PublicationDate", "timestamp with time zone", ogma3DataStoriesStoryTableBase)
            {
                IsNullable = true
            };
            ogma3DataStoriesStoryTableBase.Columns.Add("PublicationDate", publicationDateColumnBase1);
            var ratingIdColumnBase0 = new ColumnBase<ColumnMappingBase>("RatingId", "bigint", ogma3DataStoriesStoryTableBase);
            ogma3DataStoriesStoryTableBase.Columns.Add("RatingId", ratingIdColumnBase0);
            var slugColumnBase4 = new ColumnBase<ColumnMappingBase>("Slug", "character varying(100)", ogma3DataStoriesStoryTableBase);
            ogma3DataStoriesStoryTableBase.Columns.Add("Slug", slugColumnBase4);
            var statusColumnBase = new ColumnBase<ColumnMappingBase>("Status", "e_story_status", ogma3DataStoriesStoryTableBase);
            ogma3DataStoriesStoryTableBase.Columns.Add("Status", statusColumnBase);
            var titleColumnBase3 = new ColumnBase<ColumnMappingBase>("Title", "character varying(100)", ogma3DataStoriesStoryTableBase);
            ogma3DataStoriesStoryTableBase.Columns.Add("Title", titleColumnBase3);
            var wordCountColumnBase1 = new ColumnBase<ColumnMappingBase>("WordCount", "integer", ogma3DataStoriesStoryTableBase);
            ogma3DataStoriesStoryTableBase.Columns.Add("WordCount", wordCountColumnBase1);
            relationalModel.DefaultTables.Add("Ogma3.Data.Stories.Story", ogma3DataStoriesStoryTableBase);
            var ogma3DataStoriesStoryMappingBase = new TableMappingBase<ColumnMappingBase>(story, ogma3DataStoriesStoryTableBase, true);
            ogma3DataStoriesStoryTableBase.AddTypeMapping(ogma3DataStoriesStoryMappingBase, false);
            defaultTableMappings34.Add(ogma3DataStoriesStoryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase23, story.FindProperty("Id")!, ogma3DataStoriesStoryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)authorIdColumnBase2, story.FindProperty("AuthorId")!, ogma3DataStoriesStoryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)chapterCountColumnBase, story.FindProperty("ChapterCount")!, ogma3DataStoriesStoryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)contentBlockIdColumnBase1, story.FindProperty("ContentBlockId")!, ogma3DataStoriesStoryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)coverColumnBase, story.FindProperty("Cover")!, ogma3DataStoriesStoryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)coverIdColumnBase, story.FindProperty("CoverId")!, ogma3DataStoriesStoryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)creationDateColumnBase4, story.FindProperty("CreationDate")!, ogma3DataStoriesStoryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)descriptionColumnBase5, story.FindProperty("Description")!, ogma3DataStoriesStoryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)hookColumnBase0, story.FindProperty("Hook")!, ogma3DataStoriesStoryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)publicationDateColumnBase1, story.FindProperty("PublicationDate")!, ogma3DataStoriesStoryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)ratingIdColumnBase0, story.FindProperty("RatingId")!, ogma3DataStoriesStoryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)slugColumnBase4, story.FindProperty("Slug")!, ogma3DataStoriesStoryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)statusColumnBase, story.FindProperty("Status")!, ogma3DataStoriesStoryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)titleColumnBase3, story.FindProperty("Title")!, ogma3DataStoriesStoryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)wordCountColumnBase1, story.FindProperty("WordCount")!, ogma3DataStoriesStoryMappingBase);

            var tableMappings34 = new List<TableMapping>();
            story.SetRuntimeAnnotation("Relational:TableMappings", tableMappings34);
            var storiesTableMapping0 = new TableMapping(story, storiesTable, true)
            {
                IsSharedTablePrincipal = true,
            };
            storiesTable.AddTypeMapping(storiesTableMapping0, false);
            tableMappings34.Add(storiesTableMapping0);
            RelationalModel.CreateColumnMapping(idColumn23, story.FindProperty("Id")!, storiesTableMapping0);
            RelationalModel.CreateColumnMapping(authorIdColumn2, story.FindProperty("AuthorId")!, storiesTableMapping0);
            RelationalModel.CreateColumnMapping(chapterCountColumn, story.FindProperty("ChapterCount")!, storiesTableMapping0);
            RelationalModel.CreateColumnMapping(contentBlockIdColumn1, story.FindProperty("ContentBlockId")!, storiesTableMapping0);
            RelationalModel.CreateColumnMapping(coverColumn, story.FindProperty("Cover")!, storiesTableMapping0);
            RelationalModel.CreateColumnMapping(coverIdColumn, story.FindProperty("CoverId")!, storiesTableMapping0);
            RelationalModel.CreateColumnMapping(creationDateColumn4, story.FindProperty("CreationDate")!, storiesTableMapping0);
            RelationalModel.CreateColumnMapping(descriptionColumn5, story.FindProperty("Description")!, storiesTableMapping0);
            RelationalModel.CreateColumnMapping(hookColumn0, story.FindProperty("Hook")!, storiesTableMapping0);
            RelationalModel.CreateColumnMapping(publicationDateColumn1, story.FindProperty("PublicationDate")!, storiesTableMapping0);
            RelationalModel.CreateColumnMapping(ratingIdColumn0, story.FindProperty("RatingId")!, storiesTableMapping0);
            RelationalModel.CreateColumnMapping(slugColumn4, story.FindProperty("Slug")!, storiesTableMapping0);
            RelationalModel.CreateColumnMapping(statusColumn, story.FindProperty("Status")!, storiesTableMapping0);
            RelationalModel.CreateColumnMapping(titleColumn3, story.FindProperty("Title")!, storiesTableMapping0);
            RelationalModel.CreateColumnMapping(wordCountColumn1, story.FindProperty("WordCount")!, storiesTableMapping0);

            var storyTag = FindEntityType("Ogma3.Data.Stories.StoryTag")!;

            var defaultTableMappings35 = new List<TableMappingBase<ColumnMappingBase>>();
            storyTag.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings35);
            var ogma3DataStoriesStoryTagTableBase = new TableBase("Ogma3.Data.Stories.StoryTag", null, relationalModel);
            var storyIdColumnBase4 = new ColumnBase<ColumnMappingBase>("StoryId", "bigint", ogma3DataStoriesStoryTagTableBase);
            ogma3DataStoriesStoryTagTableBase.Columns.Add("StoryId", storyIdColumnBase4);
            var tagIdColumnBase0 = new ColumnBase<ColumnMappingBase>("TagId", "bigint", ogma3DataStoriesStoryTagTableBase);
            ogma3DataStoriesStoryTagTableBase.Columns.Add("TagId", tagIdColumnBase0);
            relationalModel.DefaultTables.Add("Ogma3.Data.Stories.StoryTag", ogma3DataStoriesStoryTagTableBase);
            var ogma3DataStoriesStoryTagMappingBase = new TableMappingBase<ColumnMappingBase>(storyTag, ogma3DataStoriesStoryTagTableBase, true);
            ogma3DataStoriesStoryTagTableBase.AddTypeMapping(ogma3DataStoriesStoryTagMappingBase, false);
            defaultTableMappings35.Add(ogma3DataStoriesStoryTagMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)storyIdColumnBase4, storyTag.FindProperty("StoryId")!, ogma3DataStoriesStoryTagMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)tagIdColumnBase0, storyTag.FindProperty("TagId")!, ogma3DataStoriesStoryTagMappingBase);

            var tableMappings35 = new List<TableMapping>();
            storyTag.SetRuntimeAnnotation("Relational:TableMappings", tableMappings35);
            var storyTagsTable = new Table("StoryTags", null, relationalModel);
            var storyIdColumn4 = new Column("StoryId", "bigint", storyTagsTable);
            storyTagsTable.Columns.Add("StoryId", storyIdColumn4);
            var tagIdColumn0 = new Column("TagId", "bigint", storyTagsTable);
            storyTagsTable.Columns.Add("TagId", tagIdColumn0);
            var pK_StoryTags = new UniqueConstraint("PK_StoryTags", storyTagsTable, new[] { storyIdColumn4, tagIdColumn0 });
            storyTagsTable.PrimaryKey = pK_StoryTags;
            var pK_StoryTagsUc = RelationalModel.GetKey(this,
                "Ogma3.Data.Stories.StoryTag",
                new[] { "StoryId", "TagId" });
            pK_StoryTags.MappedKeys.Add(pK_StoryTagsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_StoryTagsUc).Add(pK_StoryTags);
            storyTagsTable.UniqueConstraints.Add("PK_StoryTags", pK_StoryTags);
            var iX_StoryTags_TagId = new TableIndex(
            "IX_StoryTags_TagId", storyTagsTable, new[] { tagIdColumn0 }, false);
            var iX_StoryTags_TagIdIx = RelationalModel.GetIndex(this,
                "Ogma3.Data.Stories.StoryTag",
                new[] { "TagId" });
            iX_StoryTags_TagId.MappedIndexes.Add(iX_StoryTags_TagIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_StoryTags_TagIdIx).Add(iX_StoryTags_TagId);
            storyTagsTable.Indexes.Add("IX_StoryTags_TagId", iX_StoryTags_TagId);
            relationalModel.Tables.Add(("StoryTags", null), storyTagsTable);
            var storyTagsTableMapping = new TableMapping(storyTag, storyTagsTable, true);
            storyTagsTable.AddTypeMapping(storyTagsTableMapping, false);
            tableMappings35.Add(storyTagsTableMapping);
            RelationalModel.CreateColumnMapping(storyIdColumn4, storyTag.FindProperty("StoryId")!, storyTagsTableMapping);
            RelationalModel.CreateColumnMapping(tagIdColumn0, storyTag.FindProperty("TagId")!, storyTagsTableMapping);

            var tag = FindEntityType("Ogma3.Data.Tags.Tag")!;

            var defaultTableMappings36 = new List<TableMappingBase<ColumnMappingBase>>();
            tag.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings36);
            var ogma3DataTagsTagTableBase = new TableBase("Ogma3.Data.Tags.Tag", null, relationalModel);
            var descriptionColumnBase6 = new ColumnBase<ColumnMappingBase>("Description", "character varying(100)", ogma3DataTagsTagTableBase)
            {
                IsNullable = true
            };
            ogma3DataTagsTagTableBase.Columns.Add("Description", descriptionColumnBase6);
            var idColumnBase24 = new ColumnBase<ColumnMappingBase>("Id", "bigint", ogma3DataTagsTagTableBase);
            ogma3DataTagsTagTableBase.Columns.Add("Id", idColumnBase24);
            var nameColumnBase6 = new ColumnBase<ColumnMappingBase>("Name", "character varying(20)", ogma3DataTagsTagTableBase);
            ogma3DataTagsTagTableBase.Columns.Add("Name", nameColumnBase6);
            var namespaceColumnBase = new ColumnBase<ColumnMappingBase>("Namespace", "e_tag_namespace", ogma3DataTagsTagTableBase)
            {
                IsNullable = true
            };
            ogma3DataTagsTagTableBase.Columns.Add("Namespace", namespaceColumnBase);
            var slugColumnBase5 = new ColumnBase<ColumnMappingBase>("Slug", "character varying(20)", ogma3DataTagsTagTableBase);
            ogma3DataTagsTagTableBase.Columns.Add("Slug", slugColumnBase5);
            relationalModel.DefaultTables.Add("Ogma3.Data.Tags.Tag", ogma3DataTagsTagTableBase);
            var ogma3DataTagsTagMappingBase = new TableMappingBase<ColumnMappingBase>(tag, ogma3DataTagsTagTableBase, true);
            ogma3DataTagsTagTableBase.AddTypeMapping(ogma3DataTagsTagMappingBase, false);
            defaultTableMappings36.Add(ogma3DataTagsTagMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase24, tag.FindProperty("Id")!, ogma3DataTagsTagMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)descriptionColumnBase6, tag.FindProperty("Description")!, ogma3DataTagsTagMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase6, tag.FindProperty("Name")!, ogma3DataTagsTagMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)namespaceColumnBase, tag.FindProperty("Namespace")!, ogma3DataTagsTagMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)slugColumnBase5, tag.FindProperty("Slug")!, ogma3DataTagsTagMappingBase);

            var tableMappings36 = new List<TableMapping>();
            tag.SetRuntimeAnnotation("Relational:TableMappings", tableMappings36);
            var tagsTable = new Table("Tags", null, relationalModel);
            var idColumn24 = new Column("Id", "bigint", tagsTable);
            tagsTable.Columns.Add("Id", idColumn24);
            idColumn24.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            var descriptionColumn6 = new Column("Description", "character varying(100)", tagsTable)
            {
                IsNullable = true
            };
            tagsTable.Columns.Add("Description", descriptionColumn6);
            var nameColumn6 = new Column("Name", "character varying(20)", tagsTable);
            tagsTable.Columns.Add("Name", nameColumn6);
            var namespaceColumn = new Column("Namespace", "e_tag_namespace", tagsTable)
            {
                IsNullable = true
            };
            tagsTable.Columns.Add("Namespace", namespaceColumn);
            var slugColumn5 = new Column("Slug", "character varying(20)", tagsTable);
            tagsTable.Columns.Add("Slug", slugColumn5);
            var pK_Tags = new UniqueConstraint("PK_Tags", tagsTable, new[] { idColumn24 });
            tagsTable.PrimaryKey = pK_Tags;
            var pK_TagsUc = RelationalModel.GetKey(this,
                "Ogma3.Data.Tags.Tag",
                new[] { "Id" });
            pK_Tags.MappedKeys.Add(pK_TagsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_TagsUc).Add(pK_Tags);
            tagsTable.UniqueConstraints.Add("PK_Tags", pK_Tags);
            var iX_Tags_Name = new TableIndex(
            "IX_Tags_Name", tagsTable, new[] { nameColumn6 }, false);
            var iX_Tags_NameIx = RelationalModel.GetIndex(this,
                "Ogma3.Data.Tags.Tag",
                new[] { "Name" });
            iX_Tags_Name.MappedIndexes.Add(iX_Tags_NameIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Tags_NameIx).Add(iX_Tags_Name);
            tagsTable.Indexes.Add("IX_Tags_Name", iX_Tags_Name);
            var iX_Tags_Name_Namespace = new TableIndex(
            "IX_Tags_Name_Namespace", tagsTable, new[] { nameColumn6, namespaceColumn }, true);
            var iX_Tags_Name_NamespaceIx = RelationalModel.GetIndex(this,
                "Ogma3.Data.Tags.Tag",
                new[] { "Name", "Namespace" });
            iX_Tags_Name_Namespace.MappedIndexes.Add(iX_Tags_Name_NamespaceIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Tags_Name_NamespaceIx).Add(iX_Tags_Name_Namespace);
            tagsTable.Indexes.Add("IX_Tags_Name_Namespace", iX_Tags_Name_Namespace);
            relationalModel.Tables.Add(("Tags", null), tagsTable);
            var tagsTableMapping = new TableMapping(tag, tagsTable, true);
            tagsTable.AddTypeMapping(tagsTableMapping, false);
            tableMappings36.Add(tagsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn24, tag.FindProperty("Id")!, tagsTableMapping);
            RelationalModel.CreateColumnMapping(descriptionColumn6, tag.FindProperty("Description")!, tagsTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn6, tag.FindProperty("Name")!, tagsTableMapping);
            RelationalModel.CreateColumnMapping(namespaceColumn, tag.FindProperty("Namespace")!, tagsTableMapping);
            RelationalModel.CreateColumnMapping(slugColumn5, tag.FindProperty("Slug")!, tagsTableMapping);

            var ogmaUser = FindEntityType("Ogma3.Data.Users.OgmaUser")!;

            var defaultTableMappings37 = new List<TableMappingBase<ColumnMappingBase>>();
            ogmaUser.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings37);
            var ogma3DataUsersOgmaUserTableBase = new TableBase("Ogma3.Data.Users.OgmaUser", null, relationalModel);
            var accessFailedCountColumnBase = new ColumnBase<ColumnMappingBase>("AccessFailedCount", "integer", ogma3DataUsersOgmaUserTableBase);
            ogma3DataUsersOgmaUserTableBase.Columns.Add("AccessFailedCount", accessFailedCountColumnBase);
            var avatarColumnBase = new ColumnBase<ColumnMappingBase>("Avatar", "text", ogma3DataUsersOgmaUserTableBase);
            ogma3DataUsersOgmaUserTableBase.Columns.Add("Avatar", avatarColumnBase);
            var avatarIdColumnBase = new ColumnBase<ColumnMappingBase>("AvatarId", "text", ogma3DataUsersOgmaUserTableBase)
            {
                IsNullable = true
            };
            ogma3DataUsersOgmaUserTableBase.Columns.Add("AvatarId", avatarIdColumnBase);
            var bioColumnBase = new ColumnBase<ColumnMappingBase>("Bio", "character varying(10000)", ogma3DataUsersOgmaUserTableBase)
            {
                IsNullable = true
            };
            ogma3DataUsersOgmaUserTableBase.Columns.Add("Bio", bioColumnBase);
            var concurrencyStampColumnBase0 = new ColumnBase<ColumnMappingBase>("ConcurrencyStamp", "text", ogma3DataUsersOgmaUserTableBase)
            {
                IsNullable = true
            };
            ogma3DataUsersOgmaUserTableBase.Columns.Add("ConcurrencyStamp", concurrencyStampColumnBase0);
            var deletedAtColumnBase0 = new ColumnBase<ColumnMappingBase>("DeletedAt", "timestamp with time zone", ogma3DataUsersOgmaUserTableBase)
            {
                IsNullable = true
            };
            ogma3DataUsersOgmaUserTableBase.Columns.Add("DeletedAt", deletedAtColumnBase0);
            var emailColumnBase = new ColumnBase<ColumnMappingBase>("Email", "character varying(254)", ogma3DataUsersOgmaUserTableBase);
            ogma3DataUsersOgmaUserTableBase.Columns.Add("Email", emailColumnBase);
            var emailConfirmedColumnBase = new ColumnBase<ColumnMappingBase>("EmailConfirmed", "boolean", ogma3DataUsersOgmaUserTableBase);
            ogma3DataUsersOgmaUserTableBase.Columns.Add("EmailConfirmed", emailConfirmedColumnBase);
            var idColumnBase25 = new ColumnBase<ColumnMappingBase>("Id", "bigint", ogma3DataUsersOgmaUserTableBase);
            ogma3DataUsersOgmaUserTableBase.Columns.Add("Id", idColumnBase25);
            var lastActiveColumnBase = new ColumnBase<ColumnMappingBase>("LastActive", "timestamp with time zone", ogma3DataUsersOgmaUserTableBase);
            ogma3DataUsersOgmaUserTableBase.Columns.Add("LastActive", lastActiveColumnBase);
            var linksColumnBase = new ColumnBase<ColumnMappingBase>("Links", "text[]", ogma3DataUsersOgmaUserTableBase);
            ogma3DataUsersOgmaUserTableBase.Columns.Add("Links", linksColumnBase);
            var lockoutEnabledColumnBase = new ColumnBase<ColumnMappingBase>("LockoutEnabled", "boolean", ogma3DataUsersOgmaUserTableBase);
            ogma3DataUsersOgmaUserTableBase.Columns.Add("LockoutEnabled", lockoutEnabledColumnBase);
            var lockoutEndColumnBase = new ColumnBase<ColumnMappingBase>("LockoutEnd", "timestamp with time zone", ogma3DataUsersOgmaUserTableBase)
            {
                IsNullable = true
            };
            ogma3DataUsersOgmaUserTableBase.Columns.Add("LockoutEnd", lockoutEndColumnBase);
            var normalizedEmailColumnBase = new ColumnBase<ColumnMappingBase>("NormalizedEmail", "character varying(254)", ogma3DataUsersOgmaUserTableBase);
            ogma3DataUsersOgmaUserTableBase.Columns.Add("NormalizedEmail", normalizedEmailColumnBase);
            var normalizedUserNameColumnBase = new ColumnBase<ColumnMappingBase>("NormalizedUserName", "character varying(20)", ogma3DataUsersOgmaUserTableBase);
            ogma3DataUsersOgmaUserTableBase.Columns.Add("NormalizedUserName", normalizedUserNameColumnBase);
            var passwordHashColumnBase = new ColumnBase<ColumnMappingBase>("PasswordHash", "text", ogma3DataUsersOgmaUserTableBase)
            {
                IsNullable = true
            };
            ogma3DataUsersOgmaUserTableBase.Columns.Add("PasswordHash", passwordHashColumnBase);
            var registrationDateColumnBase = new ColumnBase<ColumnMappingBase>("RegistrationDate", "timestamp with time zone", ogma3DataUsersOgmaUserTableBase);
            ogma3DataUsersOgmaUserTableBase.Columns.Add("RegistrationDate", registrationDateColumnBase);
            var securityStampColumnBase = new ColumnBase<ColumnMappingBase>("SecurityStamp", "text", ogma3DataUsersOgmaUserTableBase)
            {
                IsNullable = true
            };
            ogma3DataUsersOgmaUserTableBase.Columns.Add("SecurityStamp", securityStampColumnBase);
            var titleColumnBase4 = new ColumnBase<ColumnMappingBase>("Title", "character varying(20)", ogma3DataUsersOgmaUserTableBase)
            {
                IsNullable = true
            };
            ogma3DataUsersOgmaUserTableBase.Columns.Add("Title", titleColumnBase4);
            var twoFactorEnabledColumnBase = new ColumnBase<ColumnMappingBase>("TwoFactorEnabled", "boolean", ogma3DataUsersOgmaUserTableBase);
            ogma3DataUsersOgmaUserTableBase.Columns.Add("TwoFactorEnabled", twoFactorEnabledColumnBase);
            var userNameColumnBase = new ColumnBase<ColumnMappingBase>("UserName", "character varying(20)", ogma3DataUsersOgmaUserTableBase);
            ogma3DataUsersOgmaUserTableBase.Columns.Add("UserName", userNameColumnBase);
            relationalModel.DefaultTables.Add("Ogma3.Data.Users.OgmaUser", ogma3DataUsersOgmaUserTableBase);
            var ogma3DataUsersOgmaUserMappingBase = new TableMappingBase<ColumnMappingBase>(ogmaUser, ogma3DataUsersOgmaUserTableBase, true);
            ogma3DataUsersOgmaUserTableBase.AddTypeMapping(ogma3DataUsersOgmaUserMappingBase, false);
            defaultTableMappings37.Add(ogma3DataUsersOgmaUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase25, ogmaUser.FindProperty("Id")!, ogma3DataUsersOgmaUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)accessFailedCountColumnBase, ogmaUser.FindProperty("AccessFailedCount")!, ogma3DataUsersOgmaUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)avatarColumnBase, ogmaUser.FindProperty("Avatar")!, ogma3DataUsersOgmaUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)avatarIdColumnBase, ogmaUser.FindProperty("AvatarId")!, ogma3DataUsersOgmaUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)bioColumnBase, ogmaUser.FindProperty("Bio")!, ogma3DataUsersOgmaUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)concurrencyStampColumnBase0, ogmaUser.FindProperty("ConcurrencyStamp")!, ogma3DataUsersOgmaUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)deletedAtColumnBase0, ogmaUser.FindProperty("DeletedAt")!, ogma3DataUsersOgmaUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)emailColumnBase, ogmaUser.FindProperty("Email")!, ogma3DataUsersOgmaUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)emailConfirmedColumnBase, ogmaUser.FindProperty("EmailConfirmed")!, ogma3DataUsersOgmaUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)lastActiveColumnBase, ogmaUser.FindProperty("LastActive")!, ogma3DataUsersOgmaUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)linksColumnBase, ogmaUser.FindProperty("Links")!, ogma3DataUsersOgmaUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)lockoutEnabledColumnBase, ogmaUser.FindProperty("LockoutEnabled")!, ogma3DataUsersOgmaUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)lockoutEndColumnBase, ogmaUser.FindProperty("LockoutEnd")!, ogma3DataUsersOgmaUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)normalizedEmailColumnBase, ogmaUser.FindProperty("NormalizedEmail")!, ogma3DataUsersOgmaUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)normalizedUserNameColumnBase, ogmaUser.FindProperty("NormalizedUserName")!, ogma3DataUsersOgmaUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)passwordHashColumnBase, ogmaUser.FindProperty("PasswordHash")!, ogma3DataUsersOgmaUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)registrationDateColumnBase, ogmaUser.FindProperty("RegistrationDate")!, ogma3DataUsersOgmaUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)securityStampColumnBase, ogmaUser.FindProperty("SecurityStamp")!, ogma3DataUsersOgmaUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)titleColumnBase4, ogmaUser.FindProperty("Title")!, ogma3DataUsersOgmaUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)twoFactorEnabledColumnBase, ogmaUser.FindProperty("TwoFactorEnabled")!, ogma3DataUsersOgmaUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)userNameColumnBase, ogmaUser.FindProperty("UserName")!, ogma3DataUsersOgmaUserMappingBase);

            var tableMappings37 = new List<TableMapping>();
            ogmaUser.SetRuntimeAnnotation("Relational:TableMappings", tableMappings37);
            var aspNetUsersTable = new Table("AspNetUsers", null, relationalModel);
            var idColumn25 = new Column("Id", "bigint", aspNetUsersTable);
            aspNetUsersTable.Columns.Add("Id", idColumn25);
            idColumn25.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            var accessFailedCountColumn = new Column("AccessFailedCount", "integer", aspNetUsersTable);
            aspNetUsersTable.Columns.Add("AccessFailedCount", accessFailedCountColumn);
            var avatarColumn = new Column("Avatar", "text", aspNetUsersTable);
            aspNetUsersTable.Columns.Add("Avatar", avatarColumn);
            var avatarIdColumn = new Column("AvatarId", "text", aspNetUsersTable)
            {
                IsNullable = true
            };
            aspNetUsersTable.Columns.Add("AvatarId", avatarIdColumn);
            var bioColumn = new Column("Bio", "character varying(10000)", aspNetUsersTable)
            {
                IsNullable = true
            };
            aspNetUsersTable.Columns.Add("Bio", bioColumn);
            var concurrencyStampColumn0 = new Column("ConcurrencyStamp", "text", aspNetUsersTable)
            {
                IsNullable = true
            };
            aspNetUsersTable.Columns.Add("ConcurrencyStamp", concurrencyStampColumn0);
            var deletedAtColumn0 = new Column("DeletedAt", "timestamp with time zone", aspNetUsersTable)
            {
                IsNullable = true
            };
            aspNetUsersTable.Columns.Add("DeletedAt", deletedAtColumn0);
            var emailColumn = new Column("Email", "character varying(254)", aspNetUsersTable);
            aspNetUsersTable.Columns.Add("Email", emailColumn);
            var emailConfirmedColumn = new Column("EmailConfirmed", "boolean", aspNetUsersTable);
            aspNetUsersTable.Columns.Add("EmailConfirmed", emailConfirmedColumn);
            var lastActiveColumn = new Column("LastActive", "timestamp with time zone", aspNetUsersTable);
            aspNetUsersTable.Columns.Add("LastActive", lastActiveColumn);
            var linksColumn = new Column("Links", "text[]", aspNetUsersTable);
            aspNetUsersTable.Columns.Add("Links", linksColumn);
            var lockoutEnabledColumn = new Column("LockoutEnabled", "boolean", aspNetUsersTable);
            aspNetUsersTable.Columns.Add("LockoutEnabled", lockoutEnabledColumn);
            var lockoutEndColumn = new Column("LockoutEnd", "timestamp with time zone", aspNetUsersTable)
            {
                IsNullable = true
            };
            aspNetUsersTable.Columns.Add("LockoutEnd", lockoutEndColumn);
            var normalizedEmailColumn = new Column("NormalizedEmail", "character varying(254)", aspNetUsersTable);
            aspNetUsersTable.Columns.Add("NormalizedEmail", normalizedEmailColumn);
            var normalizedUserNameColumn = new Column("NormalizedUserName", "character varying(20)", aspNetUsersTable);
            aspNetUsersTable.Columns.Add("NormalizedUserName", normalizedUserNameColumn);
            var passwordHashColumn = new Column("PasswordHash", "text", aspNetUsersTable)
            {
                IsNullable = true
            };
            aspNetUsersTable.Columns.Add("PasswordHash", passwordHashColumn);
            var registrationDateColumn = new Column("RegistrationDate", "timestamp with time zone", aspNetUsersTable);
            aspNetUsersTable.Columns.Add("RegistrationDate", registrationDateColumn);
            var securityStampColumn = new Column("SecurityStamp", "text", aspNetUsersTable)
            {
                IsNullable = true
            };
            aspNetUsersTable.Columns.Add("SecurityStamp", securityStampColumn);
            var titleColumn4 = new Column("Title", "character varying(20)", aspNetUsersTable)
            {
                IsNullable = true
            };
            aspNetUsersTable.Columns.Add("Title", titleColumn4);
            var twoFactorEnabledColumn = new Column("TwoFactorEnabled", "boolean", aspNetUsersTable);
            aspNetUsersTable.Columns.Add("TwoFactorEnabled", twoFactorEnabledColumn);
            var userNameColumn = new Column("UserName", "character varying(20)", aspNetUsersTable);
            aspNetUsersTable.Columns.Add("UserName", userNameColumn);
            var pK_AspNetUsers = new UniqueConstraint("PK_AspNetUsers", aspNetUsersTable, new[] { idColumn25 });
            aspNetUsersTable.PrimaryKey = pK_AspNetUsers;
            var pK_AspNetUsersUc = RelationalModel.GetKey(this,
                "Ogma3.Data.Users.OgmaUser",
                new[] { "Id" });
            pK_AspNetUsers.MappedKeys.Add(pK_AspNetUsersUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_AspNetUsersUc).Add(pK_AspNetUsers);
            aspNetUsersTable.UniqueConstraints.Add("PK_AspNetUsers", pK_AspNetUsers);
            var emailIndex = new TableIndex(
            "EmailIndex", aspNetUsersTable, new[] { normalizedEmailColumn }, false);
            var emailIndexIx = RelationalModel.GetIndex(this,
                "Ogma3.Data.Users.OgmaUser",
                new[] { "NormalizedEmail" });
            emailIndex.MappedIndexes.Add(emailIndexIx);
            RelationalModel.GetOrCreateTableIndexes(emailIndexIx).Add(emailIndex);
            aspNetUsersTable.Indexes.Add("EmailIndex", emailIndex);
            var iX_AspNetUsers_LastActive = new TableIndex(
            "IX_AspNetUsers_LastActive", aspNetUsersTable, new[] { lastActiveColumn }, false);
            var iX_AspNetUsers_LastActiveIx = RelationalModel.GetIndex(this,
                "Ogma3.Data.Users.OgmaUser",
                new[] { "LastActive" });
            iX_AspNetUsers_LastActive.MappedIndexes.Add(iX_AspNetUsers_LastActiveIx);
            RelationalModel.GetOrCreateTableIndexes(iX_AspNetUsers_LastActiveIx).Add(iX_AspNetUsers_LastActive);
            aspNetUsersTable.Indexes.Add("IX_AspNetUsers_LastActive", iX_AspNetUsers_LastActive);
            var userNameIndex = new TableIndex(
            "UserNameIndex", aspNetUsersTable, new[] { normalizedUserNameColumn }, true);
            var userNameIndexIx = RelationalModel.GetIndex(this,
                "Ogma3.Data.Users.OgmaUser",
                new[] { "NormalizedUserName" });
            userNameIndex.MappedIndexes.Add(userNameIndexIx);
            RelationalModel.GetOrCreateTableIndexes(userNameIndexIx).Add(userNameIndex);
            aspNetUsersTable.Indexes.Add("UserNameIndex", userNameIndex);
            relationalModel.Tables.Add(("AspNetUsers", null), aspNetUsersTable);
            var aspNetUsersTableMapping = new TableMapping(ogmaUser, aspNetUsersTable, true);
            aspNetUsersTable.AddTypeMapping(aspNetUsersTableMapping, false);
            tableMappings37.Add(aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(idColumn25, ogmaUser.FindProperty("Id")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(accessFailedCountColumn, ogmaUser.FindProperty("AccessFailedCount")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(avatarColumn, ogmaUser.FindProperty("Avatar")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(avatarIdColumn, ogmaUser.FindProperty("AvatarId")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(bioColumn, ogmaUser.FindProperty("Bio")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(concurrencyStampColumn0, ogmaUser.FindProperty("ConcurrencyStamp")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(deletedAtColumn0, ogmaUser.FindProperty("DeletedAt")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(emailColumn, ogmaUser.FindProperty("Email")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(emailConfirmedColumn, ogmaUser.FindProperty("EmailConfirmed")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(lastActiveColumn, ogmaUser.FindProperty("LastActive")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(linksColumn, ogmaUser.FindProperty("Links")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(lockoutEnabledColumn, ogmaUser.FindProperty("LockoutEnabled")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(lockoutEndColumn, ogmaUser.FindProperty("LockoutEnd")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(normalizedEmailColumn, ogmaUser.FindProperty("NormalizedEmail")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(normalizedUserNameColumn, ogmaUser.FindProperty("NormalizedUserName")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(passwordHashColumn, ogmaUser.FindProperty("PasswordHash")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(registrationDateColumn, ogmaUser.FindProperty("RegistrationDate")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(securityStampColumn, ogmaUser.FindProperty("SecurityStamp")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(titleColumn4, ogmaUser.FindProperty("Title")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(twoFactorEnabledColumn, ogmaUser.FindProperty("TwoFactorEnabled")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(userNameColumn, ogmaUser.FindProperty("UserName")!, aspNetUsersTableMapping);

            var userBlock = FindEntityType("Ogma3.Data.Users.UserBlock")!;

            var defaultTableMappings38 = new List<TableMappingBase<ColumnMappingBase>>();
            userBlock.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings38);
            var ogma3DataUsersUserBlockTableBase = new TableBase("Ogma3.Data.Users.UserBlock", null, relationalModel);
            var blockedUserIdColumnBase = new ColumnBase<ColumnMappingBase>("BlockedUserId", "bigint", ogma3DataUsersUserBlockTableBase);
            ogma3DataUsersUserBlockTableBase.Columns.Add("BlockedUserId", blockedUserIdColumnBase);
            var blockingUserIdColumnBase = new ColumnBase<ColumnMappingBase>("BlockingUserId", "bigint", ogma3DataUsersUserBlockTableBase);
            ogma3DataUsersUserBlockTableBase.Columns.Add("BlockingUserId", blockingUserIdColumnBase);
            relationalModel.DefaultTables.Add("Ogma3.Data.Users.UserBlock", ogma3DataUsersUserBlockTableBase);
            var ogma3DataUsersUserBlockMappingBase = new TableMappingBase<ColumnMappingBase>(userBlock, ogma3DataUsersUserBlockTableBase, true);
            ogma3DataUsersUserBlockTableBase.AddTypeMapping(ogma3DataUsersUserBlockMappingBase, false);
            defaultTableMappings38.Add(ogma3DataUsersUserBlockMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)blockedUserIdColumnBase, userBlock.FindProperty("BlockedUserId")!, ogma3DataUsersUserBlockMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)blockingUserIdColumnBase, userBlock.FindProperty("BlockingUserId")!, ogma3DataUsersUserBlockMappingBase);

            var tableMappings38 = new List<TableMapping>();
            userBlock.SetRuntimeAnnotation("Relational:TableMappings", tableMappings38);
            var blacklistedUsersTable = new Table("BlacklistedUsers", null, relationalModel);
            var blockingUserIdColumn = new Column("BlockingUserId", "bigint", blacklistedUsersTable);
            blacklistedUsersTable.Columns.Add("BlockingUserId", blockingUserIdColumn);
            var blockedUserIdColumn = new Column("BlockedUserId", "bigint", blacklistedUsersTable);
            blacklistedUsersTable.Columns.Add("BlockedUserId", blockedUserIdColumn);
            var pK_BlacklistedUsers = new UniqueConstraint("PK_BlacklistedUsers", blacklistedUsersTable, new[] { blockingUserIdColumn, blockedUserIdColumn });
            blacklistedUsersTable.PrimaryKey = pK_BlacklistedUsers;
            var pK_BlacklistedUsersUc = RelationalModel.GetKey(this,
                "Ogma3.Data.Users.UserBlock",
                new[] { "BlockingUserId", "BlockedUserId" });
            pK_BlacklistedUsers.MappedKeys.Add(pK_BlacklistedUsersUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_BlacklistedUsersUc).Add(pK_BlacklistedUsers);
            blacklistedUsersTable.UniqueConstraints.Add("PK_BlacklistedUsers", pK_BlacklistedUsers);
            var iX_BlacklistedUsers_BlockedUserId = new TableIndex(
            "IX_BlacklistedUsers_BlockedUserId", blacklistedUsersTable, new[] { blockedUserIdColumn }, false);
            var iX_BlacklistedUsers_BlockedUserIdIx = RelationalModel.GetIndex(this,
                "Ogma3.Data.Users.UserBlock",
                new[] { "BlockedUserId" });
            iX_BlacklistedUsers_BlockedUserId.MappedIndexes.Add(iX_BlacklistedUsers_BlockedUserIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_BlacklistedUsers_BlockedUserIdIx).Add(iX_BlacklistedUsers_BlockedUserId);
            blacklistedUsersTable.Indexes.Add("IX_BlacklistedUsers_BlockedUserId", iX_BlacklistedUsers_BlockedUserId);
            relationalModel.Tables.Add(("BlacklistedUsers", null), blacklistedUsersTable);
            var blacklistedUsersTableMapping = new TableMapping(userBlock, blacklistedUsersTable, true);
            blacklistedUsersTable.AddTypeMapping(blacklistedUsersTableMapping, false);
            tableMappings38.Add(blacklistedUsersTableMapping);
            RelationalModel.CreateColumnMapping(blockedUserIdColumn, userBlock.FindProperty("BlockedUserId")!, blacklistedUsersTableMapping);
            RelationalModel.CreateColumnMapping(blockingUserIdColumn, userBlock.FindProperty("BlockingUserId")!, blacklistedUsersTableMapping);

            var userFollow = FindEntityType("Ogma3.Data.Users.UserFollow")!;

            var defaultTableMappings39 = new List<TableMappingBase<ColumnMappingBase>>();
            userFollow.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings39);
            var ogma3DataUsersUserFollowTableBase = new TableBase("Ogma3.Data.Users.UserFollow", null, relationalModel);
            var followedUserIdColumnBase = new ColumnBase<ColumnMappingBase>("FollowedUserId", "bigint", ogma3DataUsersUserFollowTableBase);
            ogma3DataUsersUserFollowTableBase.Columns.Add("FollowedUserId", followedUserIdColumnBase);
            var followingUserIdColumnBase = new ColumnBase<ColumnMappingBase>("FollowingUserId", "bigint", ogma3DataUsersUserFollowTableBase);
            ogma3DataUsersUserFollowTableBase.Columns.Add("FollowingUserId", followingUserIdColumnBase);
            relationalModel.DefaultTables.Add("Ogma3.Data.Users.UserFollow", ogma3DataUsersUserFollowTableBase);
            var ogma3DataUsersUserFollowMappingBase = new TableMappingBase<ColumnMappingBase>(userFollow, ogma3DataUsersUserFollowTableBase, true);
            ogma3DataUsersUserFollowTableBase.AddTypeMapping(ogma3DataUsersUserFollowMappingBase, false);
            defaultTableMappings39.Add(ogma3DataUsersUserFollowMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)followedUserIdColumnBase, userFollow.FindProperty("FollowedUserId")!, ogma3DataUsersUserFollowMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)followingUserIdColumnBase, userFollow.FindProperty("FollowingUserId")!, ogma3DataUsersUserFollowMappingBase);

            var tableMappings39 = new List<TableMapping>();
            userFollow.SetRuntimeAnnotation("Relational:TableMappings", tableMappings39);
            var followedUsersTable = new Table("FollowedUsers", null, relationalModel);
            var followingUserIdColumn = new Column("FollowingUserId", "bigint", followedUsersTable);
            followedUsersTable.Columns.Add("FollowingUserId", followingUserIdColumn);
            var followedUserIdColumn = new Column("FollowedUserId", "bigint", followedUsersTable);
            followedUsersTable.Columns.Add("FollowedUserId", followedUserIdColumn);
            var pK_FollowedUsers = new UniqueConstraint("PK_FollowedUsers", followedUsersTable, new[] { followingUserIdColumn, followedUserIdColumn });
            followedUsersTable.PrimaryKey = pK_FollowedUsers;
            var pK_FollowedUsersUc = RelationalModel.GetKey(this,
                "Ogma3.Data.Users.UserFollow",
                new[] { "FollowingUserId", "FollowedUserId" });
            pK_FollowedUsers.MappedKeys.Add(pK_FollowedUsersUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_FollowedUsersUc).Add(pK_FollowedUsers);
            followedUsersTable.UniqueConstraints.Add("PK_FollowedUsers", pK_FollowedUsers);
            var iX_FollowedUsers_FollowedUserId = new TableIndex(
            "IX_FollowedUsers_FollowedUserId", followedUsersTable, new[] { followedUserIdColumn }, false);
            var iX_FollowedUsers_FollowedUserIdIx = RelationalModel.GetIndex(this,
                "Ogma3.Data.Users.UserFollow",
                new[] { "FollowedUserId" });
            iX_FollowedUsers_FollowedUserId.MappedIndexes.Add(iX_FollowedUsers_FollowedUserIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_FollowedUsers_FollowedUserIdIx).Add(iX_FollowedUsers_FollowedUserId);
            followedUsersTable.Indexes.Add("IX_FollowedUsers_FollowedUserId", iX_FollowedUsers_FollowedUserId);
            relationalModel.Tables.Add(("FollowedUsers", null), followedUsersTable);
            var followedUsersTableMapping = new TableMapping(userFollow, followedUsersTable, true);
            followedUsersTable.AddTypeMapping(followedUsersTableMapping, false);
            tableMappings39.Add(followedUsersTableMapping);
            RelationalModel.CreateColumnMapping(followedUserIdColumn, userFollow.FindProperty("FollowedUserId")!, followedUsersTableMapping);
            RelationalModel.CreateColumnMapping(followingUserIdColumn, userFollow.FindProperty("FollowingUserId")!, followedUsersTableMapping);

            var userRole = FindEntityType("Ogma3.Data.Users.UserRole")!;

            var defaultTableMappings40 = new List<TableMappingBase<ColumnMappingBase>>();
            userRole.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings40);
            var ogma3DataUsersUserRoleTableBase = new TableBase("Ogma3.Data.Users.UserRole", null, relationalModel);
            var roleIdColumnBase0 = new ColumnBase<ColumnMappingBase>("RoleId", "bigint", ogma3DataUsersUserRoleTableBase);
            ogma3DataUsersUserRoleTableBase.Columns.Add("RoleId", roleIdColumnBase0);
            var userIdColumnBase8 = new ColumnBase<ColumnMappingBase>("UserId", "bigint", ogma3DataUsersUserRoleTableBase);
            ogma3DataUsersUserRoleTableBase.Columns.Add("UserId", userIdColumnBase8);
            relationalModel.DefaultTables.Add("Ogma3.Data.Users.UserRole", ogma3DataUsersUserRoleTableBase);
            var ogma3DataUsersUserRoleMappingBase = new TableMappingBase<ColumnMappingBase>(userRole, ogma3DataUsersUserRoleTableBase, true);
            ogma3DataUsersUserRoleTableBase.AddTypeMapping(ogma3DataUsersUserRoleMappingBase, false);
            defaultTableMappings40.Add(ogma3DataUsersUserRoleMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)roleIdColumnBase0, userRole.FindProperty("RoleId")!, ogma3DataUsersUserRoleMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)userIdColumnBase8, userRole.FindProperty("UserId")!, ogma3DataUsersUserRoleMappingBase);

            var tableMappings40 = new List<TableMapping>();
            userRole.SetRuntimeAnnotation("Relational:TableMappings", tableMappings40);
            var aspNetUserRolesTable = new Table("AspNetUserRoles", null, relationalModel);
            var userIdColumn8 = new Column("UserId", "bigint", aspNetUserRolesTable);
            aspNetUserRolesTable.Columns.Add("UserId", userIdColumn8);
            var roleIdColumn0 = new Column("RoleId", "bigint", aspNetUserRolesTable);
            aspNetUserRolesTable.Columns.Add("RoleId", roleIdColumn0);
            var pK_AspNetUserRoles = new UniqueConstraint("PK_AspNetUserRoles", aspNetUserRolesTable, new[] { userIdColumn8, roleIdColumn0 });
            aspNetUserRolesTable.PrimaryKey = pK_AspNetUserRoles;
            var pK_AspNetUserRolesUc = RelationalModel.GetKey(this,
                "Ogma3.Data.Users.UserRole",
                new[] { "UserId", "RoleId" });
            pK_AspNetUserRoles.MappedKeys.Add(pK_AspNetUserRolesUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_AspNetUserRolesUc).Add(pK_AspNetUserRoles);
            aspNetUserRolesTable.UniqueConstraints.Add("PK_AspNetUserRoles", pK_AspNetUserRoles);
            var iX_AspNetUserRoles_RoleId = new TableIndex(
            "IX_AspNetUserRoles_RoleId", aspNetUserRolesTable, new[] { roleIdColumn0 }, false);
            var iX_AspNetUserRoles_RoleIdIx = RelationalModel.GetIndex(this,
                "Ogma3.Data.Users.UserRole",
                new[] { "RoleId" });
            iX_AspNetUserRoles_RoleId.MappedIndexes.Add(iX_AspNetUserRoles_RoleIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_AspNetUserRoles_RoleIdIx).Add(iX_AspNetUserRoles_RoleId);
            aspNetUserRolesTable.Indexes.Add("IX_AspNetUserRoles_RoleId", iX_AspNetUserRoles_RoleId);
            relationalModel.Tables.Add(("AspNetUserRoles", null), aspNetUserRolesTable);
            var aspNetUserRolesTableMapping = new TableMapping(userRole, aspNetUserRolesTable, true);
            aspNetUserRolesTable.AddTypeMapping(aspNetUserRolesTableMapping, false);
            tableMappings40.Add(aspNetUserRolesTableMapping);
            RelationalModel.CreateColumnMapping(roleIdColumn0, userRole.FindProperty("RoleId")!, aspNetUserRolesTableMapping);
            RelationalModel.CreateColumnMapping(userIdColumn8, userRole.FindProperty("UserId")!, aspNetUserRolesTableMapping);

            var vote = FindEntityType("Ogma3.Data.Votes.Vote")!;

            var defaultTableMappings41 = new List<TableMappingBase<ColumnMappingBase>>();
            vote.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings41);
            var ogma3DataVotesVoteTableBase = new TableBase("Ogma3.Data.Votes.Vote", null, relationalModel);
            var idColumnBase26 = new ColumnBase<ColumnMappingBase>("Id", "bigint", ogma3DataVotesVoteTableBase);
            ogma3DataVotesVoteTableBase.Columns.Add("Id", idColumnBase26);
            var storyIdColumnBase5 = new ColumnBase<ColumnMappingBase>("StoryId", "bigint", ogma3DataVotesVoteTableBase);
            ogma3DataVotesVoteTableBase.Columns.Add("StoryId", storyIdColumnBase5);
            var userIdColumnBase9 = new ColumnBase<ColumnMappingBase>("UserId", "bigint", ogma3DataVotesVoteTableBase);
            ogma3DataVotesVoteTableBase.Columns.Add("UserId", userIdColumnBase9);
            relationalModel.DefaultTables.Add("Ogma3.Data.Votes.Vote", ogma3DataVotesVoteTableBase);
            var ogma3DataVotesVoteMappingBase = new TableMappingBase<ColumnMappingBase>(vote, ogma3DataVotesVoteTableBase, true);
            ogma3DataVotesVoteTableBase.AddTypeMapping(ogma3DataVotesVoteMappingBase, false);
            defaultTableMappings41.Add(ogma3DataVotesVoteMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase26, vote.FindProperty("Id")!, ogma3DataVotesVoteMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)storyIdColumnBase5, vote.FindProperty("StoryId")!, ogma3DataVotesVoteMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)userIdColumnBase9, vote.FindProperty("UserId")!, ogma3DataVotesVoteMappingBase);

            var tableMappings41 = new List<TableMapping>();
            vote.SetRuntimeAnnotation("Relational:TableMappings", tableMappings41);
            var votesTable = new Table("Votes", null, relationalModel);
            var idColumn26 = new Column("Id", "bigint", votesTable);
            votesTable.Columns.Add("Id", idColumn26);
            idColumn26.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            var storyIdColumn5 = new Column("StoryId", "bigint", votesTable);
            votesTable.Columns.Add("StoryId", storyIdColumn5);
            var userIdColumn9 = new Column("UserId", "bigint", votesTable);
            votesTable.Columns.Add("UserId", userIdColumn9);
            var pK_Votes = new UniqueConstraint("PK_Votes", votesTable, new[] { idColumn26 });
            votesTable.PrimaryKey = pK_Votes;
            var pK_VotesUc = RelationalModel.GetKey(this,
                "Ogma3.Data.Votes.Vote",
                new[] { "Id" });
            pK_Votes.MappedKeys.Add(pK_VotesUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_VotesUc).Add(pK_Votes);
            votesTable.UniqueConstraints.Add("PK_Votes", pK_Votes);
            var iX_Votes_StoryId = new TableIndex(
            "IX_Votes_StoryId", votesTable, new[] { storyIdColumn5 }, false);
            var iX_Votes_StoryIdIx = RelationalModel.GetIndex(this,
                "Ogma3.Data.Votes.Vote",
                new[] { "StoryId" });
            iX_Votes_StoryId.MappedIndexes.Add(iX_Votes_StoryIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Votes_StoryIdIx).Add(iX_Votes_StoryId);
            votesTable.Indexes.Add("IX_Votes_StoryId", iX_Votes_StoryId);
            var iX_Votes_UserId_StoryId = new TableIndex(
            "IX_Votes_UserId_StoryId", votesTable, new[] { userIdColumn9, storyIdColumn5 }, true);
            var iX_Votes_UserId_StoryIdIx = RelationalModel.GetIndex(this,
                "Ogma3.Data.Votes.Vote",
                new[] { "UserId", "StoryId" });
            iX_Votes_UserId_StoryId.MappedIndexes.Add(iX_Votes_UserId_StoryIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Votes_UserId_StoryIdIx).Add(iX_Votes_UserId_StoryId);
            votesTable.Indexes.Add("IX_Votes_UserId_StoryId", iX_Votes_UserId_StoryId);
            relationalModel.Tables.Add(("Votes", null), votesTable);
            var votesTableMapping = new TableMapping(vote, votesTable, true);
            votesTable.AddTypeMapping(votesTableMapping, false);
            tableMappings41.Add(votesTableMapping);
            RelationalModel.CreateColumnMapping(idColumn26, vote.FindProperty("Id")!, votesTableMapping);
            RelationalModel.CreateColumnMapping(storyIdColumn5, vote.FindProperty("StoryId")!, votesTableMapping);
            RelationalModel.CreateColumnMapping(userIdColumn9, vote.FindProperty("UserId")!, votesTableMapping);
            var fK_AspNetRoleClaims_AspNetRoles_RoleId = new ForeignKeyConstraint(
                "FK_AspNetRoleClaims_AspNetRoles_RoleId", aspNetRoleClaimsTable, aspNetRolesTable,
                new[] { roleIdColumn },
                aspNetRolesTable.FindUniqueConstraint("PK_AspNetRoles")!, ReferentialAction.Cascade);
            var fK_AspNetRoleClaims_AspNetRoles_RoleIdFk = RelationalModel.GetForeignKey(this,
                "Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>",
                new[] { "RoleId" },
                "Ogma3.Data.Roles.OgmaRole",
                new[] { "Id" });
            fK_AspNetRoleClaims_AspNetRoles_RoleId.MappedForeignKeys.Add(fK_AspNetRoleClaims_AspNetRoles_RoleIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_AspNetRoleClaims_AspNetRoles_RoleIdFk).Add(fK_AspNetRoleClaims_AspNetRoles_RoleId);
            aspNetRoleClaimsTable.ForeignKeyConstraints.Add(fK_AspNetRoleClaims_AspNetRoles_RoleId);
            aspNetRolesTable.ReferencingForeignKeyConstraints.Add(fK_AspNetRoleClaims_AspNetRoles_RoleId);
            var fK_AspNetUserClaims_AspNetUsers_UserId = new ForeignKeyConstraint(
                "FK_AspNetUserClaims_AspNetUsers_UserId", aspNetUserClaimsTable, aspNetUsersTable,
                new[] { userIdColumn },
                aspNetUsersTable.FindUniqueConstraint("PK_AspNetUsers")!, ReferentialAction.Cascade);
            var fK_AspNetUserClaims_AspNetUsers_UserIdFk = RelationalModel.GetForeignKey(this,
                "Microsoft.AspNetCore.Identity.IdentityUserClaim<long>",
                new[] { "UserId" },
                "Ogma3.Data.Users.OgmaUser",
                new[] { "Id" });
            fK_AspNetUserClaims_AspNetUsers_UserId.MappedForeignKeys.Add(fK_AspNetUserClaims_AspNetUsers_UserIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_AspNetUserClaims_AspNetUsers_UserIdFk).Add(fK_AspNetUserClaims_AspNetUsers_UserId);
            aspNetUserClaimsTable.ForeignKeyConstraints.Add(fK_AspNetUserClaims_AspNetUsers_UserId);
            aspNetUsersTable.ReferencingForeignKeyConstraints.Add(fK_AspNetUserClaims_AspNetUsers_UserId);
            var fK_AspNetUserLogins_AspNetUsers_UserId = new ForeignKeyConstraint(
                "FK_AspNetUserLogins_AspNetUsers_UserId", aspNetUserLoginsTable, aspNetUsersTable,
                new[] { userIdColumn0 },
                aspNetUsersTable.FindUniqueConstraint("PK_AspNetUsers")!, ReferentialAction.Cascade);
            var fK_AspNetUserLogins_AspNetUsers_UserIdFk = RelationalModel.GetForeignKey(this,
                "Microsoft.AspNetCore.Identity.IdentityUserLogin<long>",
                new[] { "UserId" },
                "Ogma3.Data.Users.OgmaUser",
                new[] { "Id" });
            fK_AspNetUserLogins_AspNetUsers_UserId.MappedForeignKeys.Add(fK_AspNetUserLogins_AspNetUsers_UserIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_AspNetUserLogins_AspNetUsers_UserIdFk).Add(fK_AspNetUserLogins_AspNetUsers_UserId);
            aspNetUserLoginsTable.ForeignKeyConstraints.Add(fK_AspNetUserLogins_AspNetUsers_UserId);
            aspNetUsersTable.ReferencingForeignKeyConstraints.Add(fK_AspNetUserLogins_AspNetUsers_UserId);
            var fK_AspNetUserRoles_AspNetRoles_RoleId = new ForeignKeyConstraint(
                "FK_AspNetUserRoles_AspNetRoles_RoleId", aspNetUserRolesTable, aspNetRolesTable,
                new[] { roleIdColumn0 },
                aspNetRolesTable.FindUniqueConstraint("PK_AspNetRoles")!, ReferentialAction.Cascade);
            var fK_AspNetUserRoles_AspNetRoles_RoleIdFk = RelationalModel.GetForeignKey(this,
                "Ogma3.Data.Users.UserRole",
                new[] { "RoleId" },
                "Ogma3.Data.Roles.OgmaRole",
                new[] { "Id" });
            fK_AspNetUserRoles_AspNetRoles_RoleId.MappedForeignKeys.Add(fK_AspNetUserRoles_AspNetRoles_RoleIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_AspNetUserRoles_AspNetRoles_RoleIdFk).Add(fK_AspNetUserRoles_AspNetRoles_RoleId);
            aspNetUserRolesTable.ForeignKeyConstraints.Add(fK_AspNetUserRoles_AspNetRoles_RoleId);
            aspNetRolesTable.ReferencingForeignKeyConstraints.Add(fK_AspNetUserRoles_AspNetRoles_RoleId);
            var fK_AspNetUserRoles_AspNetUsers_UserId = new ForeignKeyConstraint(
                "FK_AspNetUserRoles_AspNetUsers_UserId", aspNetUserRolesTable, aspNetUsersTable,
                new[] { userIdColumn8 },
                aspNetUsersTable.FindUniqueConstraint("PK_AspNetUsers")!, ReferentialAction.Cascade);
            var fK_AspNetUserRoles_AspNetUsers_UserIdFk = RelationalModel.GetForeignKey(this,
                "Ogma3.Data.Users.UserRole",
                new[] { "UserId" },
                "Ogma3.Data.Users.OgmaUser",
                new[] { "Id" });
            fK_AspNetUserRoles_AspNetUsers_UserId.MappedForeignKeys.Add(fK_AspNetUserRoles_AspNetUsers_UserIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_AspNetUserRoles_AspNetUsers_UserIdFk).Add(fK_AspNetUserRoles_AspNetUsers_UserId);
            aspNetUserRolesTable.ForeignKeyConstraints.Add(fK_AspNetUserRoles_AspNetUsers_UserId);
            aspNetUsersTable.ReferencingForeignKeyConstraints.Add(fK_AspNetUserRoles_AspNetUsers_UserId);
            var fK_AspNetUserTokens_AspNetUsers_UserId = new ForeignKeyConstraint(
                "FK_AspNetUserTokens_AspNetUsers_UserId", aspNetUserTokensTable, aspNetUsersTable,
                new[] { userIdColumn1 },
                aspNetUsersTable.FindUniqueConstraint("PK_AspNetUsers")!, ReferentialAction.Cascade);
            var fK_AspNetUserTokens_AspNetUsers_UserIdFk = RelationalModel.GetForeignKey(this,
                "Microsoft.AspNetCore.Identity.IdentityUserToken<long>",
                new[] { "UserId" },
                "Ogma3.Data.Users.OgmaUser",
                new[] { "Id" });
            fK_AspNetUserTokens_AspNetUsers_UserId.MappedForeignKeys.Add(fK_AspNetUserTokens_AspNetUsers_UserIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_AspNetUserTokens_AspNetUsers_UserIdFk).Add(fK_AspNetUserTokens_AspNetUsers_UserId);
            aspNetUserTokensTable.ForeignKeyConstraints.Add(fK_AspNetUserTokens_AspNetUsers_UserId);
            aspNetUsersTable.ReferencingForeignKeyConstraints.Add(fK_AspNetUserTokens_AspNetUsers_UserId);
            var fK_BlacklistedRatings_AspNetUsers_UserId = new ForeignKeyConstraint(
                "FK_BlacklistedRatings_AspNetUsers_UserId", blacklistedRatingsTable, aspNetUsersTable,
                new[] { userIdColumn2 },
                aspNetUsersTable.FindUniqueConstraint("PK_AspNetUsers")!, ReferentialAction.Cascade);
            var fK_BlacklistedRatings_AspNetUsers_UserIdFk = RelationalModel.GetForeignKey(this,
                "Ogma3.Data.Blacklists.BlacklistedRating",
                new[] { "UserId" },
                "Ogma3.Data.Users.OgmaUser",
                new[] { "Id" });
            fK_BlacklistedRatings_AspNetUsers_UserId.MappedForeignKeys.Add(fK_BlacklistedRatings_AspNetUsers_UserIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_BlacklistedRatings_AspNetUsers_UserIdFk).Add(fK_BlacklistedRatings_AspNetUsers_UserId);
            blacklistedRatingsTable.ForeignKeyConstraints.Add(fK_BlacklistedRatings_AspNetUsers_UserId);
            aspNetUsersTable.ReferencingForeignKeyConstraints.Add(fK_BlacklistedRatings_AspNetUsers_UserId);
            var fK_BlacklistedRatings_Ratings_RatingId = new ForeignKeyConstraint(
                "FK_BlacklistedRatings_Ratings_RatingId", blacklistedRatingsTable, ratingsTable,
                new[] { ratingIdColumn },
                ratingsTable.FindUniqueConstraint("PK_Ratings")!, ReferentialAction.Cascade);
            var fK_BlacklistedRatings_Ratings_RatingIdFk = RelationalModel.GetForeignKey(this,
                "Ogma3.Data.Blacklists.BlacklistedRating",
                new[] { "RatingId" },
                "Ogma3.Data.Ratings.Rating",
                new[] { "Id" });
            fK_BlacklistedRatings_Ratings_RatingId.MappedForeignKeys.Add(fK_BlacklistedRatings_Ratings_RatingIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_BlacklistedRatings_Ratings_RatingIdFk).Add(fK_BlacklistedRatings_Ratings_RatingId);
            blacklistedRatingsTable.ForeignKeyConstraints.Add(fK_BlacklistedRatings_Ratings_RatingId);
            ratingsTable.ReferencingForeignKeyConstraints.Add(fK_BlacklistedRatings_Ratings_RatingId);
            var fK_BlacklistedTags_AspNetUsers_UserId = new ForeignKeyConstraint(
                "FK_BlacklistedTags_AspNetUsers_UserId", blacklistedTagsTable, aspNetUsersTable,
                new[] { userIdColumn3 },
                aspNetUsersTable.FindUniqueConstraint("PK_AspNetUsers")!, ReferentialAction.Cascade);
            var fK_BlacklistedTags_AspNetUsers_UserIdFk = RelationalModel.GetForeignKey(this,
                "Ogma3.Data.Blacklists.BlacklistedTag",
                new[] { "UserId" },
                "Ogma3.Data.Users.OgmaUser",
                new[] { "Id" });
            fK_BlacklistedTags_AspNetUsers_UserId.MappedForeignKeys.Add(fK_BlacklistedTags_AspNetUsers_UserIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_BlacklistedTags_AspNetUsers_UserIdFk).Add(fK_BlacklistedTags_AspNetUsers_UserId);
            blacklistedTagsTable.ForeignKeyConstraints.Add(fK_BlacklistedTags_AspNetUsers_UserId);
            aspNetUsersTable.ReferencingForeignKeyConstraints.Add(fK_BlacklistedTags_AspNetUsers_UserId);
            var fK_BlacklistedTags_Tags_TagId = new ForeignKeyConstraint(
                "FK_BlacklistedTags_Tags_TagId", blacklistedTagsTable, tagsTable,
                new[] { tagIdColumn },
                tagsTable.FindUniqueConstraint("PK_Tags")!, ReferentialAction.Cascade);
            var fK_BlacklistedTags_Tags_TagIdFk = RelationalModel.GetForeignKey(this,
                "Ogma3.Data.Blacklists.BlacklistedTag",
                new[] { "TagId" },
                "Ogma3.Data.Tags.Tag",
                new[] { "Id" });
            fK_BlacklistedTags_Tags_TagId.MappedForeignKeys.Add(fK_BlacklistedTags_Tags_TagIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_BlacklistedTags_Tags_TagIdFk).Add(fK_BlacklistedTags_Tags_TagId);
            blacklistedTagsTable.ForeignKeyConstraints.Add(fK_BlacklistedTags_Tags_TagId);
            tagsTable.ReferencingForeignKeyConstraints.Add(fK_BlacklistedTags_Tags_TagId);
            var fK_BlacklistedUsers_AspNetUsers_BlockedUserId = new ForeignKeyConstraint(
                "FK_BlacklistedUsers_AspNetUsers_BlockedUserId", blacklistedUsersTable, aspNetUsersTable,
                new[] { blockedUserIdColumn },
                aspNetUsersTable.FindUniqueConstraint("PK_AspNetUsers")!, ReferentialAction.Cascade);
            var fK_BlacklistedUsers_AspNetUsers_BlockedUserIdFk = RelationalModel.GetForeignKey(this,
                "Ogma3.Data.Users.UserBlock",
                new[] { "BlockedUserId" },
                "Ogma3.Data.Users.OgmaUser",
                new[] { "Id" });
            fK_BlacklistedUsers_AspNetUsers_BlockedUserId.MappedForeignKeys.Add(fK_BlacklistedUsers_AspNetUsers_BlockedUserIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_BlacklistedUsers_AspNetUsers_BlockedUserIdFk).Add(fK_BlacklistedUsers_AspNetUsers_BlockedUserId);
            blacklistedUsersTable.ForeignKeyConstraints.Add(fK_BlacklistedUsers_AspNetUsers_BlockedUserId);
            aspNetUsersTable.ReferencingForeignKeyConstraints.Add(fK_BlacklistedUsers_AspNetUsers_BlockedUserId);
            var fK_BlacklistedUsers_AspNetUsers_BlockingUserId = new ForeignKeyConstraint(
                "FK_BlacklistedUsers_AspNetUsers_BlockingUserId", blacklistedUsersTable, aspNetUsersTable,
                new[] { blockingUserIdColumn },
                aspNetUsersTable.FindUniqueConstraint("PK_AspNetUsers")!, ReferentialAction.Cascade);
            var fK_BlacklistedUsers_AspNetUsers_BlockingUserIdFk = RelationalModel.GetForeignKey(this,
                "Ogma3.Data.Users.UserBlock",
                new[] { "BlockingUserId" },
                "Ogma3.Data.Users.OgmaUser",
                new[] { "Id" });
            fK_BlacklistedUsers_AspNetUsers_BlockingUserId.MappedForeignKeys.Add(fK_BlacklistedUsers_AspNetUsers_BlockingUserIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_BlacklistedUsers_AspNetUsers_BlockingUserIdFk).Add(fK_BlacklistedUsers_AspNetUsers_BlockingUserId);
            blacklistedUsersTable.ForeignKeyConstraints.Add(fK_BlacklistedUsers_AspNetUsers_BlockingUserId);
            aspNetUsersTable.ReferencingForeignKeyConstraints.Add(fK_BlacklistedUsers_AspNetUsers_BlockingUserId);
            var fK_Blogposts_AspNetUsers_AuthorId = new ForeignKeyConstraint(
                "FK_Blogposts_AspNetUsers_AuthorId", blogpostsTable, aspNetUsersTable,
                new[] { authorIdColumn },
                aspNetUsersTable.FindUniqueConstraint("PK_AspNetUsers")!, ReferentialAction.Cascade);
            var fK_Blogposts_AspNetUsers_AuthorIdFk = RelationalModel.GetForeignKey(this,
                "Ogma3.Data.Blogposts.Blogpost",
                new[] { "AuthorId" },
                "Ogma3.Data.Users.OgmaUser",
                new[] { "Id" });
            fK_Blogposts_AspNetUsers_AuthorId.MappedForeignKeys.Add(fK_Blogposts_AspNetUsers_AuthorIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Blogposts_AspNetUsers_AuthorIdFk).Add(fK_Blogposts_AspNetUsers_AuthorId);
            blogpostsTable.ForeignKeyConstraints.Add(fK_Blogposts_AspNetUsers_AuthorId);
            aspNetUsersTable.ReferencingForeignKeyConstraints.Add(fK_Blogposts_AspNetUsers_AuthorId);
            var fK_Blogposts_Chapters_AttachedChapterId = new ForeignKeyConstraint(
                "FK_Blogposts_Chapters_AttachedChapterId", blogpostsTable, chaptersTable,
                new[] { attachedChapterIdColumn },
                chaptersTable.FindUniqueConstraint("PK_Chapters")!, ReferentialAction.SetNull);
            var fK_Blogposts_Chapters_AttachedChapterIdFk = RelationalModel.GetForeignKey(this,
                "Ogma3.Data.Blogposts.Blogpost",
                new[] { "AttachedChapterId" },
                "Ogma3.Data.Chapters.Chapter",
                new[] { "Id" });
            fK_Blogposts_Chapters_AttachedChapterId.MappedForeignKeys.Add(fK_Blogposts_Chapters_AttachedChapterIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Blogposts_Chapters_AttachedChapterIdFk).Add(fK_Blogposts_Chapters_AttachedChapterId);
            blogpostsTable.ForeignKeyConstraints.Add(fK_Blogposts_Chapters_AttachedChapterId);
            chaptersTable.ReferencingForeignKeyConstraints.Add(fK_Blogposts_Chapters_AttachedChapterId);
            var fK_Blogposts_ContentBlocks_ContentBlockId = new ForeignKeyConstraint(
                "FK_Blogposts_ContentBlocks_ContentBlockId", blogpostsTable, contentBlocksTable,
                new[] { contentBlockIdColumn },
                contentBlocksTable.FindUniqueConstraint("PK_ContentBlocks")!, ReferentialAction.NoAction);
            var fK_Blogposts_ContentBlocks_ContentBlockIdFk = RelationalModel.GetForeignKey(this,
                "Ogma3.Data.Blogposts.Blogpost",
                new[] { "ContentBlockId" },
                "Ogma3.Data.Blacklists.ContentBlock",
                new[] { "Id" });
            fK_Blogposts_ContentBlocks_ContentBlockId.MappedForeignKeys.Add(fK_Blogposts_ContentBlocks_ContentBlockIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Blogposts_ContentBlocks_ContentBlockIdFk).Add(fK_Blogposts_ContentBlocks_ContentBlockId);
            blogpostsTable.ForeignKeyConstraints.Add(fK_Blogposts_ContentBlocks_ContentBlockId);
            contentBlocksTable.ReferencingForeignKeyConstraints.Add(fK_Blogposts_ContentBlocks_ContentBlockId);
            var fK_Blogposts_Stories_AttachedStoryId = new ForeignKeyConstraint(
                "FK_Blogposts_Stories_AttachedStoryId", blogpostsTable, storiesTable,
                new[] { attachedStoryIdColumn },
                storiesTable.FindUniqueConstraint("PK_Stories")!, ReferentialAction.SetNull);
            var fK_Blogposts_Stories_AttachedStoryIdFk = RelationalModel.GetForeignKey(this,
                "Ogma3.Data.Blogposts.Blogpost",
                new[] { "AttachedStoryId" },
                "Ogma3.Data.Stories.Story",
                new[] { "Id" });
            fK_Blogposts_Stories_AttachedStoryId.MappedForeignKeys.Add(fK_Blogposts_Stories_AttachedStoryIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Blogposts_Stories_AttachedStoryIdFk).Add(fK_Blogposts_Stories_AttachedStoryId);
            blogpostsTable.ForeignKeyConstraints.Add(fK_Blogposts_Stories_AttachedStoryId);
            storiesTable.ReferencingForeignKeyConstraints.Add(fK_Blogposts_Stories_AttachedStoryId);
            var fK_Chapters_ContentBlocks_ContentBlockId = new ForeignKeyConstraint(
                "FK_Chapters_ContentBlocks_ContentBlockId", chaptersTable, contentBlocksTable,
                new[] { contentBlockIdColumn0 },
                contentBlocksTable.FindUniqueConstraint("PK_ContentBlocks")!, ReferentialAction.NoAction);
            var fK_Chapters_ContentBlocks_ContentBlockIdFk = RelationalModel.GetForeignKey(this,
                "Ogma3.Data.Chapters.Chapter",
                new[] { "ContentBlockId" },
                "Ogma3.Data.Blacklists.ContentBlock",
                new[] { "Id" });
            fK_Chapters_ContentBlocks_ContentBlockId.MappedForeignKeys.Add(fK_Chapters_ContentBlocks_ContentBlockIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Chapters_ContentBlocks_ContentBlockIdFk).Add(fK_Chapters_ContentBlocks_ContentBlockId);
            chaptersTable.ForeignKeyConstraints.Add(fK_Chapters_ContentBlocks_ContentBlockId);
            contentBlocksTable.ReferencingForeignKeyConstraints.Add(fK_Chapters_ContentBlocks_ContentBlockId);
            var fK_Chapters_Stories_StoryId = new ForeignKeyConstraint(
                "FK_Chapters_Stories_StoryId", chaptersTable, storiesTable,
                new[] { storyIdColumn },
                storiesTable.FindUniqueConstraint("PK_Stories")!, ReferentialAction.Cascade);
            var fK_Chapters_Stories_StoryIdFk = RelationalModel.GetForeignKey(this,
                "Ogma3.Data.Chapters.Chapter",
                new[] { "StoryId" },
                "Ogma3.Data.Stories.Story",
                new[] { "Id" });
            fK_Chapters_Stories_StoryId.MappedForeignKeys.Add(fK_Chapters_Stories_StoryIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Chapters_Stories_StoryIdFk).Add(fK_Chapters_Stories_StoryId);
            chaptersTable.ForeignKeyConstraints.Add(fK_Chapters_Stories_StoryId);
            storiesTable.ReferencingForeignKeyConstraints.Add(fK_Chapters_Stories_StoryId);
            var fK_ChaptersRead_AspNetUsers_UserId = new ForeignKeyConstraint(
                "FK_ChaptersRead_AspNetUsers_UserId", chaptersReadTable, aspNetUsersTable,
                new[] { userIdColumn4 },
                aspNetUsersTable.FindUniqueConstraint("PK_AspNetUsers")!, ReferentialAction.Cascade);
            var fK_ChaptersRead_AspNetUsers_UserIdFk = RelationalModel.GetForeignKey(this,
                "Ogma3.Data.Chapters.ChaptersRead",
                new[] { "UserId" },
                "Ogma3.Data.Users.OgmaUser",
                new[] { "Id" });
            fK_ChaptersRead_AspNetUsers_UserId.MappedForeignKeys.Add(fK_ChaptersRead_AspNetUsers_UserIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_ChaptersRead_AspNetUsers_UserIdFk).Add(fK_ChaptersRead_AspNetUsers_UserId);
            chaptersReadTable.ForeignKeyConstraints.Add(fK_ChaptersRead_AspNetUsers_UserId);
            aspNetUsersTable.ReferencingForeignKeyConstraints.Add(fK_ChaptersRead_AspNetUsers_UserId);
            var fK_ChaptersRead_Stories_StoryId = new ForeignKeyConstraint(
                "FK_ChaptersRead_Stories_StoryId", chaptersReadTable, storiesTable,
                new[] { storyIdColumn0 },
                storiesTable.FindUniqueConstraint("PK_Stories")!, ReferentialAction.Cascade);
            var fK_ChaptersRead_Stories_StoryIdFk = RelationalModel.GetForeignKey(this,
                "Ogma3.Data.Chapters.ChaptersRead",
                new[] { "StoryId" },
                "Ogma3.Data.Stories.Story",
                new[] { "Id" });
            fK_ChaptersRead_Stories_StoryId.MappedForeignKeys.Add(fK_ChaptersRead_Stories_StoryIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_ChaptersRead_Stories_StoryIdFk).Add(fK_ChaptersRead_Stories_StoryId);
            chaptersReadTable.ForeignKeyConstraints.Add(fK_ChaptersRead_Stories_StoryId);
            storiesTable.ReferencingForeignKeyConstraints.Add(fK_ChaptersRead_Stories_StoryId);
            var fK_ClubMembers_AspNetUsers_MemberId = new ForeignKeyConstraint(
                "FK_ClubMembers_AspNetUsers_MemberId", clubMembersTable, aspNetUsersTable,
                new[] { memberIdColumn },
                aspNetUsersTable.FindUniqueConstraint("PK_AspNetUsers")!, ReferentialAction.Cascade);
            var fK_ClubMembers_AspNetUsers_MemberIdFk = RelationalModel.GetForeignKey(this,
                "Ogma3.Data.Clubs.ClubMember",
                new[] { "MemberId" },
                "Ogma3.Data.Users.OgmaUser",
                new[] { "Id" });
            fK_ClubMembers_AspNetUsers_MemberId.MappedForeignKeys.Add(fK_ClubMembers_AspNetUsers_MemberIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_ClubMembers_AspNetUsers_MemberIdFk).Add(fK_ClubMembers_AspNetUsers_MemberId);
            clubMembersTable.ForeignKeyConstraints.Add(fK_ClubMembers_AspNetUsers_MemberId);
            aspNetUsersTable.ReferencingForeignKeyConstraints.Add(fK_ClubMembers_AspNetUsers_MemberId);
            var fK_ClubMembers_Clubs_ClubId = new ForeignKeyConstraint(
                "FK_ClubMembers_Clubs_ClubId", clubMembersTable, clubsTable,
                new[] { clubIdColumn1 },
                clubsTable.FindUniqueConstraint("PK_Clubs")!, ReferentialAction.Cascade);
            var fK_ClubMembers_Clubs_ClubIdFk = RelationalModel.GetForeignKey(this,
                "Ogma3.Data.Clubs.ClubMember",
                new[] { "ClubId" },
                "Ogma3.Data.Clubs.Club",
                new[] { "Id" });
            fK_ClubMembers_Clubs_ClubId.MappedForeignKeys.Add(fK_ClubMembers_Clubs_ClubIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_ClubMembers_Clubs_ClubIdFk).Add(fK_ClubMembers_Clubs_ClubId);
            clubMembersTable.ForeignKeyConstraints.Add(fK_ClubMembers_Clubs_ClubId);
            clubsTable.ReferencingForeignKeyConstraints.Add(fK_ClubMembers_Clubs_ClubId);
            var fK_ClubModeratorActions_AspNetUsers_ModeratorId = new ForeignKeyConstraint(
                "FK_ClubModeratorActions_AspNetUsers_ModeratorId", clubModeratorActionsTable, aspNetUsersTable,
                new[] { moderatorIdColumn },
                aspNetUsersTable.FindUniqueConstraint("PK_AspNetUsers")!, ReferentialAction.SetNull);
            var fK_ClubModeratorActions_AspNetUsers_ModeratorIdFk = RelationalModel.GetForeignKey(this,
                "Ogma3.Data.ClubModeratorActions.ClubModeratorAction",
                new[] { "ModeratorId" },
                "Ogma3.Data.Users.OgmaUser",
                new[] { "Id" });
            fK_ClubModeratorActions_AspNetUsers_ModeratorId.MappedForeignKeys.Add(fK_ClubModeratorActions_AspNetUsers_ModeratorIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_ClubModeratorActions_AspNetUsers_ModeratorIdFk).Add(fK_ClubModeratorActions_AspNetUsers_ModeratorId);
            clubModeratorActionsTable.ForeignKeyConstraints.Add(fK_ClubModeratorActions_AspNetUsers_ModeratorId);
            aspNetUsersTable.ReferencingForeignKeyConstraints.Add(fK_ClubModeratorActions_AspNetUsers_ModeratorId);
            var fK_ClubModeratorActions_Clubs_ModeratorId = new ForeignKeyConstraint(
                "FK_ClubModeratorActions_Clubs_ModeratorId", clubModeratorActionsTable, clubsTable,
                new[] { moderatorIdColumn },
                clubsTable.FindUniqueConstraint("PK_Clubs")!, ReferentialAction.Cascade);
            var fK_ClubModeratorActions_Clubs_ModeratorIdFk = RelationalModel.GetForeignKey(this,
                "Ogma3.Data.ClubModeratorActions.ClubModeratorAction",
                new[] { "ModeratorId" },
                "Ogma3.Data.Clubs.Club",
                new[] { "Id" });
            fK_ClubModeratorActions_Clubs_ModeratorId.MappedForeignKeys.Add(fK_ClubModeratorActions_Clubs_ModeratorIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_ClubModeratorActions_Clubs_ModeratorIdFk).Add(fK_ClubModeratorActions_Clubs_ModeratorId);
            clubModeratorActionsTable.ForeignKeyConstraints.Add(fK_ClubModeratorActions_Clubs_ModeratorId);
            clubsTable.ReferencingForeignKeyConstraints.Add(fK_ClubModeratorActions_Clubs_ModeratorId);
            var fK_ClubThreads_AspNetUsers_AuthorId = new ForeignKeyConstraint(
                "FK_ClubThreads_AspNetUsers_AuthorId", clubThreadsTable, aspNetUsersTable,
                new[] { authorIdColumn0 },
                aspNetUsersTable.FindUniqueConstraint("PK_AspNetUsers")!, ReferentialAction.SetNull);
            var fK_ClubThreads_AspNetUsers_AuthorIdFk = RelationalModel.GetForeignKey(this,
                "Ogma3.Data.ClubThreads.ClubThread",
                new[] { "AuthorId" },
                "Ogma3.Data.Users.OgmaUser",
                new[] { "Id" });
            fK_ClubThreads_AspNetUsers_AuthorId.MappedForeignKeys.Add(fK_ClubThreads_AspNetUsers_AuthorIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_ClubThreads_AspNetUsers_AuthorIdFk).Add(fK_ClubThreads_AspNetUsers_AuthorId);
            clubThreadsTable.ForeignKeyConstraints.Add(fK_ClubThreads_AspNetUsers_AuthorId);
            aspNetUsersTable.ReferencingForeignKeyConstraints.Add(fK_ClubThreads_AspNetUsers_AuthorId);
            var fK_ClubThreads_Clubs_ClubId = new ForeignKeyConstraint(
                "FK_ClubThreads_Clubs_ClubId", clubThreadsTable, clubsTable,
                new[] { clubIdColumn0 },
                clubsTable.FindUniqueConstraint("PK_Clubs")!, ReferentialAction.Cascade);
            var fK_ClubThreads_Clubs_ClubIdFk = RelationalModel.GetForeignKey(this,
                "Ogma3.Data.ClubThreads.ClubThread",
                new[] { "ClubId" },
                "Ogma3.Data.Clubs.Club",
                new[] { "Id" });
            fK_ClubThreads_Clubs_ClubId.MappedForeignKeys.Add(fK_ClubThreads_Clubs_ClubIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_ClubThreads_Clubs_ClubIdFk).Add(fK_ClubThreads_Clubs_ClubId);
            clubThreadsTable.ForeignKeyConstraints.Add(fK_ClubThreads_Clubs_ClubId);
            clubsTable.ReferencingForeignKeyConstraints.Add(fK_ClubThreads_Clubs_ClubId);
            var fK_CommentRevisions_Comments_ParentId = new ForeignKeyConstraint(
                "FK_CommentRevisions_Comments_ParentId", commentRevisionsTable, commentsTable,
                new[] { parentIdColumn },
                commentsTable.FindUniqueConstraint("PK_Comments")!, ReferentialAction.Cascade);
            var fK_CommentRevisions_Comments_ParentIdFk = RelationalModel.GetForeignKey(this,
                "Ogma3.Data.Comments.CommentRevision",
                new[] { "ParentId" },
                "Ogma3.Data.Comments.Comment",
                new[] { "Id" });
            fK_CommentRevisions_Comments_ParentId.MappedForeignKeys.Add(fK_CommentRevisions_Comments_ParentIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_CommentRevisions_Comments_ParentIdFk).Add(fK_CommentRevisions_Comments_ParentId);
            commentRevisionsTable.ForeignKeyConstraints.Add(fK_CommentRevisions_Comments_ParentId);
            commentsTable.ReferencingForeignKeyConstraints.Add(fK_CommentRevisions_Comments_ParentId);
            var fK_Comments_AspNetUsers_AuthorId = new ForeignKeyConstraint(
                "FK_Comments_AspNetUsers_AuthorId", commentsTable, aspNetUsersTable,
                new[] { authorIdColumn1 },
                aspNetUsersTable.FindUniqueConstraint("PK_AspNetUsers")!, ReferentialAction.Cascade);
            var fK_Comments_AspNetUsers_AuthorIdFk = RelationalModel.GetForeignKey(this,
                "Ogma3.Data.Comments.Comment",
                new[] { "AuthorId" },
                "Ogma3.Data.Users.OgmaUser",
                new[] { "Id" });
            fK_Comments_AspNetUsers_AuthorId.MappedForeignKeys.Add(fK_Comments_AspNetUsers_AuthorIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Comments_AspNetUsers_AuthorIdFk).Add(fK_Comments_AspNetUsers_AuthorId);
            commentsTable.ForeignKeyConstraints.Add(fK_Comments_AspNetUsers_AuthorId);
            aspNetUsersTable.ReferencingForeignKeyConstraints.Add(fK_Comments_AspNetUsers_AuthorId);
            var fK_Comments_AspNetUsers_DeletedByUserId = new ForeignKeyConstraint(
                "FK_Comments_AspNetUsers_DeletedByUserId", commentsTable, aspNetUsersTable,
                new[] { deletedByUserIdColumn },
                aspNetUsersTable.FindUniqueConstraint("PK_AspNetUsers")!, ReferentialAction.NoAction);
            var fK_Comments_AspNetUsers_DeletedByUserIdFk = RelationalModel.GetForeignKey(this,
                "Ogma3.Data.Comments.Comment",
                new[] { "DeletedByUserId" },
                "Ogma3.Data.Users.OgmaUser",
                new[] { "Id" });
            fK_Comments_AspNetUsers_DeletedByUserId.MappedForeignKeys.Add(fK_Comments_AspNetUsers_DeletedByUserIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Comments_AspNetUsers_DeletedByUserIdFk).Add(fK_Comments_AspNetUsers_DeletedByUserId);
            commentsTable.ForeignKeyConstraints.Add(fK_Comments_AspNetUsers_DeletedByUserId);
            aspNetUsersTable.ReferencingForeignKeyConstraints.Add(fK_Comments_AspNetUsers_DeletedByUserId);
            var fK_Comments_CommentThreads_CommentsThreadId = new ForeignKeyConstraint(
                "FK_Comments_CommentThreads_CommentsThreadId", commentsTable, commentThreadsTable,
                new[] { commentsThreadIdColumn },
                commentThreadsTable.FindUniqueConstraint("PK_CommentThreads")!, ReferentialAction.Cascade);
            var fK_Comments_CommentThreads_CommentsThreadIdFk = RelationalModel.GetForeignKey(this,
                "Ogma3.Data.Comments.Comment",
                new[] { "CommentsThreadId" },
                "Ogma3.Data.CommentsThreads.CommentsThread",
                new[] { "Id" });
            fK_Comments_CommentThreads_CommentsThreadId.MappedForeignKeys.Add(fK_Comments_CommentThreads_CommentsThreadIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Comments_CommentThreads_CommentsThreadIdFk).Add(fK_Comments_CommentThreads_CommentsThreadId);
            commentsTable.ForeignKeyConstraints.Add(fK_Comments_CommentThreads_CommentsThreadId);
            commentThreadsTable.ReferencingForeignKeyConstraints.Add(fK_Comments_CommentThreads_CommentsThreadId);
            var fK_CommentsThreadSubscribers_AspNetUsers_OgmaUserId = new ForeignKeyConstraint(
                "FK_CommentsThreadSubscribers_AspNetUsers_OgmaUserId", commentsThreadSubscribersTable, aspNetUsersTable,
                new[] { ogmaUserIdColumn },
                aspNetUsersTable.FindUniqueConstraint("PK_AspNetUsers")!, ReferentialAction.Cascade);
            var fK_CommentsThreadSubscribers_AspNetUsers_OgmaUserIdFk = RelationalModel.GetForeignKey(this,
                "Ogma3.Data.CommentsThreads.CommentsThreadSubscriber",
                new[] { "OgmaUserId" },
                "Ogma3.Data.Users.OgmaUser",
                new[] { "Id" });
            fK_CommentsThreadSubscribers_AspNetUsers_OgmaUserId.MappedForeignKeys.Add(fK_CommentsThreadSubscribers_AspNetUsers_OgmaUserIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_CommentsThreadSubscribers_AspNetUsers_OgmaUserIdFk).Add(fK_CommentsThreadSubscribers_AspNetUsers_OgmaUserId);
            commentsThreadSubscribersTable.ForeignKeyConstraints.Add(fK_CommentsThreadSubscribers_AspNetUsers_OgmaUserId);
            aspNetUsersTable.ReferencingForeignKeyConstraints.Add(fK_CommentsThreadSubscribers_AspNetUsers_OgmaUserId);
            var fK_CommentsThreadSubscribers_CommentThreads_CommentsThreadId = new ForeignKeyConstraint(
                "FK_CommentsThreadSubscribers_CommentThreads_CommentsThreadId", commentsThreadSubscribersTable, commentThreadsTable,
                new[] { commentsThreadIdColumn0 },
                commentThreadsTable.FindUniqueConstraint("PK_CommentThreads")!, ReferentialAction.Cascade);
            var fK_CommentsThreadSubscribers_CommentThreads_CommentsThreadIdFk = RelationalModel.GetForeignKey(this,
                "Ogma3.Data.CommentsThreads.CommentsThreadSubscriber",
                new[] { "CommentsThreadId" },
                "Ogma3.Data.CommentsThreads.CommentsThread",
                new[] { "Id" });
            fK_CommentsThreadSubscribers_CommentThreads_CommentsThreadId.MappedForeignKeys.Add(fK_CommentsThreadSubscribers_CommentThreads_CommentsThreadIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_CommentsThreadSubscribers_CommentThreads_CommentsThreadIdFk).Add(fK_CommentsThreadSubscribers_CommentThreads_CommentsThreadId);
            commentsThreadSubscribersTable.ForeignKeyConstraints.Add(fK_CommentsThreadSubscribers_CommentThreads_CommentsThreadId);
            commentThreadsTable.ReferencingForeignKeyConstraints.Add(fK_CommentsThreadSubscribers_CommentThreads_CommentsThreadId);
            var fK_CommentThreads_AspNetUsers_UserId = new ForeignKeyConstraint(
                "FK_CommentThreads_AspNetUsers_UserId", commentThreadsTable, aspNetUsersTable,
                new[] { userIdColumn5 },
                aspNetUsersTable.FindUniqueConstraint("PK_AspNetUsers")!, ReferentialAction.Cascade);
            var fK_CommentThreads_AspNetUsers_UserIdFk = RelationalModel.GetForeignKey(this,
                "Ogma3.Data.CommentsThreads.CommentsThread",
                new[] { "UserId" },
                "Ogma3.Data.Users.OgmaUser",
                new[] { "Id" });
            fK_CommentThreads_AspNetUsers_UserId.MappedForeignKeys.Add(fK_CommentThreads_AspNetUsers_UserIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_CommentThreads_AspNetUsers_UserIdFk).Add(fK_CommentThreads_AspNetUsers_UserId);
            commentThreadsTable.ForeignKeyConstraints.Add(fK_CommentThreads_AspNetUsers_UserId);
            aspNetUsersTable.ReferencingForeignKeyConstraints.Add(fK_CommentThreads_AspNetUsers_UserId);
            var fK_CommentThreads_Blogposts_BlogpostId = new ForeignKeyConstraint(
                "FK_CommentThreads_Blogposts_BlogpostId", commentThreadsTable, blogpostsTable,
                new[] { blogpostIdColumn },
                blogpostsTable.FindUniqueConstraint("PK_Blogposts")!, ReferentialAction.Cascade);
            var fK_CommentThreads_Blogposts_BlogpostIdFk = RelationalModel.GetForeignKey(this,
                "Ogma3.Data.CommentsThreads.CommentsThread",
                new[] { "BlogpostId" },
                "Ogma3.Data.Blogposts.Blogpost",
                new[] { "Id" });
            fK_CommentThreads_Blogposts_BlogpostId.MappedForeignKeys.Add(fK_CommentThreads_Blogposts_BlogpostIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_CommentThreads_Blogposts_BlogpostIdFk).Add(fK_CommentThreads_Blogposts_BlogpostId);
            commentThreadsTable.ForeignKeyConstraints.Add(fK_CommentThreads_Blogposts_BlogpostId);
            blogpostsTable.ReferencingForeignKeyConstraints.Add(fK_CommentThreads_Blogposts_BlogpostId);
            var fK_CommentThreads_Chapters_ChapterId = new ForeignKeyConstraint(
                "FK_CommentThreads_Chapters_ChapterId", commentThreadsTable, chaptersTable,
                new[] { chapterIdColumn },
                chaptersTable.FindUniqueConstraint("PK_Chapters")!, ReferentialAction.Cascade);
            var fK_CommentThreads_Chapters_ChapterIdFk = RelationalModel.GetForeignKey(this,
                "Ogma3.Data.CommentsThreads.CommentsThread",
                new[] { "ChapterId" },
                "Ogma3.Data.Chapters.Chapter",
                new[] { "Id" });
            fK_CommentThreads_Chapters_ChapterId.MappedForeignKeys.Add(fK_CommentThreads_Chapters_ChapterIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_CommentThreads_Chapters_ChapterIdFk).Add(fK_CommentThreads_Chapters_ChapterId);
            commentThreadsTable.ForeignKeyConstraints.Add(fK_CommentThreads_Chapters_ChapterId);
            chaptersTable.ReferencingForeignKeyConstraints.Add(fK_CommentThreads_Chapters_ChapterId);
            var fK_CommentThreads_ClubThreads_ClubThreadId = new ForeignKeyConstraint(
                "FK_CommentThreads_ClubThreads_ClubThreadId", commentThreadsTable, clubThreadsTable,
                new[] { clubThreadIdColumn },
                clubThreadsTable.FindUniqueConstraint("PK_ClubThreads")!, ReferentialAction.Cascade);
            var fK_CommentThreads_ClubThreads_ClubThreadIdFk = RelationalModel.GetForeignKey(this,
                "Ogma3.Data.CommentsThreads.CommentsThread",
                new[] { "ClubThreadId" },
                "Ogma3.Data.ClubThreads.ClubThread",
                new[] { "Id" });
            fK_CommentThreads_ClubThreads_ClubThreadId.MappedForeignKeys.Add(fK_CommentThreads_ClubThreads_ClubThreadIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_CommentThreads_ClubThreads_ClubThreadIdFk).Add(fK_CommentThreads_ClubThreads_ClubThreadId);
            commentThreadsTable.ForeignKeyConstraints.Add(fK_CommentThreads_ClubThreads_ClubThreadId);
            clubThreadsTable.ReferencingForeignKeyConstraints.Add(fK_CommentThreads_ClubThreads_ClubThreadId);
            var fK_ContentBlocks_AspNetUsers_IssuerId = new ForeignKeyConstraint(
                "FK_ContentBlocks_AspNetUsers_IssuerId", contentBlocksTable, aspNetUsersTable,
                new[] { issuerIdColumn },
                aspNetUsersTable.FindUniqueConstraint("PK_AspNetUsers")!, ReferentialAction.Cascade);
            var fK_ContentBlocks_AspNetUsers_IssuerIdFk = RelationalModel.GetForeignKey(this,
                "Ogma3.Data.Blacklists.ContentBlock",
                new[] { "IssuerId" },
                "Ogma3.Data.Users.OgmaUser",
                new[] { "Id" });
            fK_ContentBlocks_AspNetUsers_IssuerId.MappedForeignKeys.Add(fK_ContentBlocks_AspNetUsers_IssuerIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_ContentBlocks_AspNetUsers_IssuerIdFk).Add(fK_ContentBlocks_AspNetUsers_IssuerId);
            contentBlocksTable.ForeignKeyConstraints.Add(fK_ContentBlocks_AspNetUsers_IssuerId);
            aspNetUsersTable.ReferencingForeignKeyConstraints.Add(fK_ContentBlocks_AspNetUsers_IssuerId);
            var fK_Folders_Clubs_ClubId = new ForeignKeyConstraint(
                "FK_Folders_Clubs_ClubId", foldersTable, clubsTable,
                new[] { clubIdColumn2 },
                clubsTable.FindUniqueConstraint("PK_Clubs")!, ReferentialAction.Cascade);
            var fK_Folders_Clubs_ClubIdFk = RelationalModel.GetForeignKey(this,
                "Ogma3.Data.Folders.Folder",
                new[] { "ClubId" },
                "Ogma3.Data.Clubs.Club",
                new[] { "Id" });
            fK_Folders_Clubs_ClubId.MappedForeignKeys.Add(fK_Folders_Clubs_ClubIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Folders_Clubs_ClubIdFk).Add(fK_Folders_Clubs_ClubId);
            foldersTable.ForeignKeyConstraints.Add(fK_Folders_Clubs_ClubId);
            clubsTable.ReferencingForeignKeyConstraints.Add(fK_Folders_Clubs_ClubId);
            var fK_Folders_Folders_ParentFolderId = new ForeignKeyConstraint(
                "FK_Folders_Folders_ParentFolderId", foldersTable, foldersTable,
                new[] { parentFolderIdColumn },
                foldersTable.FindUniqueConstraint("PK_Folders")!, ReferentialAction.SetNull);
            var fK_Folders_Folders_ParentFolderIdFk = RelationalModel.GetForeignKey(this,
                "Ogma3.Data.Folders.Folder",
                new[] { "ParentFolderId" },
                "Ogma3.Data.Folders.Folder",
                new[] { "Id" });
            fK_Folders_Folders_ParentFolderId.MappedForeignKeys.Add(fK_Folders_Folders_ParentFolderIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Folders_Folders_ParentFolderIdFk).Add(fK_Folders_Folders_ParentFolderId);
            foldersTable.ForeignKeyConstraints.Add(fK_Folders_Folders_ParentFolderId);
            foldersTable.ReferencingForeignKeyConstraints.Add(fK_Folders_Folders_ParentFolderId);
            var fK_FolderStories_AspNetUsers_AddedById = new ForeignKeyConstraint(
                "FK_FolderStories_AspNetUsers_AddedById", folderStoriesTable, aspNetUsersTable,
                new[] { addedByIdColumn },
                aspNetUsersTable.FindUniqueConstraint("PK_AspNetUsers")!, ReferentialAction.Cascade);
            var fK_FolderStories_AspNetUsers_AddedByIdFk = RelationalModel.GetForeignKey(this,
                "Ogma3.Data.Folders.FolderStory",
                new[] { "AddedById" },
                "Ogma3.Data.Users.OgmaUser",
                new[] { "Id" });
            fK_FolderStories_AspNetUsers_AddedById.MappedForeignKeys.Add(fK_FolderStories_AspNetUsers_AddedByIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_FolderStories_AspNetUsers_AddedByIdFk).Add(fK_FolderStories_AspNetUsers_AddedById);
            folderStoriesTable.ForeignKeyConstraints.Add(fK_FolderStories_AspNetUsers_AddedById);
            aspNetUsersTable.ReferencingForeignKeyConstraints.Add(fK_FolderStories_AspNetUsers_AddedById);
            var fK_FolderStories_Folders_FolderId = new ForeignKeyConstraint(
                "FK_FolderStories_Folders_FolderId", folderStoriesTable, foldersTable,
                new[] { folderIdColumn },
                foldersTable.FindUniqueConstraint("PK_Folders")!, ReferentialAction.Cascade);
            var fK_FolderStories_Folders_FolderIdFk = RelationalModel.GetForeignKey(this,
                "Ogma3.Data.Folders.FolderStory",
                new[] { "FolderId" },
                "Ogma3.Data.Folders.Folder",
                new[] { "Id" });
            fK_FolderStories_Folders_FolderId.MappedForeignKeys.Add(fK_FolderStories_Folders_FolderIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_FolderStories_Folders_FolderIdFk).Add(fK_FolderStories_Folders_FolderId);
            folderStoriesTable.ForeignKeyConstraints.Add(fK_FolderStories_Folders_FolderId);
            foldersTable.ReferencingForeignKeyConstraints.Add(fK_FolderStories_Folders_FolderId);
            var fK_FolderStories_Stories_StoryId = new ForeignKeyConstraint(
                "FK_FolderStories_Stories_StoryId", folderStoriesTable, storiesTable,
                new[] { storyIdColumn1 },
                storiesTable.FindUniqueConstraint("PK_Stories")!, ReferentialAction.Cascade);
            var fK_FolderStories_Stories_StoryIdFk = RelationalModel.GetForeignKey(this,
                "Ogma3.Data.Folders.FolderStory",
                new[] { "StoryId" },
                "Ogma3.Data.Stories.Story",
                new[] { "Id" });
            fK_FolderStories_Stories_StoryId.MappedForeignKeys.Add(fK_FolderStories_Stories_StoryIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_FolderStories_Stories_StoryIdFk).Add(fK_FolderStories_Stories_StoryId);
            folderStoriesTable.ForeignKeyConstraints.Add(fK_FolderStories_Stories_StoryId);
            storiesTable.ReferencingForeignKeyConstraints.Add(fK_FolderStories_Stories_StoryId);
            var fK_FollowedUsers_AspNetUsers_FollowedUserId = new ForeignKeyConstraint(
                "FK_FollowedUsers_AspNetUsers_FollowedUserId", followedUsersTable, aspNetUsersTable,
                new[] { followedUserIdColumn },
                aspNetUsersTable.FindUniqueConstraint("PK_AspNetUsers")!, ReferentialAction.Cascade);
            var fK_FollowedUsers_AspNetUsers_FollowedUserIdFk = RelationalModel.GetForeignKey(this,
                "Ogma3.Data.Users.UserFollow",
                new[] { "FollowedUserId" },
                "Ogma3.Data.Users.OgmaUser",
                new[] { "Id" });
            fK_FollowedUsers_AspNetUsers_FollowedUserId.MappedForeignKeys.Add(fK_FollowedUsers_AspNetUsers_FollowedUserIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_FollowedUsers_AspNetUsers_FollowedUserIdFk).Add(fK_FollowedUsers_AspNetUsers_FollowedUserId);
            followedUsersTable.ForeignKeyConstraints.Add(fK_FollowedUsers_AspNetUsers_FollowedUserId);
            aspNetUsersTable.ReferencingForeignKeyConstraints.Add(fK_FollowedUsers_AspNetUsers_FollowedUserId);
            var fK_FollowedUsers_AspNetUsers_FollowingUserId = new ForeignKeyConstraint(
                "FK_FollowedUsers_AspNetUsers_FollowingUserId", followedUsersTable, aspNetUsersTable,
                new[] { followingUserIdColumn },
                aspNetUsersTable.FindUniqueConstraint("PK_AspNetUsers")!, ReferentialAction.Cascade);
            var fK_FollowedUsers_AspNetUsers_FollowingUserIdFk = RelationalModel.GetForeignKey(this,
                "Ogma3.Data.Users.UserFollow",
                new[] { "FollowingUserId" },
                "Ogma3.Data.Users.OgmaUser",
                new[] { "Id" });
            fK_FollowedUsers_AspNetUsers_FollowingUserId.MappedForeignKeys.Add(fK_FollowedUsers_AspNetUsers_FollowingUserIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_FollowedUsers_AspNetUsers_FollowingUserIdFk).Add(fK_FollowedUsers_AspNetUsers_FollowingUserId);
            followedUsersTable.ForeignKeyConstraints.Add(fK_FollowedUsers_AspNetUsers_FollowingUserId);
            aspNetUsersTable.ReferencingForeignKeyConstraints.Add(fK_FollowedUsers_AspNetUsers_FollowingUserId);
            var fK_Infractions_AspNetUsers_IssuedById = new ForeignKeyConstraint(
                "FK_Infractions_AspNetUsers_IssuedById", infractionsTable, aspNetUsersTable,
                new[] { issuedByIdColumn },
                aspNetUsersTable.FindUniqueConstraint("PK_AspNetUsers")!, ReferentialAction.Cascade);
            var fK_Infractions_AspNetUsers_IssuedByIdFk = RelationalModel.GetForeignKey(this,
                "Ogma3.Data.Infractions.Infraction",
                new[] { "IssuedById" },
                "Ogma3.Data.Users.OgmaUser",
                new[] { "Id" });
            fK_Infractions_AspNetUsers_IssuedById.MappedForeignKeys.Add(fK_Infractions_AspNetUsers_IssuedByIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Infractions_AspNetUsers_IssuedByIdFk).Add(fK_Infractions_AspNetUsers_IssuedById);
            infractionsTable.ForeignKeyConstraints.Add(fK_Infractions_AspNetUsers_IssuedById);
            aspNetUsersTable.ReferencingForeignKeyConstraints.Add(fK_Infractions_AspNetUsers_IssuedById);
            var fK_Infractions_AspNetUsers_RemovedById = new ForeignKeyConstraint(
                "FK_Infractions_AspNetUsers_RemovedById", infractionsTable, aspNetUsersTable,
                new[] { removedByIdColumn },
                aspNetUsersTable.FindUniqueConstraint("PK_AspNetUsers")!, ReferentialAction.NoAction);
            var fK_Infractions_AspNetUsers_RemovedByIdFk = RelationalModel.GetForeignKey(this,
                "Ogma3.Data.Infractions.Infraction",
                new[] { "RemovedById" },
                "Ogma3.Data.Users.OgmaUser",
                new[] { "Id" });
            fK_Infractions_AspNetUsers_RemovedById.MappedForeignKeys.Add(fK_Infractions_AspNetUsers_RemovedByIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Infractions_AspNetUsers_RemovedByIdFk).Add(fK_Infractions_AspNetUsers_RemovedById);
            infractionsTable.ForeignKeyConstraints.Add(fK_Infractions_AspNetUsers_RemovedById);
            aspNetUsersTable.ReferencingForeignKeyConstraints.Add(fK_Infractions_AspNetUsers_RemovedById);
            var fK_Infractions_AspNetUsers_UserId = new ForeignKeyConstraint(
                "FK_Infractions_AspNetUsers_UserId", infractionsTable, aspNetUsersTable,
                new[] { userIdColumn6 },
                aspNetUsersTable.FindUniqueConstraint("PK_AspNetUsers")!, ReferentialAction.Cascade);
            var fK_Infractions_AspNetUsers_UserIdFk = RelationalModel.GetForeignKey(this,
                "Ogma3.Data.Infractions.Infraction",
                new[] { "UserId" },
                "Ogma3.Data.Users.OgmaUser",
                new[] { "Id" });
            fK_Infractions_AspNetUsers_UserId.MappedForeignKeys.Add(fK_Infractions_AspNetUsers_UserIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Infractions_AspNetUsers_UserIdFk).Add(fK_Infractions_AspNetUsers_UserId);
            infractionsTable.ForeignKeyConstraints.Add(fK_Infractions_AspNetUsers_UserId);
            aspNetUsersTable.ReferencingForeignKeyConstraints.Add(fK_Infractions_AspNetUsers_UserId);
            var fK_InviteCodes_AspNetUsers_IssuedById = new ForeignKeyConstraint(
                "FK_InviteCodes_AspNetUsers_IssuedById", inviteCodesTable, aspNetUsersTable,
                new[] { issuedByIdColumn0 },
                aspNetUsersTable.FindUniqueConstraint("PK_AspNetUsers")!, ReferentialAction.Cascade);
            var fK_InviteCodes_AspNetUsers_IssuedByIdFk = RelationalModel.GetForeignKey(this,
                "Ogma3.Data.InviteCodes.InviteCode",
                new[] { "IssuedById" },
                "Ogma3.Data.Users.OgmaUser",
                new[] { "Id" });
            fK_InviteCodes_AspNetUsers_IssuedById.MappedForeignKeys.Add(fK_InviteCodes_AspNetUsers_IssuedByIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_InviteCodes_AspNetUsers_IssuedByIdFk).Add(fK_InviteCodes_AspNetUsers_IssuedById);
            inviteCodesTable.ForeignKeyConstraints.Add(fK_InviteCodes_AspNetUsers_IssuedById);
            aspNetUsersTable.ReferencingForeignKeyConstraints.Add(fK_InviteCodes_AspNetUsers_IssuedById);
            var fK_InviteCodes_AspNetUsers_UsedById = new ForeignKeyConstraint(
                "FK_InviteCodes_AspNetUsers_UsedById", inviteCodesTable, aspNetUsersTable,
                new[] { usedByIdColumn },
                aspNetUsersTable.FindUniqueConstraint("PK_AspNetUsers")!, ReferentialAction.Cascade);
            var fK_InviteCodes_AspNetUsers_UsedByIdFk = RelationalModel.GetForeignKey(this,
                "Ogma3.Data.InviteCodes.InviteCode",
                new[] { "UsedById" },
                "Ogma3.Data.Users.OgmaUser",
                new[] { "Id" });
            fK_InviteCodes_AspNetUsers_UsedById.MappedForeignKeys.Add(fK_InviteCodes_AspNetUsers_UsedByIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_InviteCodes_AspNetUsers_UsedByIdFk).Add(fK_InviteCodes_AspNetUsers_UsedById);
            inviteCodesTable.ForeignKeyConstraints.Add(fK_InviteCodes_AspNetUsers_UsedById);
            aspNetUsersTable.ReferencingForeignKeyConstraints.Add(fK_InviteCodes_AspNetUsers_UsedById);
            var fK_ModeratorActions_AspNetUsers_StaffMemberId = new ForeignKeyConstraint(
                "FK_ModeratorActions_AspNetUsers_StaffMemberId", moderatorActionsTable, aspNetUsersTable,
                new[] { staffMemberIdColumn },
                aspNetUsersTable.FindUniqueConstraint("PK_AspNetUsers")!, ReferentialAction.SetNull);
            var fK_ModeratorActions_AspNetUsers_StaffMemberIdFk = RelationalModel.GetForeignKey(this,
                "Ogma3.Data.ModeratorActions.ModeratorAction",
                new[] { "StaffMemberId" },
                "Ogma3.Data.Users.OgmaUser",
                new[] { "Id" });
            fK_ModeratorActions_AspNetUsers_StaffMemberId.MappedForeignKeys.Add(fK_ModeratorActions_AspNetUsers_StaffMemberIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_ModeratorActions_AspNetUsers_StaffMemberIdFk).Add(fK_ModeratorActions_AspNetUsers_StaffMemberId);
            moderatorActionsTable.ForeignKeyConstraints.Add(fK_ModeratorActions_AspNetUsers_StaffMemberId);
            aspNetUsersTable.ReferencingForeignKeyConstraints.Add(fK_ModeratorActions_AspNetUsers_StaffMemberId);
            var fK_NotificationRecipients_AspNetUsers_RecipientId = new ForeignKeyConstraint(
                "FK_NotificationRecipients_AspNetUsers_RecipientId", notificationRecipientsTable, aspNetUsersTable,
                new[] { recipientIdColumn },
                aspNetUsersTable.FindUniqueConstraint("PK_AspNetUsers")!, ReferentialAction.Cascade);
            var fK_NotificationRecipients_AspNetUsers_RecipientIdFk = RelationalModel.GetForeignKey(this,
                "Ogma3.Data.Notifications.NotificationRecipients",
                new[] { "RecipientId" },
                "Ogma3.Data.Users.OgmaUser",
                new[] { "Id" });
            fK_NotificationRecipients_AspNetUsers_RecipientId.MappedForeignKeys.Add(fK_NotificationRecipients_AspNetUsers_RecipientIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_NotificationRecipients_AspNetUsers_RecipientIdFk).Add(fK_NotificationRecipients_AspNetUsers_RecipientId);
            notificationRecipientsTable.ForeignKeyConstraints.Add(fK_NotificationRecipients_AspNetUsers_RecipientId);
            aspNetUsersTable.ReferencingForeignKeyConstraints.Add(fK_NotificationRecipients_AspNetUsers_RecipientId);
            var fK_NotificationRecipients_Notifications_NotificationId = new ForeignKeyConstraint(
                "FK_NotificationRecipients_Notifications_NotificationId", notificationRecipientsTable, notificationsTable,
                new[] { notificationIdColumn },
                notificationsTable.FindUniqueConstraint("PK_Notifications")!, ReferentialAction.Cascade);
            var fK_NotificationRecipients_Notifications_NotificationIdFk = RelationalModel.GetForeignKey(this,
                "Ogma3.Data.Notifications.NotificationRecipients",
                new[] { "NotificationId" },
                "Ogma3.Data.Notifications.Notification",
                new[] { "Id" });
            fK_NotificationRecipients_Notifications_NotificationId.MappedForeignKeys.Add(fK_NotificationRecipients_Notifications_NotificationIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_NotificationRecipients_Notifications_NotificationIdFk).Add(fK_NotificationRecipients_Notifications_NotificationId);
            notificationRecipientsTable.ForeignKeyConstraints.Add(fK_NotificationRecipients_Notifications_NotificationId);
            notificationsTable.ReferencingForeignKeyConstraints.Add(fK_NotificationRecipients_Notifications_NotificationId);
            var fK_Reports_AspNetUsers_ReporterId = new ForeignKeyConstraint(
                "FK_Reports_AspNetUsers_ReporterId", reportsTable, aspNetUsersTable,
                new[] { reporterIdColumn },
                aspNetUsersTable.FindUniqueConstraint("PK_AspNetUsers")!, ReferentialAction.Cascade);
            var fK_Reports_AspNetUsers_ReporterIdFk = RelationalModel.GetForeignKey(this,
                "Ogma3.Data.Reports.Report",
                new[] { "ReporterId" },
                "Ogma3.Data.Users.OgmaUser",
                new[] { "Id" });
            fK_Reports_AspNetUsers_ReporterId.MappedForeignKeys.Add(fK_Reports_AspNetUsers_ReporterIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Reports_AspNetUsers_ReporterIdFk).Add(fK_Reports_AspNetUsers_ReporterId);
            reportsTable.ForeignKeyConstraints.Add(fK_Reports_AspNetUsers_ReporterId);
            aspNetUsersTable.ReferencingForeignKeyConstraints.Add(fK_Reports_AspNetUsers_ReporterId);
            var fK_Reports_AspNetUsers_UserId = new ForeignKeyConstraint(
                "FK_Reports_AspNetUsers_UserId", reportsTable, aspNetUsersTable,
                new[] { userIdColumn7 },
                aspNetUsersTable.FindUniqueConstraint("PK_AspNetUsers")!, ReferentialAction.Cascade);
            var fK_Reports_AspNetUsers_UserIdFk = RelationalModel.GetForeignKey(this,
                "Ogma3.Data.Reports.Report",
                new[] { "UserId" },
                "Ogma3.Data.Users.OgmaUser",
                new[] { "Id" });
            fK_Reports_AspNetUsers_UserId.MappedForeignKeys.Add(fK_Reports_AspNetUsers_UserIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Reports_AspNetUsers_UserIdFk).Add(fK_Reports_AspNetUsers_UserId);
            reportsTable.ForeignKeyConstraints.Add(fK_Reports_AspNetUsers_UserId);
            aspNetUsersTable.ReferencingForeignKeyConstraints.Add(fK_Reports_AspNetUsers_UserId);
            var fK_Reports_Blogposts_BlogpostId = new ForeignKeyConstraint(
                "FK_Reports_Blogposts_BlogpostId", reportsTable, blogpostsTable,
                new[] { blogpostIdColumn0 },
                blogpostsTable.FindUniqueConstraint("PK_Blogposts")!, ReferentialAction.Cascade);
            var fK_Reports_Blogposts_BlogpostIdFk = RelationalModel.GetForeignKey(this,
                "Ogma3.Data.Reports.Report",
                new[] { "BlogpostId" },
                "Ogma3.Data.Blogposts.Blogpost",
                new[] { "Id" });
            fK_Reports_Blogposts_BlogpostId.MappedForeignKeys.Add(fK_Reports_Blogposts_BlogpostIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Reports_Blogposts_BlogpostIdFk).Add(fK_Reports_Blogposts_BlogpostId);
            reportsTable.ForeignKeyConstraints.Add(fK_Reports_Blogposts_BlogpostId);
            blogpostsTable.ReferencingForeignKeyConstraints.Add(fK_Reports_Blogposts_BlogpostId);
            var fK_Reports_Chapters_ChapterId = new ForeignKeyConstraint(
                "FK_Reports_Chapters_ChapterId", reportsTable, chaptersTable,
                new[] { chapterIdColumn0 },
                chaptersTable.FindUniqueConstraint("PK_Chapters")!, ReferentialAction.Cascade);
            var fK_Reports_Chapters_ChapterIdFk = RelationalModel.GetForeignKey(this,
                "Ogma3.Data.Reports.Report",
                new[] { "ChapterId" },
                "Ogma3.Data.Chapters.Chapter",
                new[] { "Id" });
            fK_Reports_Chapters_ChapterId.MappedForeignKeys.Add(fK_Reports_Chapters_ChapterIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Reports_Chapters_ChapterIdFk).Add(fK_Reports_Chapters_ChapterId);
            reportsTable.ForeignKeyConstraints.Add(fK_Reports_Chapters_ChapterId);
            chaptersTable.ReferencingForeignKeyConstraints.Add(fK_Reports_Chapters_ChapterId);
            var fK_Reports_Clubs_ClubId = new ForeignKeyConstraint(
                "FK_Reports_Clubs_ClubId", reportsTable, clubsTable,
                new[] { clubIdColumn3 },
                clubsTable.FindUniqueConstraint("PK_Clubs")!, ReferentialAction.Cascade);
            var fK_Reports_Clubs_ClubIdFk = RelationalModel.GetForeignKey(this,
                "Ogma3.Data.Reports.Report",
                new[] { "ClubId" },
                "Ogma3.Data.Clubs.Club",
                new[] { "Id" });
            fK_Reports_Clubs_ClubId.MappedForeignKeys.Add(fK_Reports_Clubs_ClubIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Reports_Clubs_ClubIdFk).Add(fK_Reports_Clubs_ClubId);
            reportsTable.ForeignKeyConstraints.Add(fK_Reports_Clubs_ClubId);
            clubsTable.ReferencingForeignKeyConstraints.Add(fK_Reports_Clubs_ClubId);
            var fK_Reports_Comments_CommentId = new ForeignKeyConstraint(
                "FK_Reports_Comments_CommentId", reportsTable, commentsTable,
                new[] { commentIdColumn },
                commentsTable.FindUniqueConstraint("PK_Comments")!, ReferentialAction.Cascade);
            var fK_Reports_Comments_CommentIdFk = RelationalModel.GetForeignKey(this,
                "Ogma3.Data.Reports.Report",
                new[] { "CommentId" },
                "Ogma3.Data.Comments.Comment",
                new[] { "Id" });
            fK_Reports_Comments_CommentId.MappedForeignKeys.Add(fK_Reports_Comments_CommentIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Reports_Comments_CommentIdFk).Add(fK_Reports_Comments_CommentId);
            reportsTable.ForeignKeyConstraints.Add(fK_Reports_Comments_CommentId);
            commentsTable.ReferencingForeignKeyConstraints.Add(fK_Reports_Comments_CommentId);
            var fK_Reports_Stories_StoryId = new ForeignKeyConstraint(
                "FK_Reports_Stories_StoryId", reportsTable, storiesTable,
                new[] { storyIdColumn2 },
                storiesTable.FindUniqueConstraint("PK_Stories")!, ReferentialAction.Cascade);
            var fK_Reports_Stories_StoryIdFk = RelationalModel.GetForeignKey(this,
                "Ogma3.Data.Reports.Report",
                new[] { "StoryId" },
                "Ogma3.Data.Stories.Story",
                new[] { "Id" });
            fK_Reports_Stories_StoryId.MappedForeignKeys.Add(fK_Reports_Stories_StoryIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Reports_Stories_StoryIdFk).Add(fK_Reports_Stories_StoryId);
            reportsTable.ForeignKeyConstraints.Add(fK_Reports_Stories_StoryId);
            storiesTable.ReferencingForeignKeyConstraints.Add(fK_Reports_Stories_StoryId);
            var fK_ShelfStories_Shelves_ShelfId = new ForeignKeyConstraint(
                "FK_ShelfStories_Shelves_ShelfId", shelfStoriesTable, shelvesTable,
                new[] { shelfIdColumn },
                shelvesTable.FindUniqueConstraint("PK_Shelves")!, ReferentialAction.Cascade);
            var fK_ShelfStories_Shelves_ShelfIdFk = RelationalModel.GetForeignKey(this,
                "Ogma3.Data.Shelves.ShelfStory",
                new[] { "ShelfId" },
                "Ogma3.Data.Shelves.Shelf",
                new[] { "Id" });
            fK_ShelfStories_Shelves_ShelfId.MappedForeignKeys.Add(fK_ShelfStories_Shelves_ShelfIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_ShelfStories_Shelves_ShelfIdFk).Add(fK_ShelfStories_Shelves_ShelfId);
            shelfStoriesTable.ForeignKeyConstraints.Add(fK_ShelfStories_Shelves_ShelfId);
            shelvesTable.ReferencingForeignKeyConstraints.Add(fK_ShelfStories_Shelves_ShelfId);
            var fK_ShelfStories_Stories_StoryId = new ForeignKeyConstraint(
                "FK_ShelfStories_Stories_StoryId", shelfStoriesTable, storiesTable,
                new[] { storyIdColumn3 },
                storiesTable.FindUniqueConstraint("PK_Stories")!, ReferentialAction.Cascade);
            var fK_ShelfStories_Stories_StoryIdFk = RelationalModel.GetForeignKey(this,
                "Ogma3.Data.Shelves.ShelfStory",
                new[] { "StoryId" },
                "Ogma3.Data.Stories.Story",
                new[] { "Id" });
            fK_ShelfStories_Stories_StoryId.MappedForeignKeys.Add(fK_ShelfStories_Stories_StoryIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_ShelfStories_Stories_StoryIdFk).Add(fK_ShelfStories_Stories_StoryId);
            shelfStoriesTable.ForeignKeyConstraints.Add(fK_ShelfStories_Stories_StoryId);
            storiesTable.ReferencingForeignKeyConstraints.Add(fK_ShelfStories_Stories_StoryId);
            var fK_Shelves_AspNetUsers_OwnerId = new ForeignKeyConstraint(
                "FK_Shelves_AspNetUsers_OwnerId", shelvesTable, aspNetUsersTable,
                new[] { ownerIdColumn },
                aspNetUsersTable.FindUniqueConstraint("PK_AspNetUsers")!, ReferentialAction.Cascade);
            var fK_Shelves_AspNetUsers_OwnerIdFk = RelationalModel.GetForeignKey(this,
                "Ogma3.Data.Shelves.Shelf",
                new[] { "OwnerId" },
                "Ogma3.Data.Users.OgmaUser",
                new[] { "Id" });
            fK_Shelves_AspNetUsers_OwnerId.MappedForeignKeys.Add(fK_Shelves_AspNetUsers_OwnerIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Shelves_AspNetUsers_OwnerIdFk).Add(fK_Shelves_AspNetUsers_OwnerId);
            shelvesTable.ForeignKeyConstraints.Add(fK_Shelves_AspNetUsers_OwnerId);
            aspNetUsersTable.ReferencingForeignKeyConstraints.Add(fK_Shelves_AspNetUsers_OwnerId);
            var fK_Shelves_Icons_IconId = new ForeignKeyConstraint(
                "FK_Shelves_Icons_IconId", shelvesTable, iconsTable,
                new[] { iconIdColumn1 },
                iconsTable.FindUniqueConstraint("PK_Icons")!, ReferentialAction.SetNull);
            var fK_Shelves_Icons_IconIdFk = RelationalModel.GetForeignKey(this,
                "Ogma3.Data.Shelves.Shelf",
                new[] { "IconId" },
                "Ogma3.Data.Icons.Icon",
                new[] { "Id" });
            fK_Shelves_Icons_IconId.MappedForeignKeys.Add(fK_Shelves_Icons_IconIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Shelves_Icons_IconIdFk).Add(fK_Shelves_Icons_IconId);
            shelvesTable.ForeignKeyConstraints.Add(fK_Shelves_Icons_IconId);
            iconsTable.ReferencingForeignKeyConstraints.Add(fK_Shelves_Icons_IconId);
            var fK_Stories_AspNetUsers_AuthorId = new ForeignKeyConstraint(
                "FK_Stories_AspNetUsers_AuthorId", storiesTable, aspNetUsersTable,
                new[] { authorIdColumn2 },
                aspNetUsersTable.FindUniqueConstraint("PK_AspNetUsers")!, ReferentialAction.Cascade);
            var fK_Stories_AspNetUsers_AuthorIdFk = RelationalModel.GetForeignKey(this,
                "Ogma3.Data.Stories.Story",
                new[] { "AuthorId" },
                "Ogma3.Data.Users.OgmaUser",
                new[] { "Id" });
            fK_Stories_AspNetUsers_AuthorId.MappedForeignKeys.Add(fK_Stories_AspNetUsers_AuthorIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Stories_AspNetUsers_AuthorIdFk).Add(fK_Stories_AspNetUsers_AuthorId);
            storiesTable.ForeignKeyConstraints.Add(fK_Stories_AspNetUsers_AuthorId);
            aspNetUsersTable.ReferencingForeignKeyConstraints.Add(fK_Stories_AspNetUsers_AuthorId);
            var fK_Stories_ContentBlocks_ContentBlockId = new ForeignKeyConstraint(
                "FK_Stories_ContentBlocks_ContentBlockId", storiesTable, contentBlocksTable,
                new[] { contentBlockIdColumn1 },
                contentBlocksTable.FindUniqueConstraint("PK_ContentBlocks")!, ReferentialAction.NoAction);
            var fK_Stories_ContentBlocks_ContentBlockIdFk = RelationalModel.GetForeignKey(this,
                "Ogma3.Data.Stories.Story",
                new[] { "ContentBlockId" },
                "Ogma3.Data.Blacklists.ContentBlock",
                new[] { "Id" });
            fK_Stories_ContentBlocks_ContentBlockId.MappedForeignKeys.Add(fK_Stories_ContentBlocks_ContentBlockIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Stories_ContentBlocks_ContentBlockIdFk).Add(fK_Stories_ContentBlocks_ContentBlockId);
            storiesTable.ForeignKeyConstraints.Add(fK_Stories_ContentBlocks_ContentBlockId);
            contentBlocksTable.ReferencingForeignKeyConstraints.Add(fK_Stories_ContentBlocks_ContentBlockId);
            var fK_Stories_Ratings_RatingId = new ForeignKeyConstraint(
                "FK_Stories_Ratings_RatingId", storiesTable, ratingsTable,
                new[] { ratingIdColumn0 },
                ratingsTable.FindUniqueConstraint("PK_Ratings")!, ReferentialAction.Cascade);
            var fK_Stories_Ratings_RatingIdFk = RelationalModel.GetForeignKey(this,
                "Ogma3.Data.Stories.Story",
                new[] { "RatingId" },
                "Ogma3.Data.Ratings.Rating",
                new[] { "Id" });
            fK_Stories_Ratings_RatingId.MappedForeignKeys.Add(fK_Stories_Ratings_RatingIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Stories_Ratings_RatingIdFk).Add(fK_Stories_Ratings_RatingId);
            storiesTable.ForeignKeyConstraints.Add(fK_Stories_Ratings_RatingId);
            ratingsTable.ReferencingForeignKeyConstraints.Add(fK_Stories_Ratings_RatingId);
            var fK_StoryTags_Stories_StoryId = new ForeignKeyConstraint(
                "FK_StoryTags_Stories_StoryId", storyTagsTable, storiesTable,
                new[] { storyIdColumn4 },
                storiesTable.FindUniqueConstraint("PK_Stories")!, ReferentialAction.Cascade);
            var fK_StoryTags_Stories_StoryIdFk = RelationalModel.GetForeignKey(this,
                "Ogma3.Data.Stories.StoryTag",
                new[] { "StoryId" },
                "Ogma3.Data.Stories.Story",
                new[] { "Id" });
            fK_StoryTags_Stories_StoryId.MappedForeignKeys.Add(fK_StoryTags_Stories_StoryIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_StoryTags_Stories_StoryIdFk).Add(fK_StoryTags_Stories_StoryId);
            storyTagsTable.ForeignKeyConstraints.Add(fK_StoryTags_Stories_StoryId);
            storiesTable.ReferencingForeignKeyConstraints.Add(fK_StoryTags_Stories_StoryId);
            var fK_StoryTags_Tags_TagId = new ForeignKeyConstraint(
                "FK_StoryTags_Tags_TagId", storyTagsTable, tagsTable,
                new[] { tagIdColumn0 },
                tagsTable.FindUniqueConstraint("PK_Tags")!, ReferentialAction.Cascade);
            var fK_StoryTags_Tags_TagIdFk = RelationalModel.GetForeignKey(this,
                "Ogma3.Data.Stories.StoryTag",
                new[] { "TagId" },
                "Ogma3.Data.Tags.Tag",
                new[] { "Id" });
            fK_StoryTags_Tags_TagId.MappedForeignKeys.Add(fK_StoryTags_Tags_TagIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_StoryTags_Tags_TagIdFk).Add(fK_StoryTags_Tags_TagId);
            storyTagsTable.ForeignKeyConstraints.Add(fK_StoryTags_Tags_TagId);
            tagsTable.ReferencingForeignKeyConstraints.Add(fK_StoryTags_Tags_TagId);
            var fK_Votes_AspNetUsers_UserId = new ForeignKeyConstraint(
                "FK_Votes_AspNetUsers_UserId", votesTable, aspNetUsersTable,
                new[] { userIdColumn9 },
                aspNetUsersTable.FindUniqueConstraint("PK_AspNetUsers")!, ReferentialAction.Cascade);
            var fK_Votes_AspNetUsers_UserIdFk = RelationalModel.GetForeignKey(this,
                "Ogma3.Data.Votes.Vote",
                new[] { "UserId" },
                "Ogma3.Data.Users.OgmaUser",
                new[] { "Id" });
            fK_Votes_AspNetUsers_UserId.MappedForeignKeys.Add(fK_Votes_AspNetUsers_UserIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Votes_AspNetUsers_UserIdFk).Add(fK_Votes_AspNetUsers_UserId);
            votesTable.ForeignKeyConstraints.Add(fK_Votes_AspNetUsers_UserId);
            aspNetUsersTable.ReferencingForeignKeyConstraints.Add(fK_Votes_AspNetUsers_UserId);
            var fK_Votes_Stories_StoryId = new ForeignKeyConstraint(
                "FK_Votes_Stories_StoryId", votesTable, storiesTable,
                new[] { storyIdColumn5 },
                storiesTable.FindUniqueConstraint("PK_Stories")!, ReferentialAction.Cascade);
            var fK_Votes_Stories_StoryIdFk = RelationalModel.GetForeignKey(this,
                "Ogma3.Data.Votes.Vote",
                new[] { "StoryId" },
                "Ogma3.Data.Stories.Story",
                new[] { "Id" });
            fK_Votes_Stories_StoryId.MappedForeignKeys.Add(fK_Votes_Stories_StoryIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Votes_Stories_StoryIdFk).Add(fK_Votes_Stories_StoryId);
            votesTable.ForeignKeyConstraints.Add(fK_Votes_Stories_StoryId);
            storiesTable.ReferencingForeignKeyConstraints.Add(fK_Votes_Stories_StoryId);
            return relationalModel.MakeReadOnly();
        }
    }
}
