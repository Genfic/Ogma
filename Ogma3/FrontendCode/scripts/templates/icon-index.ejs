<!doctype html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Document</title>

    <style>
		@import url('https://fonts.googleapis.com/css2?family=Open+Sans:ital,wght@0,300..800;1,300..800&display=swap');

        :root{
            --acc: oklch(0.878 0.279 139.428 / 0.5);
            --bg: #f6f3ee;
            --fg: #151515;

            @media (prefers-color-scheme: dark) {
                --bg: #252525;
                --fg: #f6f3ee;
            }
        }

		:root[theme="light"] {
			--bg: #f6f3ee;
			--fg: #151515;
		}

        :root[theme="dark"] {
			--bg: #252525;
			--fg: #f6f3ee;
		}

        *, *:before, *:after {
            box-sizing: border-box;
        }

        body {
            font-family: "Open Sans", sans-serif;
			font-optical-sizing: auto;
            background-color: var(--bg);
            color: var(--fg);
            margin: 0;
            padding: 0;
        }

        svg {
            width: 50px;
            height: 50px;
            color: var(--fg);
        }

        h1 {
            padding-left: 1rem;
        }

        main {
            padding: 1rem;
        }

        #icon-name {
            text-align: center;
            position: sticky;
            background-color: var(--bg);
            top: -1px;
            padding-bottom: .5rem;
            z-index: 999;
            transition: box-shadow .2s, padding-top .2s;

            &.is-pinned {
                box-shadow: 0 0 1rem rgba(0, 0, 0, .5);
                padding-top: .5rem;
            }
        }

        .icon-list {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));
            grid-auto-rows: auto 1fr;
        }

        .icon {
            position: relative;
			display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: space-between;
            padding: .5rem .5rem 1rem .5rem;
            border: none;
            background-color: transparent;
            transition: background-color .1s;
            cursor: pointer;

            .family {
                align-self: baseline;
                color: var(--fg);
            }

            .copied {
                display: block;
                position: absolute;
                left: 0;
                right: 0;
                bottom: .25rem;
                text-transform: uppercase;
                color: var(--fg);
            }

            &.copied {
                background-color: var(--acc);
				outline: 1px solid var(--fg);
                &:hover {
					background-color: var(--acc);
                }
            }

            &:hover {
                outline: 1px solid var(--fg);
            }
        }

        #theme-swap {
            position: fixed;
            bottom: 1rem;
            right: 1rem;
            z-index: 999;
            padding: 1rem;
            border: 1px solid var(--fg);
            background-color: var(--bg);
            border-radius: 1000px;
            width: 3rem;
            height: 3rem;
            color: var(--fg);
            cursor: pointer;
        }
    </style>
</head>
<body>
<h1>Icons</h1>
<h2 id="icon-name">Pick an icon</h2>
<main class="icon-list">
    <% svgs.forEach(({ svg, name }) => { %>
        <button class="icon" data-name="<%= name _%>">
            <span class="family"><%= name.split(':')[0] %></span>
            <%- svg %>
        </button>
    <% }) %>
</main>

<button id="theme-swap">
    T
</button>

<script>
	const observer = new IntersectionObserver(
		([e]) => {
			e.target.classList.toggle("is-pinned", e.intersectionRatio < 1)
        },
		{ threshold: [1] }
	);

	const icons = document.querySelectorAll('.icon');
	const name = document.querySelector('#icon-name');

    icons.forEach(icon => {
		const copied = document.createElement('span');
		copied.innerText = 'Copied!';
		copied.classList.add('copied');

        icon.addEventListener('mouseenter', () => {
            name.innerText = icon.dataset.name;
        });
		icon.addEventListener('mouseleave', () => {
            name.innerText = 'Pick an icon';
        });
		icon.addEventListener('click', async () => {
            await navigator.clipboard.writeText(icon.dataset.name);
			icon.classList.add('copied');
			icon.appendChild(copied);
			setTimeout(() => {
				icon.classList.remove("copied");
				icon.removeChild(copied);
			}, 500);
        });
    });

	observer.observe(name);

	const themeSwap = document.querySelector('#theme-swap');
	themeSwap.addEventListener('click', () => {
		if (document.documentElement.getAttribute('theme') === 'light') {
			document.documentElement.setAttribute('theme', 'dark');
        } else {
			document.documentElement.setAttribute('theme', 'light');
        }
    })
</script>
</body>
</html>